import { Document } from '../lib/document-types'

const _docs: Document[] = [
  // discord.js/9.0.2.json
  {"meta":{"generator":"0.6.0","format":19,"date":1482128808454},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<p align=\"center\">\r\n  <a href=\"https://hydrabolt.github.io/discord.js\">\r\n    <img alt=\"discord.js\" src=\"http://i.imgur.com/sPOLh9y.png\" width=\"546\">\r\n  </a>\r\n</p>\r\n\r\n[![Build Status](https://travis-ci.org/hydrabolt/discord.js.svg)](https://travis-ci.org/hydrabolt/discord.js) [![Documentation Status](https://readthedocs.org/projects/discordjs/badge/?version=latest)](http://discordjs.readthedocs.org/en/latest/?badge=latest)\r\n\r\n[![NPM](https://nodei.co/npm/discord.js.png?downloads=true&stars=true)](https://nodei.co/npm/discord.js/)\r\n\r\n# Welcome!\r\nWelcome to the discord.js rewrite documentation. The rewrite has taken a lot of time, but it should be much more\r\nstable and performance-friendly than previous versions.\r\n\r\n## Installation\r\n`npm i --save hydrabolt/discord.js#indev-rewrite`\r\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# About Version 9.0\r\nThe 9.0 rewrite takes a much more OOP approach than previous versions, which allows code to be much more manageable.\r\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\r\nolder versions and it also has support for new Discord Features, such as emojis.\r\n\r\n## Upgrading your code\r\nVersion 9, while containing a number of breaking changes, does not require a lot of changes in the code logic.\r\nIt does, however, require changes in some of the method changes. This is because most of the methods have been\r\nmoved away from the <Client> class into other classes where they belong.\r\n\r\nHere are a few examples of methods that has changed:\r\n\r\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\r\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\r\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\r\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\r\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\r\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\r\n\r\nA couple more important details:\r\n\r\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\r\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\r\n\r\n## Callbacks\r\n\r\nVersion 9.0 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.\r\n\r\nFor example, the following code:\r\n\r\n```js\r\nbot.getChannelLogs(channel, 100, function(messages) {\r\n  console.log(`${messages.length} messages found`);\r\n});\r\n```\r\n\r\n```js\r\nmsg.channel.getMessages({limit: 100})\r\n.then(messages => {\r\n  console.log(`${messages.length} messages found`);\r\n});\r\n```\r\n","path":"docs/general/updating.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/*\r\n  A ping pong bot, whenever you send \"ping\", it replies \"pong\".\r\n*/\r\n\r\n// import the discord.js module\r\nconst Discord = require('discord.js');\r\n\r\n// create an instance of a Discord Client, and call it bot\r\nconst bot = new Discord.Client();\r\n\r\n// the token of your bot - https://discordapp.com/developers/applications/me\r\nconst token = 'your bot token here';\r\n\r\n// the ready event is vital, it means that your bot will only start reacting to information\r\n// from Discord _after_ ready is emitted.\r\nbot.on('ready', () => {\r\n  console.log('I am ready!');\r\n});\r\n\r\n// create an event listener for messages\r\nbot.on('message', message => {\r\n  // if the message is \"ping\",\r\n  if (message.content === 'ping') {\r\n    // send \"pong\" to the same channel.\r\n    message.channel.sendMessage('pong');\r\n  }\r\n});\r\n\r\n// log our bot in\r\nbot.login(token);\r\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/*\r\n  Send a user a link to their avatar\r\n*/\r\n\r\n// import the discord.js module\r\nconst Discord = require('discord.js');\r\n\r\n// create an instance of a Discord Client, and call it bot\r\nconst bot = new Discord.Client();\r\n\r\n// the token of your bot - https://discordapp.com/developers/applications/me\r\nconst token = 'your bot token here';\r\n\r\n// the ready event is vital, it means that your bot will only start reacting to information\r\n// from Discord _after_ ready is emitted.\r\nbot.on('ready', () => {\r\n  console.log('I am ready!');\r\n});\r\n\r\n// create an event listener for messages\r\nbot.on('message', message => {\r\n  // if the message is \"what is my avatar\",\r\n  if (message.content === 'what is my avatar') {\r\n    // send the user's avatar URL\r\n    message.reply(message.author.avatarURL);\r\n  }\r\n});\r\n\r\n// log our bot in\r\nbot.login(token);\r\n","path":"docs/examples/avatars.js"}}}},"classes":[{"name":"Client","description":"The starting point for making a Discord Bot.","extends":["EventEmitter"],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":34,"file":"Client.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":42,"file":"Client.js","path":"src/client"}},{"name":"dataManager","description":"The data manager of the Client","access":"private","type":[[["ClientDataManager"]]],"meta":{"line":49,"file":"Client.js","path":"src/client"}},{"name":"manager","description":"The manager of the Client","access":"private","type":[[["ClientManager"]]],"meta":{"line":56,"file":"Client.js","path":"src/client"}},{"name":"ws","description":"The WebSocket Manager of the Client","access":"private","type":[[["WebSocketManager"]]],"meta":{"line":63,"file":"Client.js","path":"src/client"}},{"name":"resolver","description":"The Data Resolver of the Client","access":"private","type":[[["ClientDataResolver"]]],"meta":{"line":70,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"The Action Manager of the Client","access":"private","type":[[["ActionsManager"]]],"meta":{"line":77,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"The Voice Manager of the Client","access":"private","type":[[["ClientVoiceManager"]]],"meta":{"line":84,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"The shard helpers for the client (only if the process was spawned as a child, such as from a ShardingManager)","nullable":true,"type":[[["ShardUtil"]]],"meta":{"line":90,"file":"Client.js","path":"src/client"}},{"name":"users","description":"A Collection of the Client's stored users","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":96,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"A Collection of the Client's stored guilds","type":[[["Collection",".<"],["string",", "],["Guild",">"]]],"meta":{"line":102,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"A Collection of the Client's stored channels","type":[[["Collection",".<"],["string",", "],["Channel",">"]]],"meta":{"line":108,"file":"Client.js","path":"src/client"}},{"name":"presences","description":"A Collection of presences for friends of the logged in user.\r<warn>This is only present for user accounts, not bot accounts!</warn>","type":[[["Collection",".<"],["string",", "],["Presence",">"]]],"meta":{"line":115,"file":"Client.js","path":"src/client"}},{"name":"token","description":"The authorization token for the logged in user/bot.","nullable":true,"type":[[["string"]]],"meta":{"line":122,"file":"Client.js","path":"src/client"}},{"name":"email","description":"The email, if there is one, for the logged in Client","nullable":true,"type":[[["string"]]],"meta":{"line":131,"file":"Client.js","path":"src/client"}},{"name":"password","description":"The password, if there is one, for the logged in Client","nullable":true,"type":[[["string"]]],"meta":{"line":137,"file":"Client.js","path":"src/client"}},{"name":"user","description":"The ClientUser representing the logged in Client","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":143,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"The date at which the Client was regarded as being in the `READY` state.","nullable":true,"type":[[["Date"]]],"meta":{"line":149,"file":"Client.js","path":"src/client"}},{"name":"status","description":"The status for the logged in Client.","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":164,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"The uptime for the logged in Client.","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":173,"file":"Client.js","path":"src/client"}},{"name":"voiceConnections","description":"Returns a Collection, mapping Guild ID to Voice Connections.","readonly":true,"type":[[["Collection",".<"],["string",", "],["VoiceConnection",">"]]],"meta":{"line":182,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"The emojis that the client can use. Mapped by emoji ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["Emoji",">"]]],"meta":{"line":191,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"The timestamp that the client was last ready at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":204,"file":"Client.js","path":"src/client"}}],"methods":[{"name":"login","description":"Logs the client in. If successful, resolves with the account's token. <warn>If you're making a bot, it's\rmuch better to use a bot account rather than a user account.\rBot accounts have higher rate limits and have access to some features user accounts don't have. User bots\rthat are making a lot of API requests can even be banned.</warn>","examples":["// log the client in using a token\rconst token = 'my token';\rclient.login(token);","// log the client in using email and password\rconst email = 'user@email.com';\rconst password = 'supersecret123';\rclient.login(email, password);"],"params":[{"name":"tokenOrEmail","description":"The token or email used for the account. If it is an email, a password _must_ be\rprovided.","type":[[["string"]]]},{"name":"password","description":"The password for the account, only needed if an email was provided.","optional":true,"default":null,"type":[[["string"]]]}],"returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":227,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"Destroys the client and logs out.","returns":[[["Promise"]]],"meta":{"line":236,"file":"Client.js","path":"src/client"}},{"name":"syncGuilds","description":"This shouldn't really be necessary to most developers as it is automatically invoked every 30 seconds, however\rif you wish to force a sync of Guild data, you can use this. Only applicable to user accounts.","params":[{"name":"guilds","description":"An array or collection of guilds to sync","optional":true,"default":"this.guilds","type":[[["Array",".<"],["Guild",">"]],[["Collection",".<"],["string",", "],["Guild",">"]]]}],"meta":{"line":252,"file":"Client.js","path":"src/client"}},{"name":"fetchUser","description":"Caches a user, or obtains it from the cache if it's already cached.\rIf the user isn't already cached, it will only be obtainable by OAuth bot accounts.","params":[{"name":"id","description":"The ID of the user to obtain","type":[[["string"]]]}],"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":267,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"Fetches an invite object from an invite code.","params":[{"name":"invite","description":"An invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":277,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"Fetch a webhook by ID.","params":[{"name":"id","description":"ID of the webhook","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Webhook",">"]]],"meta":{"line":287,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"Sweeps all channels' messages and removes the ones older than the max message lifetime.\rIf the message has been edited, the time of the edit is used rather than the time of the original message.","params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\rwill be removed from the caches. The default is based on the client's `messageCacheLifetime` option.","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\ror -1 if the message cache lifetime is unlimited"},"meta":{"line":299,"file":"Client.js","path":"src/client"}}],"events":[{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["Channel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["Channel"]]]}],"meta":{"line":27,"file":"ChannelUpdate.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable.","type":[[["Guild"]]]}],"meta":{"line":45,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"guildEmojiCreate","description":"Emitted whenever an emoji is created","params":[{"name":"emoji","description":"The emoji that was created.","type":[[["Emoji"]]]}],"meta":{"line":13,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"guildEmojiDelete","description":"Emitted whenever an emoji is deleted","params":[{"name":"emoji","description":"The emoji that was deleted.","type":[[["Emoji"]]]}],"meta":{"line":13,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"guildEmojiUpdate","description":"Emitted whenever an emoji is updated","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["Emoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["Emoji"]]]}],"meta":{"line":23,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild.","type":[[["GuildMember"]]]}],"meta":{"line":43,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created.","type":[[["Role"]]]}],"meta":{"line":26,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted.","type":[[["Role"]]]}],"meta":{"line":40,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update.","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update.","type":[[["Role"]]]}],"meta":{"line":34,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update.","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update.","type":[[["Guild"]]]}],"meta":{"line":27,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update.","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update.","type":[[["Message"]]]}],"meta":{"line":36,"file":"MessageUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"Emitted for general warnings","params":[{"name":"The","description":"warning","type":[[["string"]]]}],"meta":{"line":400,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"Emitted for general debugging information","params":[{"name":"The","description":"debug information","type":[[["string"]]]}],"meta":{"line":406,"file":"Client.js","path":"src/client"}},{"name":"guildCreate","description":"Emitted whenever the client joins a Guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":26,"file":"ClientDataManager.js","path":"src/client"}},{"name":"channelCreate","description":"Emitted whenever a Channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["Channel"]]]}],"meta":{"line":11,"file":"ChannelCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelDelete","description":"Emitted whenever a Channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["Channel"]]]}],"meta":{"line":14,"file":"ChannelDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a Channel are updated. Due to the nature of the WebSocket event, not much information\rcan be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occured in","type":[[["Channel"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":23,"file":"ChannelPinsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":16,"file":"GuildBanAdd.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild that the unban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]}],"meta":{"line":13,"file":"GuildBanRemove.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildDelete","description":"Emitted whenever a Guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of Guild members is received (all members come from the same guild)","params":[{"name":"members","description":"The members in the chunk","type":[[["Array",".<"],["GuildMember",">"]]]}],"meta":{"line":22,"file":"GuildMembersChunk.js","path":"src/client/websocket/packets/handlers"}},{"name":"message","description":"Emitted whenever a message is created","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":13,"file":"MessageCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":13,"file":"MessageDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk","params":[{"name":"messages","description":"The deleted messages, mapped by their ID","type":[[["Collection",".<"],["string",", "],["Message",">"]]]}],"meta":{"line":11,"file":"MessageDeleteBulk.js","path":"src/client/websocket/packets/handlers"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence changes, or they change one of their details.","params":[{"name":"oldMember","description":"The member before the presence update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the presence update","type":[[["GuildMember"]]]}],"meta":{"line":52,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":59,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMemberAvailable","description":"Emitted whenever a member becomes available in a large Guild","params":[{"name":"member","description":"The member that became available","type":[[["GuildMember"]]]}],"meta":{"line":66,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":54,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStop","description":"Emitted whenever a user stops typing in a channel","params":[{"name":"channel","description":"The channel the user stopped typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that stopped typing","type":[[["User"]]]}],"meta":{"line":61,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"voiceStateUpdate","description":"Emitted whenever a user changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldMember","description":"The member before the voice state update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the voice state update","type":[[["GuildMember"]]]}],"meta":{"line":42,"file":"VoiceStateUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"disconnect","description":"Emitted whenever the client websocket is disconnected","meta":{"line":196,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"error","description":"Emitted whenever the Client encounters a serious connection error","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":233,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ready","description":"Emitted when the Client becomes ready to start working","meta":{"line":243,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"Emitted when the Client tries to reconnect after being disconnected","meta":{"line":286,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":726,"file":"Guild.js","path":"src/structures"}},{"name":"guildMemberUpdate","description":"Emitted whenever a Guild Member changes - i.e. new role, removed role, nickname","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":748,"file":"Guild.js","path":"src/structures"}},{"name":"guildMemberSpeaking","description":"Emitted once a Guild Member starts/stops speaking","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"Whether or not the member is speaking","type":[[["boolean"]]]}],"meta":{"line":772,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":19,"file":"Client.js","path":"src/client"}},{"name":"ClientDataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.\rextracting a User from a Message object.","access":"private","construct":{"name":"ClientDataResolver","params":[{"name":"client","description":"The client the resolver is for","type":[[["Client"]]]}]},"methods":[{"name":"resolveUser","description":"Resolves a UserResolvable to a User object","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":40,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveUserID","description":"Resolves a UserResolvable to a user ID string","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":54,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveGuild","description":"Resolves a GuildResolvable to a Guild object","params":[{"name":"guild","description":"The GuildResolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":73,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveGuildMember","description":"Resolves a GuildMemberResolvable to a GuildMember object","params":[{"name":"guild","description":"The guild that the member is part of","type":[[["GuildResolvable"]]]},{"name":"user","description":"The user that is part of the guild","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":92,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveChannel","description":"Resolves a ChannelResolvable to a Channel object","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":116,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":136,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolvePermission","description":"Resolves a PermissionResolvable to a permission number","params":[{"name":"permission","description":"The permission resolvable to resolve","type":[[["PermissionResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":186,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":205,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":223,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveFile","description":"Resolves a FileResolvable to a Buffer","params":[{"name":"resource","description":"The file resolvable to resolve","type":[[["FileResolvable"]]]}],"returns":[[["Promise",".<"],["Buffer",">"]]],"meta":{"line":241,"file":"ClientDataResolver.js","path":"src/client"}}],"meta":{"line":17,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ClientManager","description":"Manages the State and Background Tasks of the Client","access":"private","props":[{"name":"client","description":"The Client that instantiated this Manager","type":[[["Client"]]],"meta":{"line":13,"file":"ClientManager.js","path":"src/client"}},{"name":"heartbeatInterval","description":"The heartbeat interval, null if not yet set","nullable":true,"type":[[["number"]]],"meta":{"line":19,"file":"ClientManager.js","path":"src/client"}}],"methods":[{"name":"connectToWebSocket","description":"Connects the Client to the WebSocket","params":[{"name":"token","description":"The authorization token","type":[[["string"]]]},{"name":"resolve","description":"Function to run when connection is successful","type":[[["function"]]]},{"name":"reject","description":"Function to run when connection fails","type":[[["function"]]]}],"meta":{"line":28,"file":"ClientManager.js","path":"src/client"}},{"name":"setupKeepAlive","description":"Sets up a keep-alive interval to keep the Client's connection valid","params":[{"name":"time","description":"The interval in milliseconds at which heartbeat packets should be sent","type":[[["number"]]]}],"meta":{"line":50,"file":"ClientManager.js","path":"src/client"}}],"meta":{"line":7,"file":"ClientManager.js","path":"src/client"}},{"name":"RequestHandler","description":"A base class for different types of rate limiting handlers for the REST API.","access":"private","construct":{"name":"RequestHandler","params":[{"name":"restManager","description":"The REST manager to use","type":[[["RESTManager"]]]}]},"props":[{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["RESTManager"]]],"meta":{"line":14,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed.","type":[[["Array",".<"],["APIRequest",">"]]],"meta":{"line":20,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint.","type":[[["boolean"]]],"meta":{"line":27,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"methods":[{"name":"push","description":"Push a new API request into this bucket","params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":39,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue","meta":{"line":46,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"meta":{"line":5,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"SequentialRequestHandler","description":"Handles API Requests sequentially, i.e. we wait until the current request is finished before moving onto\rthe next. This plays a _lot_ nicer in terms of avoiding 429's when there is more than one session of the account,\rbut it can be slower.","extends":["RequestHandler"],"access":"private","construct":{"name":"SequentialRequestHandler","params":[{"name":"restManager","description":"The REST manager to use","type":[[["RESTManager"]]]},{"name":"endpoint","description":"The endpoint to handle","type":[[["string"]]]}]},"props":[{"name":"waiting","description":"Whether this rate limiter is waiting for a response from a request","type":[[["boolean"]]],"meta":{"line":22,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"endpoint","description":"The endpoint that this handler is handling","type":[[["string"]]],"meta":{"line":28,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"timeDifference","description":"The time difference between Discord's Dates and the local computer's Dates. A positive number means the local\rcomputer's time is ahead of Discord's.","type":[[["number"]]],"meta":{"line":35,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["RESTManager"]]],"meta":{"line":14,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed.","type":[[["Array",".<"],["APIRequest",">"]]],"meta":{"line":20,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint.","type":[[["boolean"]]],"meta":{"line":27,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"methods":[{"name":"execute","description":"Performs a request then resolves a promise to indicate its readiness for a new request","params":[{"name":"item","description":"The item to execute","type":[[["APIRequest"]]]}],"returns":[[["Promise",".<(?"],["Object","|"],["Error",")>"]]],"meta":{"line":48,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"push","description":"Push a new API request into this bucket","inherits":"RequestHandler#push","inherited":true,"params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":39,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue","inherits":"RequestHandler#handle","inherited":true,"meta":{"line":46,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"meta":{"line":10,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"ClientVoiceManager","description":"Manages all the voice stuff for the Client","access":"private","props":[{"name":"client","description":"The client that instantiated this voice manager","type":[[["Client"]]],"meta":{"line":17,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection",".<"],["string",", "],["VoiceConnection",">"]]],"meta":{"line":23,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"pending","description":"Pending connection attempts, maps Guild ID to VoiceChannel","type":[[["Collection",".<"],["string",", "],["VoiceChannel",">"]]],"meta":{"line":29,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel","params":[{"name":"channel","description":"The channel to join","type":[[["VoiceChannel"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"meta":{"line":48,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"joinChannel","description":"Sets up a request to join a voice channel","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise",".<"],["VoiceConnection",">"]]],"meta":{"line":79,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":11,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"PendingVoiceConnection","description":"Represents a Pending Voice Connection","access":"private","props":[{"name":"voiceManager","description":"The ClientVoiceManager that instantiated this pending connection","type":[[["ClientVoiceManager"]]],"meta":{"line":128,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"channel","description":"The channel that this pending voice connection will attempt to join","type":[[["VoiceChannel"]]],"meta":{"line":134,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"deathTimer","description":"The timeout that will be invoked after 15 seconds signifying a failure to connect","type":[[["Timeout"]]],"meta":{"line":140,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"data","description":"An object containing data required to connect to the voice servers with","type":[[["object"]]],"meta":{"line":147,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the the voice servers","params":[{"name":"token","description":"the token","type":[[["string"]]]},{"name":"endpoint","description":"the endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":167,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection","params":[{"name":"sessionID","description":"the session ID","type":[[["string"]]]}],"meta":{"line":202,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"upgrade","description":"Upgrades this Pending Connection to a full Voice Connection","returns":[[["VoiceConnection"]]],"meta":{"line":243,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":120,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\r```js\r// obtained using:\rvoiceChannel.join().then(connection => {\r  // you can play a file or a stream here:\r  connection.playFile('./file.mp3').then(dispatcher => {\r\r  });\r});\r```","extends":["EventEmitter"],"props":[{"name":"passes","description":"How many passes the dispatcher should take when sending packets to reduce packet loss. Values over 5\raren't recommended, as it means you are using 5x more bandwidth. You _can_ edit this at runtime.","type":[[["number"]]],"meta":{"line":41,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether playing is paused","type":[[["boolean"]]],"meta":{"line":47,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"time","description":"How long the stream dispatcher has been \"speaking\" for","readonly":true,"type":[[["number"]]],"meta":{"line":57,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The total time, taking into account pauses and skips, that the dispatcher has been streaming for","readonly":true,"type":[[["number"]]],"meta":{"line":66,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volume","description":"The volume of the stream, relative to the stream's input volume","readonly":true,"type":[[["number"]]],"meta":{"line":75,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":83,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolumeDecibels","description":"Set the volume in decibels","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":91,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolumeLogarithmic","description":"Set the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":99,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pause","description":"Stops sending voice packets to the voice connection (stream may still progress however)","meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes sending voice packets to the voice connection (may be further on in the stream than when paused)","meta":{"line":113,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"end","description":"Stops the current stream permanently and emits an `end` event.","meta":{"line":120,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"events":[{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":126,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the dispatcher starts streaming","meta":{"line":198,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"end","description":"Emitted once the stream has ended. Attach a `once` listener to this.","meta":{"line":239,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"error","description":"Emitted once the stream has encountered an error. Attach a `once` listener to this. Also emits `end`.","params":[{"name":"err","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":248,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted when the stream wants to give debug information.","params":[{"name":"information","description":"The debug information","type":[[["string"]]]}],"meta":{"line":258,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":20,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"AudioPlayer","description":"Represents the Audio Player of a Voice Connection","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection the player belongs to","type":[[["VoiceConnection"]]],"meta":{"line":18,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"dispatcher","description":"The current stream dispatcher, if a stream is being played","type":[[["StreamDispatcher"]]],"meta":{"line":26,"file":"AudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":11,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives voice data from a voice connection.\r```js\r// obtained using:\rvoiceChannel.join().then(connection => {\r const receiver = connection.createReceiver();\r});\r```","extends":["EventEmitter"],"props":[{"name":"destroyed","description":"Whether or not this receiver has been destroyed.","type":[[["boolean"]]],"meta":{"line":33,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"voiceConnection","description":"The VoiceConnection that instantiated this","type":[[["VoiceConnection"]]],"meta":{"line":39,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"methods":[{"name":"recreate","description":"If this VoiceReceiver has been destroyed, running `recreate()` will recreate the listener.\rThis avoids you having to create a new receiver.\r<info>Any streams that you had prior to destroying the receiver will not be recreated.</info>","meta":{"line":65,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"destroy","description":"Destroy this VoiceReceiver, also ending any streams that it may be controlling.","meta":{"line":75,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"createOpusStream","description":"Creates a readable stream for a user that provides opus data while the user is speaking. When the user\rstops speaking, the stream is destroyed.","params":[{"name":"user","description":"The user to create the stream for","type":[[["UserResolvable"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":94,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"createPCMStream","description":"Creates a readable stream for a user that provides PCM data while the user is speaking. When the user\rstops speaking, the stream is destroyed. The stream is 32-bit signed stereo PCM at 48KHz.","params":[{"name":"user","description":"The user to create the stream for","type":[[["UserResolvable"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":109,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"warn","description":"Emitted whenever a voice packet cannot be decrypted","params":[{"name":"message","description":"The warning message","type":[[["string"]]]}],"meta":{"line":122,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"opus","description":"Emitted whenever voice data is received from the voice connection. This is _always_ emitted (unlike PCM).","params":[{"name":"user","description":"The user that is sending the buffer (is speaking)","type":[[["User"]]]},{"name":"buffer","description":"The opus buffer","type":[[["Buffer"]]]}],"meta":{"line":132,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"pcm","description":"Emits decoded voice data when it's received. For performance reasons, the decoding will only\rhappen if there is at least one `pcm` listener on this receiver.","params":[{"name":"user","description":"The user that is sending the buffer (is speaking)","type":[[["User"]]]},{"name":"buffer","description":"The decoded buffer","type":[[["Buffer"]]]}],"meta":{"line":140,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":18,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"SecretKey","description":"Represents a Secret Key used in encryption over voice","access":"private","props":[{"name":"key","description":"The key used for encryption","type":[[["Uint8Array"]]],"meta":{"line":11,"file":"SecretKey.js","path":"src/client/voice/util"}}],"meta":{"line":5,"file":"SecretKey.js","path":"src/client/voice/util"}},{"name":"VoiceConnection","description":"Represents a connection to a Voice Channel in Discord.\r```js\r// obtained using:\rvoiceChannel.join().then(connection => {\r\r});\r```","extends":["EventEmitter"],"props":[{"name":"voiceManager","description":"The Voice Manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":27,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":33,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Whether we're currently transmitting audio","type":[[["boolean"]]],"meta":{"line":39,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receivers","description":"An array of Voice Receivers that have been created for this connection","type":[[["Array",".<"],["VoiceReceiver",">"]]],"meta":{"line":45,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["object"]]],"meta":{"line":52,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":58,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC to speaking values","access":"private","type":[[["Map",".<"],["number",", "],["boolean",">"]]],"meta":{"line":84,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["object"]]],"meta":{"line":91,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\" or not","access":"private","params":[{"name":"value","description":"whether or not to speak","type":[[["boolean"]]]}],"meta":{"line":100,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnect the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":118,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection","access":"private","meta":{"line":140,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playFile","description":"Play the given file in the voice connection.","examples":["// play files natively\rvoiceChannel.join()\r .then(connection => {\r   const dispatcher = connection.playFile('C:/Users/Discord/Desktop/music.mp3');\r })\r .catch(console.error);"],"params":[{"name":"file","description":"The path to the file","type":[[["string"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":223,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playStream","description":"Plays and converts an audio stream in the voice connection.","examples":["// play streams using ytdl-core\rconst ytdl = require('ytdl-core');\rconst streamOptions = { seek: 0, volume: 1 };\rvoiceChannel.join()\r .then(connection => {\r   const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', {filter : 'audioonly'});\r   const dispatcher = connection.playStream(stream, streamOptions);\r })\r .catch(console.error);"],"params":[{"name":"stream","description":"The audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":243,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playConvertedStream","description":"Plays a stream of 16-bit signed stereo PCM at 48KHz.","params":[{"name":"stream","description":"The audio stream to play.","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":254,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"createReceiver","description":"Creates a VoiceReceiver so you can start listening to voice data. It's recommended to only create one of these.","returns":[[["VoiceReceiver"]]],"meta":{"line":263,"file":"VoiceConnection.js","path":"src/client/voice"}}],"events":[{"name":"debug","description":"Debug info from the connection","params":[{"name":"message","description":"the debug message","type":[[["string"]]]}],"meta":{"line":61,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection","params":[{"name":"warning","description":"the warning","type":[[["string"]],[["error"]]]}],"meta":{"line":70,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects","meta":{"line":129,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"the encountered error","type":[[["Error"]]]}],"meta":{"line":150,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\rthe connection will already be ready.","meta":{"line":164,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user starts/stops speaking","params":[{"name":"user","description":"The user that has started/stopped speaking","type":[[["User"]]]},{"name":"speaking","description":"Whether or not the user is speaking","type":[[["boolean"]]]}],"meta":{"line":191,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":19,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP Client for a Voice Connection","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":31,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":37,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"discordAddress","description":"The address of the discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":49,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":55,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"discordPort","description":"The port of the discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":76,"file":"VoiceUDPClient.js","path":"src/client/voice"}}],"methods":[{"name":"findEndpointAddress","description":"Tries to resolve the voice server endpoint to an address","returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":84,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"send","description":"Send a packet to the UDP client","params":[{"name":"packet","description":"the packet to send","type":[[["Object"]]]}],"returns":[[["Promise",".<"],["Object",">"]]],"meta":{"line":102,"file":"VoiceUDPClient.js","path":"src/client/voice"}}],"meta":{"line":23,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":19,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":25,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"client","description":"The client of this voice websocket","readonly":true,"type":[[["Client"]]],"meta":{"line":42,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":74,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket","meta":{"line":49,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":60,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"the data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":86,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"the packet to send","type":[[["Object"]]]}],"returns":[[["Promise",".<"],["string",">"]]],"meta":{"line":102,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onOpen","description":"Called whenever the WebSocket opens","meta":{"line":114,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket","params":[{"name":"event","description":"the message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":133,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket Server is lost","meta":{"line":144,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"the error that occurred","type":[[["Error"]]]}],"meta":{"line":152,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket","params":[{"name":"packet","description":"the received packet","type":[[["Object"]]]}],"meta":{"line":160,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket","params":[{"name":"interval","description":"the interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":203,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists","meta":{"line":223,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet","meta":{"line":235,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"events":[{"name":"ready","description":"Emitted once the voice websocket receives the ready packet","params":[{"name":"packet","description":"the received packet","type":[[["Object"]]]}],"meta":{"line":164,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session","params":[{"name":"encryptionMode","description":"the type of encryption being used","type":[[["string"]]]},{"name":"secretKey","description":"the secret key used for encryption","type":[[["SecretKey"]]]}],"meta":{"line":172,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a speaking packet is received","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":181,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":189,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"warn","description":"Emitted whenver the voice websocket encounters a non-fatal error","params":[{"name":"warn","description":"the warning","type":[[["string"]]]}],"meta":{"line":209,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"meta":{"line":11,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The Webhook Client","extends":["Webhook"],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"The id of the webhook.","type":[[["string"]]]},{"name":"token","description":"the token of the webhook.","type":[[["string"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":28,"file":"WebhookClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":35,"file":"WebhookClient.js","path":"src/client"}},{"name":"resolver","description":"The Data Resolver of the Client","access":"private","type":[[["ClientDataResolver"]]],"meta":{"line":42,"file":"WebhookClient.js","path":"src/client"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the Webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the Webhook","type":[[["string"]]],"meta":{"line":35,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the Webhook","type":[[["string"]]],"meta":{"line":41,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the Webhook","type":[[["string"]]],"meta":{"line":47,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the Webhook belongs to","type":[[["string"]]],"meta":{"line":53,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the Webhook belongs to","type":[[["string"]]],"meta":{"line":59,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"sendMessage","description":"Send a message with this webhook","inherits":"Webhook#sendMessage","inherited":true,"examples":["// send a message\rwebhook.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send.","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide.","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":87,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Send a raw slack message with this webhook","inherits":"Webhook#sendSlackMessage","inherited":true,"examples":["// send a slack message\rwebhook.sendSlackMessage({\r  'username': 'Wumpus',\r  'attachments': [{\r    'pretext': 'this looks pretty cool',\r    'color': '#F0F',\r    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\r    'footer': 'Powered by sneks',\r    'ts': new Date().getTime() / 1000\r  }]\r}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send.","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":108,"file":"Webhook.js","path":"src/structures"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message with this webhook","inherits":"Webhook#sendTTSMessage","inherited":true,"examples":["// send a TTS message\rwebhook.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":123,"file":"Webhook.js","path":"src/structures"}},{"name":"sendFile","description":"Send a file with this webhook","inherits":"Webhook#sendFile","inherited":true,"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":136,"file":"Webhook.js","path":"src/structures"}},{"name":"sendCode","description":"Send a code block with this webhook","inherits":"Webhook#sendCode","inherited":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":163,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edit the Webhook.","inherits":"Webhook#edit","inherited":true,"params":[{"name":"name","description":"The new name for the Webhook","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the Webhook.","type":[[["FileResolvable"]]]}],"returns":[[["Promise",".<"],["Webhook",">"]]],"meta":{"line":179,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Delete the Webhook","inherits":"Webhook#delete","inherited":true,"returns":[[["Promise"]]],"meta":{"line":200,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":11,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketManager","description":"The WebSocket Manager of the Client","access":"private","props":[{"name":"client","description":"The Client that instantiated this WebSocketManager","type":[[["Client"]]],"meta":{"line":18,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"packetManager","description":"A WebSocket Packet manager, it handles all the messages","type":[[["PacketManager"]]],"meta":{"line":24,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"status","description":"The status of the WebSocketManager, a type of Constants.Status. It defaults to IDLE.","type":[[["number"]]],"meta":{"line":30,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sessionID","description":"The session ID of the connection, null if not yet available.","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sequence","description":"The packet count of the client, null if not yet available.","nullable":true,"type":[[["number"]]],"meta":{"line":42,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"gateway","description":"The gateway address for this WebSocket connection, null if not yet available.","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"normalReady","description":"Whether READY was emitted normally (all packets received) or not","type":[[["boolean"]]],"meta":{"line":54,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ws","description":"The WebSocket connection to the gateway","nullable":true,"type":[[["WebSocket"]]],"meta":{"line":60,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"disabledEvents","description":"An object with keys that are websocket event names that should be ignored","type":[[["Object"]]],"meta":{"line":66,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"_connect","description":"Connects the client to a given gateway","params":[{"name":"gateway","description":"The gateway to connect to","type":[[["string"]]]}],"meta":{"line":76,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"send","description":"Sends a packet to the gateway","params":[{"name":"data","description":"An object that can be JSON stringified","type":[[["Object"]]]},{"name":"force","description":"Whether or not to send the packet immediately","default":false,"type":[[["boolean"]]]}],"meta":{"line":103,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventOpen","description":"Run whenever the gateway connections opens up","meta":{"line":145,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_sendResume","description":"Sends a gateway resume packet, in cases of unexpected disconnections.","meta":{"line":154,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_sendNewIdentify","description":"Sends a new identification packet, in cases of new connections or failed reconnections.","meta":{"line":175,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventClose","description":"Run whenever the connection to the gateway is closed, it will try to reconnect the client.","params":[{"name":"event","description":"The received websocket data","type":[[["Object"]]]}],"meta":{"line":194,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventMessage","description":"Run whenever a message is received from the WebSocket. Returns `true` if the message\rwas handled properly.","params":[{"name":"event","description":"The received websocket data","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":213,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"eventError","description":"Run whenever an error occurs with the WebSocket connection. Tries to reconnect","params":[{"name":"err","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":232,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"checkIfReady","description":"Runs on new packets before `READY` to see if the Client is ready yet, if it is prepares\rthe `READY` event.","meta":{"line":257,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"tryReconnect","description":"Tries to reconnect the client, changing the status to Constants.Status.RECONNECTING.","meta":{"line":282,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":11,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"Shard","description":"Represents a Shard spawned by the ShardingManager.","construct":{"name":"Shard","params":[{"name":"manager","description":"The sharding manager","type":[[["ShardingManager"]]]},{"name":"id","description":"The ID of this shard","type":[[["number"]]]},{"name":"args","description":"Command line arguments to pass to the script","optional":true,"default":"[]","type":[[["array"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":20,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard","type":[[["number"]]],"meta":{"line":26,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"The environment variables for the shard","type":[[["Object"]]],"meta":{"line":32,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard","type":[[["ChildProcess"]]],"meta":{"line":42,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the shard's process.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise",".<"],["Shard",">"]]],"meta":{"line":59,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a Client property value of the shard.","examples":["shard.fetchClientValue('guilds.size').then(count => {\r  console.log(`${count} guilds in shard ${shard.id}`);\r}).catch(console.error);"],"params":[{"name":"prop","description":"Name of the Client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise",".<"],["*",">"]]],"meta":{"line":77,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script on the shard, in the context of the Client.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":105,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":133,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":9,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process, such as from a ShardingManager","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]}]},"props":[{"name":"id","description":"ID of this shard","readonly":true,"type":[[["number"]]],"meta":{"line":21,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":30,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process","params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":39,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a Client property value of each shard.","examples":["client.shard.fetchClientValues('guilds.size').then(results => {\r  console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\r}).catch(console.error);"],"params":[{"name":"prop","description":"Name of the Client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Array",">"]]],"meta":{"line":57,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the Clients.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["Array",">"]]],"description":"Results of the script execution"},"meta":{"line":78,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":99,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":121,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class","scope":"static","params":[{"name":"client","description":"Client to use","type":[[["Client"]]]}],"returns":[[["ShardUtil"]]],"meta":{"line":132,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":7,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that can be used to help you spawn shards of your Client. Each shard is completely separate\rfrom the other. The Shard Manager takes a path to a file and spawns it under the specified amount of shards safely.\rIf you do not select an amount of shards, the manager will automatically decide the best amount.\r<warn>The Sharding Manager is still experimental</warn>","extends":["EventEmitter"],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of shards to spawn, or \"auto\"","optional":true,"default":"'auto'","type":[[["number"]],[["string"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning","optional":true,"default":"[]","type":[[["Array",".<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":38,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that this manager is going to spawn","type":[[["number"]],[["string"]]],"meta":{"line":48,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":63,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards.","type":[[["Array",".<"],["string",">"]]],"meta":{"line":69,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":75,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection",".<"],["number",", "],["Shard",">"]]],"meta":{"line":81,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Spawns a single shard.","params":[{"name":"id","description":"The ID of the shard to spawn. **This is usually not necessary.**","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Shard",">"]]],"meta":{"line":89,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["number",", "],["Shard",">>"]]],"meta":{"line":107,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"_spawn","description":"Actually spawns shards, unlike that poser above >:(","access":"private","params":[{"name":"amount","description":"Number of shards to spawn","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["number",", "],["Shard",">>"]]],"meta":{"line":130,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Send a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise",".<"],["Array",".<"],["Shard",">>"]]],"meta":{"line":161,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the Clients.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["Array",">"]]],"description":"Results of the script execution"},"meta":{"line":172,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a Client property value of each shard.","examples":["manager.fetchClientValues('guilds.size').then(results => {\r  console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\r}).catch(console.error);"],"params":[{"name":"prop","description":"Name of the Client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Array",">"]]],"meta":{"line":187,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"launch","description":"Emitted upon launching a shard","params":[{"name":"shard","description":"Shard that was launched","type":[[["Shard"]]]}],"meta":{"line":92,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":16,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"Channel","description":"Represents any Channel on Discord","props":[{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes the channel","examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":4,"file":"Channel.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord User","extends":["User"],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":16,"file":"ClientUser.js","path":"src/structures"}},{"name":"email","description":"The email of this account","type":[[["string"]]],"meta":{"line":22,"file":"ClientUser.js","path":"src/structures"}},{"name":"friends","description":"A Collection of friends for the logged in user.\r<warn>This is only filled for user accounts, not bot accounts!</warn>","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":31,"file":"ClientUser.js","path":"src/structures"}},{"name":"blocked","description":"A Collection of blocked users for the logged in user.\r<warn>This is only filled for user accounts, not bot accounts!</warn>","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":38,"file":"ClientUser.js","path":"src/structures"}},{"name":"client","description":"The Client that created the instance of the the User.","type":[[["Client"]]],"meta":{"line":15,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the User","type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the User","type":[[["string"]]],"meta":{"line":32,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the User","type":[[["string"]]],"meta":{"line":38,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","type":[[["string"]]],"meta":{"line":44,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the User is a Bot.","type":[[["boolean"]]],"meta":{"line":50,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created","readonly":true,"type":[[["Date"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":82,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar (if they have one, otherwise null)","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":95,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Set the username of the logged in Client.\r<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\revery hour. Use this sparingly!</info>","examples":["// set username\rclient.user.setUsername('discordjs')\r .then(user => console.log(`My new username is ${user.username}`))\r .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":57,"file":"ClientUser.js","path":"src/structures"}},{"name":"setEmail","description":"If this user is a \"self bot\" or logged in using a normal user's details (which should be avoided), you can set the\remail here.","examples":["// set email\rclient.user.setEmail('bob@gmail.com')\r .then(user => console.log(`My new email is ${user.email}`))\r .catch(console.error);"],"params":[{"name":"email","description":"The new email","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":72,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPassword","description":"If this user is a \"self bot\" or logged in using a normal user's details (which should be avoided), you can set the\rpassword here.","examples":["// set password\rclient.user.setPassword('password123')\r .then(user => console.log('New password set!'))\r .catch(console.error);"],"params":[{"name":"password","description":"The new password","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":87,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Set the avatar of the logged in Client.","examples":["// set avatar\rclient.user.setAvatar('./avatar.png')\r .then(user => console.log(`New avatar set!`))\r .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["FileResolvable"]],[["Base64Resolveable"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":101,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Set the status of the logged in user.","params":[{"name":"status","description":"can be `online`, `idle`, `invisible` or `dnd` (do not disturb)","type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":118,"file":"ClientUser.js","path":"src/structures"}},{"name":"setGame","description":"Set the current game of the logged in user.","params":[{"name":"game","description":"the game being played","type":[[["string"]]]},{"name":"streamingURL","description":"an optional URL to a twitch stream, if one is available.","optional":true,"type":[[["string"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":128,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Set/remove the AFK flag for the current user.","params":[{"name":"afk","description":"whether or not the user is AFK.","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":140,"file":"ClientUser.js","path":"src/structures"}},{"name":"addFriend","description":"Send a friend request\r<warn>This is only available for user accounts, not bot accounts!</warn>","params":[{"name":"user","description":"The user to send the friend request to.","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Promise",".<"],["User",">"]]],"description":"The user the friend request was sent to."},"meta":{"line":150,"file":"ClientUser.js","path":"src/structures"}},{"name":"removeFriend","description":"Remove a friend\r<warn>This is only available for user accounts, not bot accounts!</warn>","params":[{"name":"user","description":"The user to remove from your friends","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Promise",".<"],["User",">"]]],"description":"The user that was removed"},"meta":{"line":161,"file":"ClientUser.js","path":"src/structures"}},{"name":"createGuild","description":"Creates a guild\r<warn>This is only available for user accounts, not bot accounts!</warn>","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"region","description":"The region for the server","type":[[["string"]]]},{"name":"icon","description":"The icon for the guild","optional":true,"default":null,"type":[[["FileResolvable"]],[["Base64Resolvable"]]]}],"returns":{"types":[[["Promise",".<"],["Guild",">"]]],"description":"The guild that was created"},"meta":{"line":174,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Set the full presence of the current user.","params":[{"name":"data","description":"the data to provide","type":[[["Object"]]]}],"returns":[[["Promise",".<"],["ClientUser",">"]]],"meta":{"line":192,"file":"ClientUser.js","path":"src/structures"}},{"name":"typingIn","description":"Check whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Get the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":115,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":125,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM Channel (if one exists) between the Client and the User. Resolves with the Channel if successful.","inherits":"User#deleteDM","inherited":true,"returns":[[["Promise",".<"],["DMChannel",">"]]],"meta":{"line":134,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Blocks the user","inherits":"User#block","inherited":true,"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblocks the user","inherits":"User#unblock","inherited":true,"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":166,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Get the profile of the user","inherits":"User#fetchProfile","inherited":true,"returns":[[["Promise",".<"],["UserProfile",">"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares username, ID, discriminator, status and the game being played.\rIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"The user to compare","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":184,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the User's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// logs: Hello from <@123456789>!\rconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":202,"file":"User.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","inherits":"User#sendMessage","inherited":true,"implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","inherits":"User#sendTTSMessage","inherited":true,"implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","inherits":"User#sendFile","inherited":true,"implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","inherits":"User#sendCode","inherited":true,"implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":8,"file":"ClientUser.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a Direct Message Channel between two users.","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":25,"file":"DMChannel.js","path":"src/structures"}},{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically concatenates the recipient's mention instead of the\rDM channel object.","returns":[[["string"]]],"meta":{"line":35,"file":"DMChannel.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","implements":["TextBasedChannel#fetchMessage"],"examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","implements":["TextBasedChannel#fetchMessages"],"examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","implements":["TextBasedChannel#fetchPinnedMessages"],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","implements":["TextBasedChannel#bulkDelete"],"params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"delete","description":"Deletes the channel","inherits":"Channel#delete","inherited":true,"examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":10,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents a Custom Emoji","props":[{"name":"client","description":"The Client that instantiated this object","type":[[["Client"]]],"meta":{"line":13,"file":"Emoji.js","path":"src/structures"}},{"name":"guild","description":"The Guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":20,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of the Emoji","type":[[["string"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of the Emoji","type":[[["string"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":42,"file":"Emoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":48,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at","readonly":true,"type":[[["number"]]],"meta":{"line":58,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created","readonly":true,"type":[[["Date"]]],"meta":{"line":67,"file":"Emoji.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles this emoji is active for (empty if all), mapped by role ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["Role",">"]]],"meta":{"line":76,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file","readonly":true,"type":[[["string"]]],"meta":{"line":89,"file":"Emoji.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the emoji mention rather than the object.","examples":["// send an emoji:\rconst emoji = guild.emojis.first();\rmsg.reply(`Hello! ${emoji}`);"],"returns":[[["string"]]],"meta":{"line":101,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":7,"file":"Emoji.js","path":"src/structures"}},{"name":"EvaluatedPermissions","description":"The final evaluated permissions for a member in a channel","props":[{"name":"member","description":"The member this permissions refer to","type":[[["GuildMember"]]],"meta":{"line":12,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"raw","description":"A number representing the packed permissions","type":[[["number"]]],"meta":{"line":18,"file":"EvaluatedPermissions.js","path":"src/structures"}}],"methods":[{"name":"serialize","description":"Get an object mapping permission name, e.g. `READ_MESSAGES` to a boolean - whether the user\rcan perform this or not.","returns":[[["Object",".<"],["string",", "],["boolean",">"]]],"meta":{"line":26,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.","params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":40,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks whether the user has all specified permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":52,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"missingPermissions","description":"Checks whether the user has all specified permissions, and lists any missing permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["array"]]],"meta":{"line":62,"file":"EvaluatedPermissions.js","path":"src/structures"}}],"meta":{"line":6,"file":"EvaluatedPermissions.js","path":"src/structures"}},{"name":"GroupDMChannel","description":"Represents a Group DM on Discord","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"name","description":"The name of this Group DM, can be null if one isn't set.","type":[[["string"]]],"meta":{"line":48,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"icon","description":"A hash of the Group DM icon.","type":[[["string"]]],"meta":{"line":54,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this Group DM's owner.","type":[[["string"]]],"meta":{"line":60,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"recipients","description":"A collection of the recipients of this DM, mapped by their ID.","type":[[["Collection",".<"],["string",", "],["User",">"]]],"meta":{"line":67,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"owner","description":"The owner of this Group DM.","readonly":true,"type":[[["User"]]],"meta":{"line":85,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this channel equals another channel. It compares all properties, so for most operations\rit is advisable to just compare `channel.id === channel2.id` as it is much faster and is often\rwhat most users need.","params":[{"name":"channel","description":"The channel to compare to","type":[[["GroupDMChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":96,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Channel's name instead of the Channel object.","examples":["// logs: Hello from My Group DM!\rconsole.log(`Hello from ${channel}!`);","// logs: Hello from My Group DM!\rconsole.log(`Hello from ' + channel + '!');"],"returns":[[["string"]]],"meta":{"line":122,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","implements":["TextBasedChannel#fetchMessage"],"examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","implements":["TextBasedChannel#fetchMessages"],"examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","implements":["TextBasedChannel#fetchPinnedMessages"],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","implements":["TextBasedChannel#bulkDelete"],"params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"delete","description":"Deletes the channel","inherits":"Channel#delete","inherited":true,"examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":33,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"Guild","description":"Represents a Guild (or a Server) on Discord.\r<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\rcheck this with `guild.available`.</info>","props":[{"name":"client","description":"The Client that created the instance of the the Guild.","type":[[["Client"]]],"meta":{"line":22,"file":"Guild.js","path":"src/structures"}},{"name":"members","description":"A Collection of members that are in this Guild. The key is the member's ID, the value is the member.","type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":29,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A Collection of channels that are in this Guild. The key is the channel's ID, the value is the channel.","type":[[["Collection",".<"],["string",", "],["GuildChannel",">"]]],"meta":{"line":35,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A Collection of roles that are in this Guild. The key is the role's ID, the value is the role.","type":[[["Collection",".<"],["string",", "],["Role",">"]]],"meta":{"line":41,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the Guild is available to access. If it is not available, it indicates a server outage.","type":[[["boolean"]]],"meta":{"line":49,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the Guild, useful for comparisons.","type":[[["string"]]],"meta":{"line":55,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":72,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon, or null if there is no icon.","nullable":true,"type":[[["string"]]],"meta":{"line":78,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image, or null if no splash (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":84,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":90,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this Guild as of `READY`","type":[[["number"]]],"meta":{"line":96,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":102,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A collection of presences in this Guild","type":[[["Collection",".<"],["string",", "],["Presence",">"]]],"meta":{"line":108,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features.","type":[[["Array",".<"],["Object",">"]]],"meta":{"line":114,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A Collection of emojis that are in this Guild. The key is the emoji's ID, the value is the emoji.","type":[[["Collection",".<"],["string",", "],["Emoji",">"]]],"meta":{"line":120,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\".","nullable":true,"type":[[["number"]]],"meta":{"line":127,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved.","nullable":true,"type":[[["string"]]],"meta":{"line":133,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild.","type":[[["boolean"]]],"meta":{"line":139,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild.","type":[[["number"]]],"meta":{"line":145,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":151,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner.","type":[[["string"]]],"meta":{"line":167,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":212,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created","readonly":true,"type":[[["Date"]]],"meta":{"line":221,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":230,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"Gets the URL to this guild's icon (if it has one, otherwise it returns null)","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":239,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the Guild","readonly":true,"type":[[["GuildMember"]]],"meta":{"line":249,"file":"Guild.js","path":"src/structures"}},{"name":"voiceConnection","description":"If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection.","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":258,"file":"Guild.js","path":"src/structures"}},{"name":"defaultChannel","description":"The `#general` GuildChannel of the server.","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":267,"file":"Guild.js","path":"src/structures"}}],"methods":[{"name":"setup","description":"Sets up the Guild","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":67,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the User is present in the guild.","examples":["// get the guild member of a user\rconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":279,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetch a Collection of banned users in this Guild.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["User",">>"]]],"meta":{"line":287,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetch a Collection of invites to this Guild. Resolves with a Collection mapping invites by their codes.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Invite",">>"]]],"meta":{"line":295,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetch all webhooks for the guild.","returns":[[["Collection",".<"],["Webhook",">"]]],"meta":{"line":303,"file":"Guild.js","path":"src/structures"}},{"name":"fetchMember","description":"Fetch a single guild member from a user.","params":[{"name":"user","description":"The user to fetch the member for","type":[[["UserResolvable"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":312,"file":"Guild.js","path":"src/structures"}},{"name":"fetchMembers","description":"Fetches all the members in the Guild, even if they are offline. If the Guild has less than 250 members,\rthis should not be necessary.","params":[{"name":"query","description":"An optional query to provide when fetching members","optional":true,"default":"''","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":326,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the Guild with new information - e.g. a new name.","examples":["// set the guild name and region\rguild.edit({\r name: 'Discord Guild',\r region: 'london',\r})\r.then(updated => console.log(`New guild name ${updated.name} in region ${updated.region}`))\r.catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":360,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edit the name of the Guild.","examples":["// edit the guild name\rguild.setName('Discord Guild')\r .then(updated => console.log(`Updated guild name to ${guild.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name of the Guild","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":374,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edit the region of the Guild.","examples":["// edit the guild region\rguild.setRegion('london')\r .then(updated => console.log(`Updated guild region to ${guild.region}`))\r .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild.","type":[[["Region"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":388,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edit the verification level of the Guild.","examples":["// edit the guild verification level\rguild.setVerificationLevel(1)\r .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\r .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["VerificationLevel"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":402,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edit the AFK channel of the Guild.","examples":["// edit the guild AFK channel\rguild.setAFKChannel(channel)\r .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel}`))\r .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["GuildChannelResolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":416,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edit the AFK timeout of the Guild.","examples":["// edit the guild AFK channel\rguild.setAFKTimeout(60)\r .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\r .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":430,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Set a new Guild Icon.","examples":["// edit the guild icon\rguild.setIcon(fs.readFileSync('./icon.png'))\r .then(updated => console.log('Updated the guild icon'))\r .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":444,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the Guild.","examples":["// edit the guild owner\rguild.setOwner(guilds.members[0])\r .then(updated => console.log(`Updated the guild owner to ${updated.owner.username}`))\r .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the Guild","type":[[["GuildMemberResolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":458,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Set a new Guild Splash Logo.","examples":["// edit the guild splash\rguild.setIcon(fs.readFileSync('./splash.png'))\r .then(updated => console.log('Updated the guild splash'))\r .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["Base64Resolvable"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":472,"file":"Guild.js","path":"src/structures"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// ban a user\rguild.ban('123123123123');"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"deleteDays","description":"The amount of days worth of messages from this user that should\ralso be deleted. Between `0` and `7`.","optional":true,"default":0,"type":[[["number"]]]}],"returns":{"types":[[["Promise",".<("],["GuildMember","|"],["User","|"],["string",")>"]]],"description":"Result object will be resolved as specifically as possible.\rIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\rbe resolved, the user ID will be the result."},"meta":{"line":488,"file":"Guild.js","path":"src/structures"}},{"name":"unban","description":"Unbans a user from the Guild.","examples":["// unban a user\rguild.unban('123123123123')\r .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\r .catch(reject);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]}],"returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":502,"file":"Guild.js","path":"src/structures"}},{"name":"pruneMembers","description":"Prunes members from the guild based on how long they have been inactive.","examples":["// see how many members will be pruned\rguild.pruneMembers(12, true)\r  .then(pruned => console.log(`This will prune ${pruned} people!`);\r  .catch(console.error);","// actually prune the members\rguild.pruneMembers(12)\r  .then(pruned => console.log(`I just pruned ${pruned} people!`);\r  .catch(console.error);"],"params":[{"name":"days","description":"Number of days of inactivity required to kick","type":[[["number"]]]},{"name":"dry","description":"If true, will return number of users that will be kicked, without actually doing it","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise",".<"],["number",">"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":522,"file":"Guild.js","path":"src/structures"}},{"name":"sync","description":"Syncs this guild (already done automatically every 30 seconds). Only applicable to user accounts.","meta":{"line":530,"file":"Guild.js","path":"src/structures"}},{"name":"createChannel","description":"Creates a new Channel in the Guild.","examples":["// create a new text channel\rguild.createChannel('new-general', 'text')\r .then(channel => console.log(`Created new channel ${channel}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The name of the new channel","type":[[["string"]]]},{"name":"type","description":"The type of the new channel, either `text` or `voice`","type":[[["string"]]]}],"returns":[[["Promise",".<("],["TextChannel","|"],["VoiceChannel",")>"]]],"meta":{"line":545,"file":"Guild.js","path":"src/structures"}},{"name":"createRole","description":"Creates a new role in the guild, and optionally updates it with the given information.","examples":["// create a new role\rguild.createRole()\r .then(role => console.log(`Created role ${role}`))\r .catch(console.error);","// create a new role with data\rguild.createRole({ name: 'Super Cool People' })\r  .then(role => console.log(`Created role ${role}`))\r  .catch(console.error)"],"params":[{"name":"data","description":"The data to update the role with","optional":true,"type":[[["RoleData"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":564,"file":"Guild.js","path":"src/structures"}},{"name":"createEmoji","description":"Creates a new custom emoji in the guild.","examples":["// create a new emoji from a url\rguild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')\r .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\r .catch(console.error);","// create a new emoji from a file on your computer\rguild.createEmoji('./memes/banana.png', 'banana')\r .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\r .catch(console.error);"],"params":[{"name":"attachment","description":"The image for the emoji.","type":[[["FileResolveable"]]]},{"name":"name","description":"The name for the emoji.","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["Emoji",">"]]],"description":"The created emoji."},"meta":{"line":586,"file":"Guild.js","path":"src/structures"}},{"name":"deleteEmoji","description":"Delete an emoji.","params":[{"name":"emoji","description":"The emoji to delete.","type":[[["Emoji"]],[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":602,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Causes the Client to leave the guild.","examples":["// leave a guild\rguild.leave()\r .then(g => console.log(`Left the guild ${g}`))\r .catch(console.error);"],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":616,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Causes the Client to delete the guild.","examples":["// delete a guild\rguild.delete()\r .then(g => console.log(`Deleted the guild ${g}`))\r .catch(console.error);"],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":629,"file":"Guild.js","path":"src/structures"}},{"name":"setRolePosition","description":"Set the position of a role in this guild","params":[{"name":"role","description":"the role to edit, can be a role object or a role ID.","type":[[["string"]],[["Role"]]]},{"name":"position","description":"the new position of the role","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Guild",">"]]],"meta":{"line":639,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this Guild equals another Guild. It compares all properties, so for most operations\rit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\rwhat most users need.","params":[{"name":"guild","description":"The guild to compare","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":666,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Guild's name instead of the Guild object.","examples":["// logs: Hello from My Guild!\rconsole.log(`Hello from ${guild}!`);","// logs: Hello from My Guild!\rconsole.log(`Hello from ' + guild + '!');"],"returns":[[["string"]]],"meta":{"line":703,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":16,"file":"Guild.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a Guild Channel (i.e. Text Channels and Voice Channels)","extends":["Channel"],"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the Guild Channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list.","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users.","type":[[["Collection",".<"],["string",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":10,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\r* `dm` - a DM channel\r* `group` - a Group DM channel\r* `text` - a guild text channel\r* `voice` - a guild voice channel","type":[[["string"]]],"meta":{"line":21,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["string"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":39,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":48,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a user in this channel, taking into account roles and permission\roverwrites.","params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":57,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","examples":["// overwrite permissions for a message author\rmessage.channel.overwritePermissions(message.author, {\r SEND_MESSAGES: false\r})\r.then(() => console.log('Done!'))\r.catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]}],"returns":[[["Promise"]]],"meta":{"line":125,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the Guild Channel","examples":["// set a new channel name\rchannel.setName('not_general')\r .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":178,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the Guild Channel","examples":["// set a new channel position\rchannel.setPosition(2)\r .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":192,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the Guild Channel","examples":["// set a new channel topic\rchannel.setTopic('needs more rate limiting')\r .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\r .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":206,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this Guild Channel","params":[{"name":"options","description":"The options for the invite","optional":true,"default":"{}","type":[[["InviteOptions"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":223,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\rIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"The channel to compare this channel to","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":233,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Channel's mention instead of the Channel object.","examples":["// Outputs: Hello from #general\rconsole.log(`Hello from ${channel}`);","// Outputs: Hello from #general\rconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes the channel","inherits":"Channel#delete","inherited":true,"examples":["// delete the channel\rchannel.delete()\r .then() // success\r .catch(console.error); // log error"],"returns":[[["Promise",".<"],["Channel",">"]]],"meta":{"line":61,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":13,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a Member of a Guild on Discord","implements":["TextBasedChannel"],"props":[{"name":"client","description":"The client that instantiated this GuildMember","type":[[["Client"]]],"meta":{"line":18,"file":"GuildMember.js","path":"src/structures"}},{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":25,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this guild member instance Represents","type":[[["User"]]],"meta":{"line":31,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","type":[[["boolean"]]],"meta":{"line":42,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","type":[[["boolean"]]],"meta":{"line":48,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","type":[[["boolean"]]],"meta":{"line":54,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","type":[[["boolean"]]],"meta":{"line":60,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceSessionID","description":"The voice session ID of this member, if any","nullable":true,"type":[[["string"]]],"meta":{"line":66,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannelID","description":"The voice channel ID of this member, if any","nullable":true,"type":[[["string"]]],"meta":{"line":72,"file":"GuildMember.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is speaking","type":[[["boolean"]]],"meta":{"line":78,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this Guild Member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":84,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","type":[[["number"]]],"meta":{"line":90,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the member joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":101,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this Guild Member","readonly":true,"type":[[["Presence"]]],"meta":{"line":110,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A list of roles that are applied to this GuildMember, mapped by the role ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["Role",">"]]],"meta":{"line":119,"file":"GuildMember.js","path":"src/structures"}},{"name":"highestRole","description":"The role of the member with the highest position.","readonly":true,"type":[[["Role"]]],"meta":{"line":138,"file":"GuildMember.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is muted in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":147,"file":"GuildMember.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is deafened in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":156,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannel","description":"The voice channel this member is in, if any","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":165,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this User","readonly":true,"type":[[["string"]]],"meta":{"line":174,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for the guild member, taking only roles into account","readonly":true,"type":[[["EvaluatedPermissions"]]],"meta":{"line":183,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether the member is kickable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":201,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether the member is bannable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":214,"file":"GuildMember.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns evaluated permissions for a member in a guild channel.","params":[{"name":"channel","description":"Guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":227,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of the member's roles have a permission.","params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the roles to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":239,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks whether the roles of the member allows them to perform specific actions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":250,"file":"GuildMember.js","path":"src/structures"}},{"name":"missingPermissions","description":"Checks whether the roles of the member allows them to perform specific actions, and lists any missing permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["array"]]],"meta":{"line":261,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edit a Guild Member","params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildmemberEditData"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildMember.js","path":"src/structures"}},{"name":"setMute","description":"Mute/unmute a user","params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":279,"file":"GuildMember.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafen/undeafen a user","params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":288,"file":"GuildMember.js","path":"src/structures"}},{"name":"setVoiceChannel","description":"Moves the Guild Member to the given channel.","params":[{"name":"channel","description":"The channel to move the member to","type":[[["ChannelResolvable"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":297,"file":"GuildMember.js","path":"src/structures"}},{"name":"setRoles","description":"Sets the Roles applied to the member.","params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection",".<"],["string",", "],["Role",">"]],[["Array",".<"],["Role",">"]],[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":306,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRole","description":"Adds a single Role to the member.","params":[{"name":"role","description":"The role or ID of the role to add","type":[[["Role"]],[["string"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":315,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRoles","description":"Adds multiple roles to the member.","params":[{"name":"roles","description":"The roles or role IDs to add","type":[[["Collection",".<"],["string",", "],["Role",">"]],[["Array",".<"],["Role",">"]],[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":324,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRole","description":"Removes a single Role from the member.","params":[{"name":"role","description":"The role or ID of the role to remove","type":[[["Role"]],[["string"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":340,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRoles","description":"Removes multiple roles from the member.","params":[{"name":"roles","description":"The roles or role IDs to remove","type":[[["Collection",".<"],["string",", "],["Role",">"]],[["Array",".<"],["Role",">"]],[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":349,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Set the nickname for the Guild Member","params":[{"name":"nick","description":"The nickname for the Guild Member","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":370,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this Guild Member","returns":[[["Promise",".<"],["DMChannel",">"]]],"meta":{"line":378,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kick this member from the Guild","returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":386,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Ban this Guild Member","examples":["// ban a guild member\rguildMember.ban(7);"],"params":[{"name":"deleteDays","description":"The amount of days worth of messages from this member that should\ralso be deleted. Between `0` and `7`.","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildMember",">"]]],"meta":{"line":399,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the User's mention instead of the Member object.","examples":["// logs: Hello from <@123456789>!\rconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":410,"file":"GuildMember.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":12,"file":"GuildMember.js","path":"src/structures"}},{"name":"Invite","description":"Represents an Invitation to a Guild Channel.\r<warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>","props":[{"name":"client","description":"The client that instantiated the invite","type":[[["Client"]]],"meta":{"line":36,"file":"Invite.js","path":"src/structures"}},{"name":"guild","description":"The Guild the invite is for. If this Guild is already known, this will be a Guild object. If the Guild is\runknown, this will be a Partial Guild.","type":[[["Guild"]],[["PartialGuild"]]],"meta":{"line":48,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":54,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","type":[[["boolean"]]],"meta":{"line":60,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds","nullable":true,"type":[[["number"]]],"meta":{"line":66,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","type":[[["number"]]],"meta":{"line":72,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","type":[[["number"]]],"meta":{"line":78,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","type":[[["User"]]],"meta":{"line":85,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The Channel the invite is for. If this Channel is already known, this will be a GuildChannel object.\rIf the Channel is unknown, this will be a Partial Guild Channel.","type":[[["GuildChannel"]],[["PartialGuildChannel"]]],"meta":{"line":93,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","type":[[["number"]]],"meta":{"line":99,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created","readonly":true,"type":[[["Date"]]],"meta":{"line":107,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"type":[[["number"]]],"meta":{"line":116,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire","readonly":true,"type":[[["Date"]]],"meta":{"line":125,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":134,"file":"Invite.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite","returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":142,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Invite's URL instead of the object.","examples":["// logs: Invite: https://discord.gg/A1b2C3\rconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":153,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":30,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a Message on Discord","props":[{"name":"client","description":"The client that instantiated the Message","type":[[["Client"]]],"meta":{"line":16,"file":"Message.js","path":"src/structures"}},{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]],"meta":{"line":23,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message (unique in the channel it was sent)","type":[[["string"]]],"meta":{"line":33,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["string"]]],"meta":{"line":39,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":45,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","type":[[["User"]]],"meta":{"line":51,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the Author of the message as a Guild Member. Only available if the message comes from a Guild\rwhere the author is still a member.","type":[[["GuildMember"]]],"meta":{"line":58,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":64,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":70,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number used for checking message delivery","type":[[["string"]]],"meta":{"line":76,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":82,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array",".<"],["Embed",">"]]],"meta":{"line":88,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID.","type":[[["Collection",".<"],["string",", "],["MessageAttachment",">"]]],"meta":{"line":94,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":101,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":107,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"An object containing a further users, roles or channels collections","type":[[["Object"]]],"props":[{"name":"mentions.users","description":"Mentioned users, maps their ID to the user object.","type":[[["Collection",".<"],["string",", "],["User",">"]]]},{"name":"mentions.roles","description":"Mentioned roles, maps their ID to the role object.","type":[[["Collection",".<"],["string",", "],["Role",">"]]]},{"name":"mentions.channels","description":"Mentioned channels,\rmaps their ID to the channel object.","type":[[["Collection",".<"],["string",", "],["GuildChannel",">"]]]},{"name":"mentions.everyone","description":"Whether or not @everyone was mentioned.","type":[[["boolean"]]]}],"meta":{"line":118,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent","readonly":true,"type":[[["Date"]]],"meta":{"line":209,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":218,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":227,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text. If mentions cannot be resolved to a name,\rthe relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":237,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version.\rSorted from latest (first) to oldest (last).","readonly":true,"type":[[["Array",".<"],["Message",">"]]],"meta":{"line":275,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":284,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":293,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user.","readonly":true,"type":[[["boolean"]]],"meta":{"line":304,"file":"Message.js","path":"src/structures"}}],"methods":[{"name":"isMentioned","description":"Whether or not a user, channel or role is mentioned in this message.","params":[{"name":"data","description":"either a guild channel, user or a role object, or a string representing\rthe ID of any of these.","type":[[["GuildChannel"]],[["User"]],[["Role"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":315,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edit the content of the message","examples":["// update the content of a message\rmessage.edit('This is my new content!')\r .then(msg => console.log(`Updated the content of a message from ${msg.author}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":330,"file":"Message.js","path":"src/structures"}},{"name":"editCode","description":"Edit the content of the message, with a code block","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"The new content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":340,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":349,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":357,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message","examples":["// delete a message\rmessage.delete()\r .then(msg => console.log(`Deleted message from ${msg.author}`))\r .catch(console.error);"],"params":[{"name":"timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":371,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Reply to the message","examples":["// reply to a message\rmessage.reply('Hey, I'm a reply!')\r .then(msg => console.log(`Sent a reply to ${msg.author}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":392,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\rwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\rmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":413,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Message's content instead of the object.","examples":["// logs: Message: This is a message!\rconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":442,"file":"Message.js","path":"src/structures"}}],"meta":{"line":10,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an Attachment in a Message","props":[{"name":"client","description":"The Client that instantiated this Message.","type":[[["Client"]]],"meta":{"line":10,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"message","description":"The message this attachment is part of.","type":[[["Message"]]],"meta":{"line":17,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["string"]]],"meta":{"line":27,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"filename","description":"The file name of this attachment","type":[[["string"]]],"meta":{"line":33,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"filesize","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":39,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":45,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":51,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":57,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":63,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":4,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages based on a specified filter, then emits them.","extends":["EventEmitter"],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel to collect messages in","type":[[["Channel"]]]},{"name":"filter","description":"The filter function","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Options for the collector","optional":true,"type":[[["CollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel this collector is operating on","type":[[["Channel"]]],"meta":{"line":42,"file":"MessageCollector.js","path":"src/structures"}},{"name":"filter","description":"A function used to filter messages that the collector collects.","type":[[["CollectorFilterFunction"]]],"meta":{"line":48,"file":"MessageCollector.js","path":"src/structures"}},{"name":"options","description":"Options for the collecor.","type":[[["CollectorOptions"]]],"meta":{"line":54,"file":"MessageCollector.js","path":"src/structures"}},{"name":"ended","description":"Whether this collector has stopped collecting Messages.","type":[[["boolean"]]],"meta":{"line":60,"file":"MessageCollector.js","path":"src/structures"}},{"name":"collected","description":"A collection of collected messages, mapped by message ID.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":66,"file":"MessageCollector.js","path":"src/structures"}},{"name":"next","description":"Returns a promise that resolves when a valid message is sent. Rejects\rwith collected messages if the Collector ends before receiving a message.","readonly":true,"type":[[["Promise",".<"],["Message",">"]]],"meta":{"line":103,"file":"MessageCollector.js","path":"src/structures"}}],"methods":[{"name":"verify","description":"Verifies a message against the filter and options","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":79,"file":"MessageCollector.js","path":"src/structures"}},{"name":"stop","description":"Stops the collector and emits `end`.","params":[{"name":"reason","description":"An optional reason for stopping the collector","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":134,"file":"MessageCollector.js","path":"src/structures"}}],"events":[{"name":"message","description":"Emitted whenever the Collector receives a Message that passes the filter test.","params":[{"name":"message","description":"The received message","type":[[["Message"]]]},{"name":"collector","description":"The collector the message passed through","type":[[["MessageCollector"]]]}],"meta":{"line":83,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the Collector stops collecting.","params":[{"name":"collection","description":"A collection of messages collected\rduring the lifetime of the Collector, mapped by the ID of the Messages.","type":[[["Collection",".<"],["string",", "],["Message",">"]]]},{"name":"reason","description":"The reason for the end of the collector. If it ended because it reached the specified time\rlimit, this would be `time`. If you invoke `.stop()` without specifying a reason, this would be `user`. If it\rended because it reached its message limit, it will be `limit`.","type":[[["string"]]]}],"meta":{"line":138,"file":"MessageCollector.js","path":"src/structures"}}],"meta":{"line":8,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in an image - e.g. preview of image","props":[{"name":"client","description":"The client that instantiated this embed","type":[[["Client"]]],"meta":{"line":10,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"message","description":"The message this embed is part of","type":[[["Message"]]],"meta":{"line":17,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed, if there is one","nullable":true,"type":[[["string"]]],"meta":{"line":27,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"type","description":"The type of this embed","type":[[["string"]]],"meta":{"line":33,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed, if there is one","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","type":[[["string"]]],"meta":{"line":45,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed, if there is one","type":[[["MessageEmbedThumbnail"]]],"meta":{"line":51,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed, if there is one","type":[[["MessageEmbedAuthor"]]],"meta":{"line":57,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed, if there is one","type":[[["MessageEmbedProvider"]]],"meta":{"line":63,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":4,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedThumbnail","description":"Represents a thumbnail for a Message embed","props":[{"name":"embed","description":"The embed this thumbnail is part of","type":[[["MessageEmbed"]]],"meta":{"line":76,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL for this thumbnail","type":[[["string"]]],"meta":{"line":86,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL for this thumbnail","type":[[["string"]]],"meta":{"line":92,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"height","description":"The height of the thumbnail","type":[[["number"]]],"meta":{"line":98,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"width","description":"The width of the thumbnail","type":[[["number"]]],"meta":{"line":104,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":70,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedProvider","description":"Represents a Provider for a Message embed","props":[{"name":"embed","description":"The embed this provider is part of","type":[[["MessageEmbed"]]],"meta":{"line":117,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this provider","type":[[["string"]]],"meta":{"line":127,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this provider","type":[[["string"]]],"meta":{"line":133,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":111,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedAuthor","description":"Represents a Author for a Message embed","props":[{"name":"embed","description":"The embed this author is part of","type":[[["MessageEmbed"]]],"meta":{"line":146,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this author","type":[[["string"]]],"meta":{"line":156,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this author","type":[[["string"]]],"meta":{"line":162,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":140,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"PartialGuild","description":"Represents a Guild that the client only has limited information for - e.g. from invites.","props":[{"name":"client","description":"The client that instantiated this PartialGuild","type":[[["Client"]]],"meta":{"line":17,"file":"PartialGuild.js","path":"src/structures"}},{"name":"id","description":"The ID of this guild","type":[[["string"]]],"meta":{"line":28,"file":"PartialGuild.js","path":"src/structures"}},{"name":"name","description":"The name of this guild","type":[[["string"]]],"meta":{"line":34,"file":"PartialGuild.js","path":"src/structures"}},{"name":"icon","description":"The hash of this guild's icon, or null if there is none.","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"PartialGuild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image, or null if no splash (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":46,"file":"PartialGuild.js","path":"src/structures"}}],"meta":{"line":11,"file":"PartialGuild.js","path":"src/structures"}},{"name":"PartialGuildChannel","description":"Represents a Guild Channel that the client only has limited information for - e.g. from invites.","props":[{"name":"client","description":"The client that instantiated this PartialGuildChannel","type":[[["Client"]]],"meta":{"line":16,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"id","description":"The ID of this Guild Channel","type":[[["string"]]],"meta":{"line":27,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of this Guild Channel","type":[[["string"]]],"meta":{"line":33,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of this Guild Channel - `text` or `voice`","type":[[["string"]]],"meta":{"line":39,"file":"PartialGuildChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a Role or Member in a Guild Channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","type":[[["GuildChannel"]]],"meta":{"line":10,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a User ID or a Role ID","type":[[["string"]]],"meta":{"line":20,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["string"]]],"meta":{"line":26,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Delete this Permission Overwrite.","returns":[[["Promise",".<"],["PermissionOverwrites",">"]]],"meta":{"line":36,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":4,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a User's presence","props":[{"name":"status","description":"The status of the presence:\r\r* **`online`** - user is online\r* **`offline`** - user is offline or invisible\r* **`idle`** - user is AFK\r* **`dnd`** - user is in Do not Disturb","type":[[["string"]]],"meta":{"line":18,"file":"Presence.js","path":"src/structures"}},{"name":"game","description":"The game that the user is playing, `null` if they aren't playing a game.","nullable":true,"type":[[["Game"]]],"meta":{"line":24,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another","params":[{"name":"other","description":"the presence to compare","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":4,"file":"Presence.js","path":"src/structures"}},{"name":"Game","description":"Represents a Game that is part of a User's presence.","props":[{"name":"name","description":"The name of the game being played","type":[[["string"]]],"meta":{"line":55,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the game status","type":[[["number"]]],"meta":{"line":61,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the game is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":67,"file":"Presence.js","path":"src/structures"}},{"name":"streaming","description":"Whether or not the game is being streamed","readonly":true,"type":[[["boolean"]]],"meta":{"line":75,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this game is equal to another game","params":[{"name":"other","description":"the other game to compare","type":[[["Game"]]]}],"returns":[[["boolean"]]],"meta":{"line":84,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":49,"file":"Presence.js","path":"src/structures"}},{"name":"Role","description":"Represents a Role on Discord","props":[{"name":"client","description":"The client that instantiated the role","type":[[["Client"]]],"meta":{"line":12,"file":"Role.js","path":"src/structures"}},{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":19,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["string"]]],"meta":{"line":29,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":35,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":41,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":47,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role in the role manager","type":[[["number"]]],"meta":{"line":53,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The evaluated permissions number","type":[[["number"]]],"meta":{"line":59,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":65,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":71,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":79,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created","readonly":true,"type":[[["Date"]]],"meta":{"line":88,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag.","readonly":true,"type":[[["string"]]],"meta":{"line":97,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role.","readonly":true,"type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":108,"file":"Role.js","path":"src/structures"}}],"methods":[{"name":"serialize","description":"Get an object mapping permission names to whether or not the role enables that permission","examples":["// print the serialized role\rconsole.log(role.serialize());"],"returns":[[["Object",".<"],["string",", "],["boolean",">"]]],"meta":{"line":119,"file":"Role.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if the role has a permission.","examples":["// see if a role can ban a member\rif (role.hasPermission('BAN_MEMBERS')) {\r  console.log('This role can ban members');\r} else {\r  console.log('This role can\\'t ban members');\r}"],"params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":140,"file":"Role.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks if the role has all specified permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["Array",".<"],["PermissionResolvable",">"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":152,"file":"Role.js","path":"src/structures"}},{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the this role's position is lower (other role's is higher),\rpositive number if the this one is higher (other's is lower), 0 if equal"},"meta":{"line":162,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role","examples":["// edit a role\rrole.edit({name: 'new role'})\r .then(r => console.log(`Edited role ${r}`))\r .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":176,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the role","examples":["// set the name of the role\rrole.setName('new role')\r .then(r => console.log(`Edited name of role ${r}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":190,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Set a new color for the role","examples":["// set the color of a role\rrole.setColor('#FF0000')\r .then(r => console.log(`Set color of role ${r}`))\r .catch(console.error);"],"params":[{"name":"color","description":"The new color for the role, either a hex string or a base 10 number","type":[[["number"]],[["string"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":204,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Set whether or not the role should be hoisted","examples":["// set the hoist of the role\rrole.setHoist(true)\r .then(r => console.log(`Role hoisted: ${r.hoist}`))\r .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":218,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Set the position of the role","examples":["// set the position of the role\rrole.setPosition(1)\r .then(r => console.log(`Role position: ${r.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":232,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Set the permissions of the role","examples":["// set the permissions of the role\rrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\r .then(r => console.log(`Role updated ${r}`))\r .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":246,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Set whether this role is mentionable","examples":["// make the role mentionable\rrole.setMentionable(true)\r .then(r => console.log(`Role updated ${r}`))\r .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]}],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":260,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role","examples":["// delete a role\rrole.delete()\r .then(r => console.log(`Deleted role ${r}`))\r .catch(console.error);"],"returns":[[["Promise",".<"],["Role",">"]]],"meta":{"line":273,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\rit is advisable to just compare `role.id === role2.id` as it is much faster and is often\rwhat most users need.","params":[{"name":"role","description":"The role to compare to","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":284,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the Role mention rather than the Role object.","returns":[[["string"]]],"meta":{"line":299,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\rpositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":310,"file":"Role.js","path":"src/structures"}}],"meta":{"line":6,"file":"Role.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a Server Text Channel on Discord.","extends":["GuildChannel"],"implements":["TextBasedChannel"],"props":[{"name":"topic","description":"The topic of the Text Channel, if there is one.","nullable":true,"type":[[["string"]]],"meta":{"line":25,"file":"TextChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID.","readonly":true,"type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":35,"file":"TextChannel.js","path":"src/structures"}},{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the Guild Channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list.","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users.","type":[[["Collection",".<"],["string",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"fetchWebhooks","description":"Fetch all webhooks for the channel.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Webhook",">>"]]],"meta":{"line":49,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Create a webhook for the channel.","examples":["channel.createWebhook('Snek', 'http://snek.s3.amazonaws.com/topSnek.png')\r .then(webhook => console.log(`Created Webhook ${webhook}`))\r .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook.","type":[[["string"]]]},{"name":"avatar","description":"The avatar for the webhook.","type":[[["FileResolvable"]]]}],"returns":{"types":[[["Promise",".<"],["Webhook",">"]]],"description":"webhook The created webhook."},"meta":{"line":63,"file":"TextChannel.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","implements":["TextBasedChannel#fetchMessage"],"examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","implements":["TextBasedChannel#fetchMessages"],"examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","implements":["TextBasedChannel#fetchPinnedMessages"],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","implements":["TextBasedChannel#bulkDelete"],"params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a user in this channel, taking into account roles and permission\roverwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":57,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// overwrite permissions for a message author\rmessage.channel.overwritePermissions(message.author, {\r SEND_MESSAGES: false\r})\r.then(() => console.log('Done!'))\r.catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]}],"returns":[[["Promise"]]],"meta":{"line":125,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the Guild Channel","inherits":"GuildChannel#setName","inherited":true,"examples":["// set a new channel name\rchannel.setName('not_general')\r .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":178,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the Guild Channel","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// set a new channel position\rchannel.setPosition(2)\r .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":192,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the Guild Channel","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// set a new channel topic\rchannel.setTopic('needs more rate limiting')\r .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\r .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":206,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this Guild Channel","inherits":"GuildChannel#createInvite","inherited":true,"params":[{"name":"options","description":"The options for the invite","optional":true,"default":"{}","type":[[["InviteOptions"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":223,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\rIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"The channel to compare this channel to","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":233,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Outputs: Hello from #general\rconsole.log(`Hello from ${channel}`);","// Outputs: Hello from #general\rconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a User on Discord.","implements":["TextBasedChannel"],"props":[{"name":"client","description":"The Client that created the instance of the the User.","type":[[["Client"]]],"meta":{"line":15,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the User","type":[[["string"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the User","type":[[["string"]]],"meta":{"line":32,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the User","type":[[["string"]]],"meta":{"line":38,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","type":[[["string"]]],"meta":{"line":44,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the User is a Bot.","type":[[["boolean"]]],"meta":{"line":50,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":64,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created","readonly":true,"type":[[["Date"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":82,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar (if they have one, otherwise null)","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":95,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"typingIn","description":"Check whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Get the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":115,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":125,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM Channel (if one exists) between the Client and the User. Resolves with the Channel if successful.","returns":[[["Promise",".<"],["DMChannel",">"]]],"meta":{"line":134,"file":"User.js","path":"src/structures"}},{"name":"addFriend","description":"Sends a friend request to the user","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":142,"file":"User.js","path":"src/structures"}},{"name":"removeFriend","description":"Removes the user from your friends","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":150,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Blocks the user","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":158,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblocks the user","returns":[[["Promise",".<"],["User",">"]]],"meta":{"line":166,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Get the profile of the user","returns":[[["Promise",".<"],["UserProfile",">"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares username, ID, discriminator, status and the game being played.\rIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"The user to compare","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":184,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the User's mention instead of the User object.","examples":["// logs: Hello from <@123456789>!\rconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":202,"file":"User.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message to this channel","implements":["TextBasedChannel#sendMessage"],"examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","implements":["TextBasedChannel#sendTTSMessage"],"examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","implements":["TextBasedChannel#sendFile"],"params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","implements":["TextBasedChannel#sendCode"],"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":9,"file":"User.js","path":"src/structures"}},{"name":"UserConnection","description":"Represents a User Connection object (or \"platform identity\")","props":[{"name":"user","description":"The user that owns the Connection","type":[[["User"]]],"meta":{"line":10,"file":"UserConnection.js","path":"src/structures"}},{"name":"type","description":"The type of the Connection","type":[[["string"]]],"meta":{"line":20,"file":"UserConnection.js","path":"src/structures"}},{"name":"name","description":"The username of the connection account","type":[[["string"]]],"meta":{"line":26,"file":"UserConnection.js","path":"src/structures"}},{"name":"id","description":"The id of the connection account","type":[[["string"]]],"meta":{"line":32,"file":"UserConnection.js","path":"src/structures"}},{"name":"revoked","description":"Whether the connection is revoked","type":[[["Boolean"]]],"meta":{"line":38,"file":"UserConnection.js","path":"src/structures"}},{"name":"integrations","description":"an array of partial server integrations (not yet implemented in this lib)","type":[[["Array",".<"],["Object",">"]]],"meta":{"line":44,"file":"UserConnection.js","path":"src/structures"}}],"meta":{"line":4,"file":"UserConnection.js","path":"src/structures"}},{"name":"UserProfile","description":"Represents a user's profile on Discord.","props":[{"name":"user","description":"The owner of the profile","type":[[["User"]]],"meta":{"line":13,"file":"UserProfile.js","path":"src/structures"}},{"name":"client","description":"The Client that created the instance of the the User.","type":[[["Client"]]],"meta":{"line":19,"file":"UserProfile.js","path":"src/structures"}},{"name":"mutualGuilds","description":"Guilds that the ClientUser and the User share","type":[[["Collection",".<"],["Guild",">"]]],"meta":{"line":26,"file":"UserProfile.js","path":"src/structures"}},{"name":"connections","description":"The user's connections","type":[[["Collection",".<"],["UserConnection",">"]]],"meta":{"line":32,"file":"UserProfile.js","path":"src/structures"}}],"meta":{"line":7,"file":"UserProfile.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a Server Voice Channel on Discord.","extends":["GuildChannel"],"props":[{"name":"members","description":"The members in this Voice Channel.","type":[[["Collection",".<"],["string",", "],["GuildMember",">"]]],"meta":{"line":16,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":28,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":34,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"connection","description":"The voice connection for this voice channel, if the client is connected","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":42,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Checks if the client has permission join the voice channel","type":[[["boolean"]]],"meta":{"line":52,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","type":[[["boolean"]]],"meta":{"line":60,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the Guild Channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list.","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users.","type":[[["Collection",".<"],["string",", "],["PermissionOverwrites",">"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel","examples":["// set the bitrate of a voice channel\rvoiceChannel.setBitrate(48000)\r .then(vc => console.log(`Set bitrate to ${vc.bitrate} for ${vc.name}`))\r .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]}],"returns":[[["Promise",".<"],["VoiceChannel",">"]]],"meta":{"line":74,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this Voice Channel","examples":["// join a voice channel\rvoiceChannel.join()\r .then(connection => console.log('Connected!'))\r .catch(console.error);"],"returns":[[["Promise",".<"],["VoiceConnection",">"]]],"meta":{"line":87,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel","examples":["// leave a voice channel\rvoiceChannel.leave();"],"meta":{"line":97,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a user in this channel, taking into account roles and permission\roverwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["EvaluatedPermissions"]]],"nullable":true},"meta":{"line":57,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// overwrite permissions for a message author\rmessage.channel.overwritePermissions(message.author, {\r SEND_MESSAGES: false\r})\r.then(() => console.log('Done!'))\r.catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]}],"returns":[[["Promise"]]],"meta":{"line":125,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the Guild Channel","inherits":"GuildChannel#setName","inherited":true,"examples":["// set a new channel name\rchannel.setName('not_general')\r .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\r .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":178,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the Guild Channel","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// set a new channel position\rchannel.setPosition(2)\r .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\r .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":192,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the Guild Channel","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// set a new channel topic\rchannel.setTopic('needs more rate limiting')\r .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\r .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]}],"returns":[[["Promise",".<"],["GuildChannel",">"]]],"meta":{"line":206,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this Guild Channel","inherits":"GuildChannel#createInvite","inherited":true,"params":[{"name":"options","description":"The options for the invite","optional":true,"default":"{}","type":[[["InviteOptions"]]]}],"returns":[[["Promise",".<"],["Invite",">"]]],"meta":{"line":223,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\rIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"The channel to compare this channel to","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":233,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Outputs: Hello from #general\rconsole.log(`Hello from ${channel}`);","// Outputs: Hello from #general\rconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":264,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":8,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a Webhook","props":[{"name":"client","description":"The client that instantiated the Channel","type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the Webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the Webhook","type":[[["string"]]],"meta":{"line":35,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the Webhook","type":[[["string"]]],"meta":{"line":41,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the Webhook","type":[[["string"]]],"meta":{"line":47,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the Webhook belongs to","type":[[["string"]]],"meta":{"line":53,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the Webhook belongs to","type":[[["string"]]],"meta":{"line":59,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"sendMessage","description":"Send a message with this webhook","examples":["// send a message\rwebhook.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send.","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide.","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":87,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Send a raw slack message with this webhook","examples":["// send a slack message\rwebhook.sendSlackMessage({\r  'username': 'Wumpus',\r  'attachments': [{\r    'pretext': 'this looks pretty cool',\r    'color': '#F0F',\r    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\r    'footer': 'Powered by sneks',\r    'ts': new Date().getTime() / 1000\r  }]\r}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send.","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":108,"file":"Webhook.js","path":"src/structures"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message with this webhook","examples":["// send a TTS message\rwebhook.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":123,"file":"Webhook.js","path":"src/structures"}},{"name":"sendFile","description":"Send a file with this webhook","params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":136,"file":"Webhook.js","path":"src/structures"}},{"name":"sendCode","description":"Send a code block with this webhook","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":163,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edit the Webhook.","params":[{"name":"name","description":"The new name for the Webhook","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the Webhook.","type":[[["FileResolvable"]]]}],"returns":[[["Promise",".<"],["Webhook",">"]]],"meta":{"line":179,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Delete the Webhook","returns":[[["Promise"]]],"meta":{"line":200,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":7,"file":"Webhook.js","path":"src/structures"}},{"name":"Collection","description":"A utility class to help make it easier to access the data stores","extends":["Map"],"methods":[{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you add/remove elements on the array.","examples":["// identical to:\rArray.from(collection.values());"],"returns":[[["Array"]]],"meta":{"line":32,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\rreconstructed if an item is added to or removed from the collection, or if you add/remove elements on the array.","examples":["// identical to:\rArray.from(collection.keys());"],"returns":[[["Array"]]],"meta":{"line":45,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Returns the first item in this collection.","returns":[["*"]],"meta":{"line":54,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Returns the first key in this collection.","returns":[["*"]],"meta":{"line":62,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Returns the last item in this collection. This is a relatively slow operation,\rsince an array copy of the values must be made to find the last element.","returns":[["*"]],"meta":{"line":71,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Returns the last key in this collection. This is a relatively slow operation,\rsince an array copy of the keys must be made to find the last element.","returns":[["*"]],"meta":{"line":81,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Returns a random item from this collection. This is a relatively slow operation,\rsince an array copy of the values must be made to find a random element.","returns":[["*"]],"meta":{"line":91,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Returns a random key from this collection. This is a relatively slow operation,\rsince an array copy of the keys must be made to find a random element.","returns":[["*"]],"meta":{"line":101,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Returns an array of items where `item[prop] === value` of the collection","examples":["collection.findAll('username', 'Bob');"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["array"]]],"meta":{"line":114,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Returns a single item where `item[prop] === value`, or the given function returns `true`.\rIn the latter case, this is identical to\r[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).","examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":136,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Returns the key of the item where `item[prop] === value`, or the given function returns `true`.\rIn the latter case, this is identical to\r[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":167,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Returns true if the collection has an item where `item[prop] === value`","examples":["if (collection.exists('username', 'Bob')) {\r console.log('user here!');\r}"],"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":194,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\r[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\rbut returns a Collection instead of an Array.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":206,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\r[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":222,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\r[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["array"]]],"meta":{"line":238,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\r[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":253,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\r[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":268,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\r[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","params":[{"name":"fn","description":"Function used to reduce","type":[[["function"]]]},{"name":"startVal","description":"The starting value","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":283,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":295,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"If the items in this collection have a delete method (e.g. messages), invoke\rthe delete method. Returns an array of promises","returns":[[["Array",".<"],["Promise",">"]]],"meta":{"line":309,"file":"Collection.js","path":"src/util"}}],"meta":{"line":5,"file":"Collection.js","path":"src/util"}}],"interfaces":[{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features","props":[{"name":"messages","description":"A Collection containing the messages sent to this channel.","type":[[["Collection",".<"],["string",", "],["Message",">"]]],"meta":{"line":17,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent.","nullable":true,"type":[[["string"]]],"meta":{"line":23,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel.","readonly":true,"type":[[["boolean"]]],"meta":{"line":248,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"typingCount","description":"Number of times `startTyping` has been called.","readonly":true,"type":[[["number"]]],"meta":{"line":257,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"methods":[{"name":"sendMessage","description":"Send a message to this channel","examples":["// send a message\rchannel.sendMessage('hello!')\r .then(message => console.log(`Sent message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":57,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendTTSMessage","description":"Send a text-to-speech message to this channel","examples":["// send a TTS message\rchannel.sendTTSMessage('hello!')\r .then(message => console.log(`Sent tts message: ${message.content}`))\r .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":72,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendFile","description":"Send a file to this channel","params":[{"name":"attachment","description":"The file to send","type":[[["FileResolvable"]]]},{"name":"fileName","description":"The name and extension of the file","optional":true,"default":"\"file.jpg\"","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":85,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"sendCode","description":"Send a code block to this channel","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":112,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.\r<warn>Only OAuth bot accounts can use this method.</warn>","examples":["// get message\rchannel.fetchMessage('99539446449315840')\r  .then(message => console.log(message.content))\r  .catch(console.error);"],"params":[{"name":"messageID","description":"The ID of the message to get","type":[[["string"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":133,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a Collection mapping message ID's to Message objects.","examples":["// get messages\rchannel.fetchMessages({limit: 10})\r .then(messages => console.log(`Received ${messages.size} messages`))\r .catch(console.error);"],"params":[{"name":"options","description":"The query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":165,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this Channel and returns a Collection of them.","returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":183,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// start typing in a channel\rchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":204,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\rThe indicator will only stop if this is called as many times as startTyping().\r<info>It can take a few seconds for the Client User to stop typing.</info>","examples":["// stop typing in a channel\rchannel.stopTyping();","// force typing to fully stop in a channel\rchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"createCollector","description":"Creates a Message Collector","examples":["// create a message collector\rconst collector = channel.createCollector(\r m => m.content.includes('discord'),\r { time: 15000 }\r);\rcollector.on('message', m => console.log(`Collected ${m.content}`));\rcollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["CollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":276,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"awaitMessages","description":"Similar to createCollector but in Promise form. Resolves with a Collection of messages that pass the specified\rfilter.","examples":["// await !vote messages\rconst filter = m => m.content.startsWith('!vote');\r// errors: ['time'] treats ending because of the time limit as an error\rchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\r .then(collected => console.log(collected.size))\r .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilterFunction"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"meta":{"line":300,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"bulkDelete","description":"Bulk delete given messages.\rOnly OAuth Bot accounts may use this method.","params":[{"name":"messages","description":"Messages to delete, or number of messages to delete","type":[[["Collection",".<"],["string",", "],["Message",">"]],[["Array",".<"],["Message",">"]],[["number"]]]}],"returns":{"types":[[["Promise",".<"],["Collection",".<"],["string",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":319,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"meta":{"line":11,"file":"TextBasedChannel.js","path":"src/structures/interface"}}],"typedefs":[{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\r* A User object\r* A User ID\r* A Message (resolves to the message author)\r* A Guild (owner of the guild)\r* A Guild Member","type":[[["User"]],[["string"]],[["Message"]],[["Guild"]],[["GuildMember"]]],"meta":{"line":25,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\r* A Guild object","type":[[["Guild"]]],"meta":{"line":62,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"GuildMemberResolvable","description":"Data that resolves to give a GuildMember object. This can be:\r* A GuildMember object\r* A User object","type":[[["Guild"]]],"meta":{"line":79,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel. This can be:\r* An instance of a Channel\r* An instance of a Message (the channel the message was sent in)\r* An instance of a Guild (the #general channel)\r* An ID of a Channel","type":[[["Channel"]],[["Guild"]],[["Message"]],[["string"]]],"meta":{"line":102,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\r* An invite code\r* An invite URL","type":[[["string"]]],"meta":{"line":124,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\r* A string\r* A permission number\r\rPossible strings:\r```js\r[\r  \"CREATE_INSTANT_INVITE\",\r  \"KICK_MEMBERS\",\r  \"BAN_MEMBERS\",\r  \"ADMINISTRATOR\",\r  \"MANAGE_CHANNELS\",\r  \"MANAGE_GUILD\",\r  \"READ_MESSAGES\",\r  \"SEND_MESSAGES\",\r  \"SEND_TTS_MESSAGES\",\r  \"MANAGE_MESSAGES\",\r  \"EMBED_LINKS\",\r  \"ATTACH_FILES\",\r  \"READ_MESSAGE_HISTORY\",\r  \"MENTION_EVERYONE\",\r  \"EXTERNAL_EMOJIS\", // use external emojis\r  \"CONNECT\", // connect to voice\r  \"SPEAK\", // speak on voice\r  \"MUTE_MEMBERS\", // globally mute members on voice\r  \"DEAFEN_MEMBERS\", // globally deafen members on voice\r  \"MOVE_MEMBERS\", // move member's voice channels\r  \"USE_VAD\", // use voice activity detection\r  \"CHANGE_NICKNAME\",\r  \"MANAGE_NICKNAMES\", // change nicknames of others\r  \"MANAGE_ROLES_OR_PERMISSIONS\"\r]\r```","type":[[["string"]],[["number"]]],"meta":{"line":144,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\r* A string\r* An Array (joined with a new line delimiter to give a string)\r* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":192,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\r* A Buffer\r* A Base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":211,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"FileResolvable","description":"Data that can be resolved to give a Buffer. This can be:\r* A Buffer\r* The path to a local file\r* A URL","type":[[["string"]],[["Buffer"]]],"meta":{"line":228,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"seek","description":"The time to seek to","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at","optional":true,"default":1,"type":[[["number"]]]},{"name":"passes","description":"How many times to send the voice packet to reduce packet loss","optional":true,"default":1,"type":[[["number"]]]}],"meta":{"line":202,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"PermissionOverwriteOptions","description":"An object mapping permission flags to `true` (enabled) or `false` (disabled)\r```js\r{\r 'SEND_MESSAGES': true,\r 'ATTACH_FILES': false,\r}\r```","type":[[["Object"]]],"meta":{"line":101,"file":"GuildChannel.js","path":"src/structures"}},{"name":"InviteOptions","description":"Options given when creating a Guild Channel Invite","type":[[["Object"]]],"props":[{"name":"temporary","description":"Whether the invite should kick users after 24hrs if they are not given a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"maxAge","description":"Time in seconds the invite expires in","optional":true,"default":0,"type":[[["number"]]]},{"name":"maxUses","description":"Maximum amount of uses for this invite","optional":true,"default":0,"type":[[["maxUses"]]]}],"meta":{"line":210,"file":"GuildChannel.js","path":"src/structures"}},{"name":"MessageOptions","description":"Options that can be passed into sendMessage, sendTTSMessage, sendFile, sendCode, or Message.reply","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\rshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\rit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":26,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"SplitOptions","description":"Options for splitting a message","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":1950,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":37,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\r`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["string"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["string"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["string"]]]}],"meta":{"line":145,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["CollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array",".<"],["string",">"]]]}],"meta":{"line":280,"file":"TextBasedChannel.js","path":"src/structures/interface"}},{"name":"CollectorFilterFunction","description":"A function that takes a Message object and a MessageCollector and returns a boolean.\r```js\rfunction(message, collector) {\r if (message.content.includes('discord')) {\r   return true; // passed the filter test\r }\r return false; // failed the filter test\r}\r```","type":[[["function"]]],"meta":{"line":9,"file":"MessageCollector.js","path":"src/structures"}},{"name":"CollectorOptions","description":"An object containing options used to configure a MessageCollector. All properties are optional.","type":[[["Object"]]],"props":[{"name":"time","description":"Duration for the collector in milliseconds","optional":true,"type":[[["number"]]]},{"name":"max","description":"Maximum number of messages to handle","optional":true,"type":[[["number"]]]},{"name":"maxMatches","description":"Maximum number of successfully filtered messages to obtain","optional":true,"type":[[["number"]]]}],"meta":{"line":22,"file":"MessageCollector.js","path":"src/structures"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into sendMessage, sendTTSMessage, sendFile, sendCode","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\rshould be replaced with plain-text","optional":true,"default":"this.options.disableEveryone","type":[[["boolean"]]]}],"meta":{"line":68,"file":"Webhook.js","path":"src/structures"}},{"name":"ClientOptions","description":"Options for a Client.","type":[[["Object"]]],"props":[{"name":"apiRequestMethod","description":"'sequential' or 'burst'. Sequential executes all requests in\rthe order they are triggered, whereas burst runs multiple at a time, and doesn't guarantee a particular order.","optional":true,"default":"'sequential'","type":[[["string"]]]},{"name":"shardId","description":"The ID of this shard","optional":true,"default":0,"type":[[["number"]]]},{"name":"shardCount","description":"The number of shards","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel","optional":true,"default":200,"type":[[["number"]]]},{"name":"sync","description":"Whether to periodically sync guilds\r(-1 for unlimited - don't do this without message sweeping, otherwise memory usage will climb indefinitely)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"messageCacheLifetime","description":"How long until a message should be uncached by the message sweeping\r(in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\rthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\rupon joining a guild","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Default value for MessageOptions.disableEveryone","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\rcorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\rprocessed. Disabling useless events such as 'TYPING_START' can result in significant performance increases on\rlarge-scale bots.","optional":true,"type":[[["Array",".<"],["string",">"]]]},{"name":"ws","description":"Options for the websocket","optional":true,"type":[[["WebsocketOptions"]]]}],"meta":{"line":3,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"Websocket options. These are left as snake_case to match the API.","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":40,"file":"Constants.js","path":"src/util"}}],"externals":[]},
  // discord.js/stable.json
  {"meta":{"generator":"0.8.0","format":19,"date":1559161954617},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"https://discord.js.org/static/logo.svg\" width=\"546\" alt=\"discord.js\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\nWelcome to the discord.js v11.5 documentation.\nThe v11.5 release contains bugfixes from v11.4 and backports features from the in-development v12.\n\nv12 is still very much a work-in-progress, as we're aiming to make it the best it can possibly be before releasing.\nIf you are fond of living life on the bleeding-edge, check out the master branch.\n\n## About\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to interact with the\n[Discord API](https://discordapp.com/developers/docs/intro) very easily.\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n**Node.js 6.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install discord.js`  \nWith voice support ([node-opus](https://www.npmjs.com/package/node-opus)): `npm install discord.js node-opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discord.js opusscript`\n\n### Audio engines\nThe preferred audio engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n- [bufferutil](https://www.npmjs.com/package/bufferutil) to greatly speed up the WebSocket when *not* using uws (`npm install bufferutil`)\n- [erlpack](https://github.com/hammerandchisel/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install hammerandchisel/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n    - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n    - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [uws](https://www.npmjs.com/package/@discordjs/uws) for a much faster WebSocket connection (`npm install @discordjs/uws`)\n\n## Example usage\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n* [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n* [Documentation](https://discord.js.org/#/docs)\n* [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide))\n* [Discord.js Discord server](https://discord.gg/bRCvFy9)\n* [Discord API Discord server](https://discord.gg/discord-api)\n* [GitHub](https://github.com/discordjs/discord.js)\n* [NPM](https://www.npmjs.com/package/discord.js)\n* [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n* [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## Contributing\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Discord.js Server](https://discord.gg/bRCvFy9).\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# Version 11.5.0\nv11.5.0 backports new features from the in-development v12, and fixes bugs in the v11.4.x releases.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.5.0) for a full list of changes, including information about deprecations.\n\n# Version 11.4.0\nv11.4.0 backports many new features such as Rich Presence and bugfixes from v11.3.0.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.4.0) for a full list of changes, including information about deprecations.\n\n# Version 11.3.0\nv11.3.0 backports many new features and bug fixes from the in-development v12.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.3.0) for a full list of changes, including information about deprecations.\n\n# Version 11.2.0\nv11.2.0 fixes a lot of bugs we encountered along the 11.1.0 release, as well as support for new features such as Message Attachments and UserGuildSettings.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.2.0) for a full list of changes, including information about deprecations.\n\n# Version 11.1.0\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n* Message Reactions and Embeds (rich text)\n* Support for uws and erlpack for better performance\n* OAuthApplication support\n* Web distributions\n\n## Breaking changes\n### Client.login() no longer supports logging in with email + password\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60\n});\n```\n\nv10 code example:\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60\n});\n```\n\n## Presences\nPresences have been completely restructured.\nPrevious versions of discord.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 discord.js code may look something like this:\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\nMany events have been renamed or had their arguments change.\n\n### Client events\n|    Version   9                                       |    Version   10                               |\n|------------------------------------------------------|-----------------------------------------------|\n|    guildMemberAdd(guild, member)                     |    guildMemberAdd(member)                     |\n|    guildMemberAvailable(guild, member)               |    guildMemberAvailable(member)               |\n|    guildMemberRemove(guild, member)                  |    guildMemberRemove(member)                  |\n|    guildMembersChunk(guild, members)                 |    guildMembersChunk(members)                 |\n|    guildMemberUpdate(guild, oldMember, newMember)    |    guildMemberUpdate(oldMember, newMember)    |\n|    guildRoleCreate(guild, role)                      |    roleCreate(role)                           |\n|    guildRoleDelete(guild, role)                      |    roleDelete(role)                           |\n|    guildRoleUpdate(guild, oldRole, newRole)          |    roleUpdate(oldRole, newRole)               |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n| Version 9    | Version 10 |\n|--------------|------------|\n| disconnected | disconnect |\n\n## Dates and timestamps\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:\n**Date:** `Message.createdAt`\n**Timestamp:** `Message.createdTimestamp`\nSee the docs for each structure to see which date/timestamps are available on them.\n\n\n# Version 9\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.\nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({limit: 100}).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n","path":"docs/general/updating.md"},"faq":{"name":"FAQ","type":"md","content":"# Frequently Asked Questions\nThese are just questions that get asked frequently, that usually have a common resolution.\nIf you have issues not listed here, please ask in the [official Discord server](https://discord.gg/bRCvFy9).\nAlways make sure to read the documentation.\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\nUpdate to Node.js 6.0.0 or newer.\n\n## How do I get voice working?\n- Install FFMPEG.\n- Install either the `node-opus` package or the `opusscript` package.\n  node-opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n- **npm:** `npm install ffmpeg-binaries`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-binaries` or see the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up node-opus?\n- **Ubuntu:** Simply run `npm install node-opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install node-opus` in your bot's directory should successfully build it. Woo!\n","path":"docs/general/faq.md"}}},"topics":{"name":"Topics","files":{"voice":{"name":"Voice","type":"md","content":"# Introduction to Voice\nVoice in discord.js can be used for many things, such as music bots, recording or relaying audio.\n\nIn discord.js, you can use voice by connecting to a `VoiceChannel` to obtain a `VoiceConnection`, where you can start streaming and receiving audio.\n\nTo get started, make sure you have:\n* FFmpeg - `npm install ffmpeg-binaries`\n* an opus encoder, choose one from below:\n  * `npm install opusscript`\n  * `npm install node-opus`\n* a good network connection\n\nThe preferred opus engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n## Joining a voice channel\nThe example below reacts to a message and joins the sender's voice channel, catching any errors. This is important\nas it allows us to obtain a `VoiceConnection` that we can start to stream audio with.\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.login('token here');\n\nclient.on('message', message => {\n  // Voice only works in guilds, if the message does not come from a guild,\n  // we ignore it\n  if (!message.guild) return;\n\n  if (message.content === '/join') {\n    // Only try to join the sender's voice channel if they are in one themselves\n    if (message.member.voiceChannel) {\n      message.member.voiceChannel.join()\n        .then(connection => { // Connection is an instance of VoiceConnection\n          message.reply('I have successfully connected to the channel!');\n        })\n        .catch(console.log);\n    } else {\n      message.reply('You need to join a voice channel first!');\n    }\n  }\n});\n```\n\n## Streaming to a Voice Channel\nIn the previous example, we looked at how to join a voice channel in order to obtain a `VoiceConnection`. Now that we\nhave obtained a voice connection, we can start streaming audio to it. The following example shows how to stream an mp3\nfile:\n\n**Playing a file:**\n```js\n// To play a file, we need to give an absolute path to it\nconst dispatcher = connection.playFile('C:/Users/Discord/Desktop/myfile.mp3');\n```\n\nYour file doesn't have to be just an mp3; ffmpeg can convert videos and audios of many formats.\n\nThe `dispatcher` variable is an instance of a `StreamDispatcher`, which manages streaming a specific resource to a voice\nchannel. We can do many things with the dispatcher, such as finding out when the stream ends or changing the volume:\n\n```js\ndispatcher.on('end', () => {\n  // The song has finished\n});\n\ndispatcher.on('error', e => {\n  // Catch any errors that may arise\n  console.log(e);\n});\n\ndispatcher.setVolume(0.5); // Set the volume to 50%\ndispatcher.setVolume(1); // Set the volume back to 100%\n\nconsole.log(dispatcher.time); // The time in milliseconds that the stream dispatcher has been playing for\n\ndispatcher.pause(); // Pause the stream\ndispatcher.resume(); // Carry on playing\n\ndispatcher.end(); // End the dispatcher, emits 'end' event\n```\n\nIf you have an existing [ReadableStream](https://nodejs.org/api/stream.html#stream_readable_streams),\nthis can also be used:\n\n**Playing a ReadableStream:**\n```js\nconnection.playStream(myReadableStream);\n\n// If you don't want to use absolute paths, you can use\n// fs.createReadStream to circumvent it\n\nconst fs = require('fs');\nconst stream = fs.createReadStream('./test.mp3');\nconnection.playStream(stream);\n```\n\nIt's important to note that creating a readable stream to a file is less efficient than simply using `connection.playFile()`.\n\n**Playing anything else:**\n\nFor anything else, such as a URL to a file, you can use `connection.playArbitraryInput()`. You should consult the [ffmpeg protocol documentation](https://ffmpeg.org/ffmpeg-protocols.html) to see what you can use this for.\n\n```js\n// Play an mp3 from a URL\nconnection.playArbitraryInput('http://mysite.com/sound.mp3');\n```\n\nAgain, playing a file from a URL like this is more performant than creating a ReadableStream to the file.\n\n## Advanced Topics\nsoon:tm:\n","path":"docs/topics/voice.md"},"web":{"name":"Web builds","type":"md","content":"# Web builds\nIn addition to your usual Node applications, discord.js has special distributions available that are capable of running in web browsers.\nThis is useful for client-side web apps that need to interact with the Discord API.\n[Webpack 3](https://webpack.js.org/) is used to build these.\n\n## Usage\nYou can obtain your desired version of discord.js' web build from the [webpack branch](https://github.com/discordjs/discord.js/tree/webpack) of the GitHub repository.\nThere is a file for each branch and version of the library, and the ones ending in `.min.js` are minified to substantially reduce the size of the source code.\n\nInclude the file on the page just as you would any other JS library, like so:\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n\nRather than importing discord.js with `require('discord.js')`, the entire `Discord` object is available as a global (on the `window`) object.\nThe usage of the API isn't any different from using it in Node.js.\n\n## Restrictions\n- Any voice-related functionality is unavailable, as there is currently no audio encoding/decoding capabilities without external native libraries,\n  which web browsers do not support.\n- The ShardingManager cannot be used, since it relies on being able to spawn child processes for shards.\n- None of the optional packages are usable, since they're native libraries.\n\n## Example\n```html\n<script type=\"text/javascript\" src=\"discord.11.5.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('some crazy token');\n</script>\n```\n","path":"docs/topics/web.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/**\n * Send a user a link to their avatar\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.avatarURL);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/avatars.js"},"attachments":{"name":"Attachments","type":"md","content":"# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [Attachment](/#/docs/main/stable/class/Attachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, Attachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using Attachment\n\t\tconst attachment = new Attachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel\n\t\tmessage.channel.send(attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/stable/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, Attachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using Attachment\n\t\tconst attachment = new Attachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [Attachment](/#/docs/main/stable/class/Attachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, Attachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using Attachment\n\t\tconst attachment = new Attachment('./rip.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example1.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, Attachment } = require('discord.js');\n\n// Import the native fs module\nconst fs = require('fs');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!memes'\n\tif (message.content === '!memes') {\n\t\t// Get the buffer from the 'memes.txt', assuming that the file exists\n\t\tconst buffer = fs.readFileSync('./memes.txt');\n\n\t\t/**\n\t\t * Create the attachment using Attachment,\n\t\t * overwritting the default file name to 'memes.txt'\n\t\t * Read more about it over at\n\t\t * http://discord.js.org/#/docs/main/stable/class/Attachment\n\t\t */\n\t\tconst attachment = new Attachment(buffer, 'memes.txt');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author}, here are your memes!`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n","path":"docs/examples/attachments.md"},"greeting":{"name":"Server greeting","type":"js","content":"/**\n * A bot that welcomes new guild members when they join\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.find(ch => ch.name === 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/greeting.js"},"embed":{"name":"Message Embed","type":"js","content":"/**\n * An example of how you can send embeds\n */\n\n// Extract the required classes from the discord.js module\nconst { Client, RichEmbed } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is \"how to embed\"\n  if (message.content === 'how to embed') {\n    // We can create embeds using the MessageEmbed constructor\n    // Read more about all that you can do with the constructor\n    // over at https://discord.js.org/#/docs/main/stable/class/RichEmbed\n    const embed = new RichEmbed()\n      // Set the title of the field\n      .setTitle('A slick little embed')\n      // Set the color of the embed\n      .setColor(0xFF0000)\n      // Set the main content of the embed\n      .setDescription('Hello, this is a slick embed!');\n    // Send the embed to the same channel as the message\n    message.channel.send(embed);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/embed.js"},"moderation":{"name":"Moderation","type":"md","content":"# Moderation\n\nIn here, you'll see some basic examples for kicking and banning a member.\n\n## Kicking a member\n\nLet's say you have a member that you'd like to kick. Here is an example of how you *can* do it.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/stable/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Kick the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         */\n        member.kick('Optional reason that will display in the audit logs').then(() => {\n          // We let the message author know we were able to kick the person\n          message.reply(`Successfully kicked ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to kick the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to kick the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    // Otherwise, if no user was mentioned\n    } else {\n      message.reply('You didn\\'t mention the user to kick!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/kick-example.png)\n\n## Banning a member\n\nBanning works the same way as kicking, but it has slightly more options that can be changed.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/stable/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Ban the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         * Read more about what ban options there are over at\n         * https://discord.js.org/#/docs/main/stable/class/GuildMember?scrollTo=ban\n         */\n        member.ban({\n          reason: 'They were bad!',\n        }).then(() => {\n          // We let the message author know we were able to ban the person\n          message.reply(`Successfully banned ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to ban the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to ban the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    } else {\n    // Otherwise, if no user was mentioned\n      message.reply('You didn\\'t mention the user to ban!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)\n","path":"docs/examples/moderation.md"},"webhook":{"name":"Webhook","type":"js","content":"/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create a new webhook\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n","path":"docs/examples/webhook.js"}}}},"classes":[{"name":"Client","description":"The main hub for interacting with the Discord API, and the starting point for any bot.","extends":["EventEmitter"],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":36,"file":"Client.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":44,"file":"Client.js","path":"src/client"}},{"name":"dataManager","description":"The data manager of the client","access":"private","type":[[["ClientDataManager"]]],"meta":{"line":51,"file":"Client.js","path":"src/client"}},{"name":"manager","description":"The manager of the client","access":"private","type":[[["ClientManager"]]],"meta":{"line":58,"file":"Client.js","path":"src/client"}},{"name":"ws","description":"The WebSocket manager of the client","access":"private","type":[[["WebSocketManager"]]],"meta":{"line":65,"file":"Client.js","path":"src/client"}},{"name":"resolver","description":"The data resolver of the client","access":"private","type":[[["ClientDataResolver"]]],"meta":{"line":72,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"The action manager of the client","access":"private","type":[[["ActionsManager"]]],"meta":{"line":79,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"The voice manager of the client (`null` in browsers)","access":"private","nullable":true,"type":[[["ClientVoiceManager"]]],"meta":{"line":86,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"The shard helpers for the client\n(only if the process was spawned as a child, such as from a {@link ShardingManager})","nullable":true,"type":[[["ShardClientUtil"]]],"meta":{"line":93,"file":"Client.js","path":"src/client"}},{"name":"users","description":"All of the {@link User} objects that have been cached at any point, mapped by their IDs","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":99,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"All of the guilds the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* guild the bot is a member of","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":106,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* channel in *every* guild, and all DM channels","type":[[["Collection","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":113,"file":"Client.js","path":"src/client"}},{"name":"presences","description":"Presences that have been received for the client user's friends, mapped by user IDs\n<warn>This is only filled when using a user account.</warn>","deprecated":true,"type":[[["Collection","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":121,"file":"Client.js","path":"src/client"}},{"name":"token","description":"Authorization token for the logged in user/bot\n<warn>This should be kept private at all times.</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":130,"file":"Client.js","path":"src/client"}},{"name":"user","description":"User that the client is logged in as","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":139,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the `READY` state\n(each time the client disconnects and successfully reconnects, this will be overwritten)","nullable":true,"type":[[["Date"]]],"meta":{"line":146,"file":"Client.js","path":"src/client"}},{"name":"broadcasts","description":"Active voice broadcasts that have been created","type":[[["Array","<"],["VoiceBroadcast",">"]]],"meta":{"line":152,"file":"Client.js","path":"src/client"}},{"name":"pings","description":"Previous heartbeat pings of the websocket (most recent first, limited to three elements)","type":[[["Array","<"],["number",">"]]],"meta":{"line":158,"file":"Client.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link Client#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":165,"file":"Client.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link Client#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":172,"file":"Client.js","path":"src/client"}},{"name":"_pingTimestamp","description":"Timestamp of the latest ping's start time","access":"private","type":[[["number"]]],"meta":{"line":184,"file":"Client.js","path":"src/client"}},{"name":"status","description":"Current status of the client's connection to Discord","readonly":true,"type":[[["Status"]]],"meta":{"line":193,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"How long it has been since the client last entered the `READY` state in milliseconds","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":202,"file":"Client.js","path":"src/client"}},{"name":"ping","description":"Average heartbeat ping of the websocket, obtained by averaging the {@link Client#pings} property","readonly":true,"type":[[["number"]]],"meta":{"line":211,"file":"Client.js","path":"src/client"}},{"name":"voiceConnections","description":"All active voice connections that have been established, mapped by guild ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":220,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"All custom emojis that the client has access to, mapped by their IDs","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Emoji",">"]]],"meta":{"line":230,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"Timestamp of the time the client was last `READY` at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":243,"file":"Client.js","path":"src/client"}},{"name":"browser","description":"Whether the client is in a browser environment","readonly":true,"type":[[["boolean"]]],"meta":{"line":252,"file":"Client.js","path":"src/client"}}],"methods":[{"name":"createVoiceBroadcast","description":"Creates a voice broadcast.","returns":[[["VoiceBroadcast"]]],"meta":{"line":260,"file":"Client.js","path":"src/client"}},{"name":"login","description":"Logs the client in, establishing a websocket connection to Discord.\n<info>Both bot and regular user accounts are supported, but it is highly recommended to use a bot account whenever\npossible. User accounts are subject to harsher ratelimits and other restrictions that don't apply to bot accounts.\nBot accounts also have access to many features that user accounts cannot utilise. Automating a user account is\nconsidered a violation of the ToS.</info>","examples":["client.login('my token')\n .then(console.log)\n .catch(console.error);"],"params":[{"name":"token","description":"Token of the account to log in with","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Token of the account used"},"meta":{"line":279,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"Logs out, terminates the connection to Discord, and destroys the client.","returns":[[["Promise"]]],"meta":{"line":287,"file":"Client.js","path":"src/client"}},{"name":"syncGuilds","description":"Requests a sync of guild data with Discord.\n<info>This can be done automatically every 30 seconds by enabling {@link ClientOptions#sync}.</info>\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"guilds","description":"An array or collection of guilds to sync","optional":true,"default":"this.guilds","type":[[["Array","<"],["Guild",">"]],[["Collection","<"],["Snowflake",", "],["Guild",">"]]]}],"meta":{"line":302,"file":"Client.js","path":"src/client"}},{"name":"fetchUser","description":"Obtains a user from Discord, or the user cache if it's already available.\n<warn>This is only available when using a bot account.</warn>","params":[{"name":"id","description":"ID of the user","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new user object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":317,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"Obtains an invite from Discord.","examples":["client.fetchInvite('https://discord.gg/bRCvFy9')\n  .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"invite","description":"Invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":331,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"Obtains a webhook from Discord.","examples":["client.fetchWebhook('id', 'token')\n  .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token for the webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":346,"file":"Client.js","path":"src/client"}},{"name":"fetchVoiceRegions","description":"Obtains the available voice regions from Discord.","examples":["client.fetchVoiceRegions()\n  .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n  .catch(console.error);"],"returns":[[["Collection","<"],["string",", "],["VoiceRegion",">"]]],"meta":{"line":358,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\nIf the message has been edited, the time of the edit is used rather than the time of the original message.","params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\nor -1 if the message cache lifetime is unlimited"},"meta":{"line":370,"file":"Client.js","path":"src/client"}},{"name":"fetchApplication","description":"Obtains the OAuth Application of the bot from Discord.\n<warn>Bots can only fetch their own profile.</warn>","examples":["client.fetchApplication()\n  .then(application => console.log(`Obtained application with name: ${application.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID of application to fetch","optional":true,"default":"'@me'","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["OAuth2Application",">"]]],"meta":{"line":405,"file":"Client.js","path":"src/client"}},{"name":"generateInvite","description":"Generates a link that can be used to invite the bot to a guild.\n<warn>This is only available when using a bot account.</warn>","examples":["client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n  .then(link => console.log(`Generated bot invite link: ${link}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"Permissions to request","optional":true,"type":[[["PermissionResolvable"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":420,"file":"Client.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":434,"file":"Client.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":447,"file":"Client.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":459,"file":"Client.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":469,"file":"Client.js","path":"src/client"}},{"name":"_pong","description":"Adds a ping to {@link Client#pings}.","access":"private","params":[{"name":"startTime","description":"Starting time of the ping","type":[[["number"]]]}],"meta":{"line":479,"file":"Client.js","path":"src/client"}},{"name":"_setPresence","description":"Adds/updates a friend's presence in {@link Client#presences}.","access":"private","params":[{"name":"id","description":"ID of the user","type":[[["Snowflake"]]]},{"name":"presence","description":"Raw presence object from Discord","type":[[["Object"]]]}],"meta":{"line":491,"file":"Client.js","path":"src/client"}},{"name":"_eval","description":"Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\nwith the client as `this`.","access":"private","params":[{"name":"script","description":"Script to eval","type":[[["string"]]]}],"returns":[["*"]],"meta":{"line":506,"file":"Client.js","path":"src/client"}},{"name":"_validateOptions","description":"Validates the client options.","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":515,"file":"Client.js","path":"src/client"}}],"events":[{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["Channel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["Channel"]]]}],"meta":{"line":67,"file":"ChannelUpdate.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable","type":[[["Guild"]]]}],"meta":{"line":51,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"emojiCreate","description":"Emitted whenever a custom emoji is created in a guild.","params":[{"name":"emoji","description":"The emoji that was created","type":[[["Emoji"]]]}],"meta":{"line":11,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"emojiDelete","description":"Emitted whenever a custom guild emoji is deleted.","params":[{"name":"emoji","description":"The emoji that was deleted","type":[[["Emoji"]]]}],"meta":{"line":12,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"emojiUpdate","description":"Emitted whenever a custom guild emoji is updated.","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["Emoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["Emoji"]]]}],"meta":{"line":10,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild","type":[[["GuildMember"]]]}],"meta":{"line":35,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created","type":[[["Role"]]]}],"meta":{"line":20,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted","type":[[["Role"]]]}],"meta":{"line":36,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update","type":[[["Role"]]]}],"meta":{"line":34,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update","type":[[["Guild"]]]}],"meta":{"line":27,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"messageReactionAdd","description":"Emitted whenever a reaction is added to a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that applied the emoji or reaction emoji","type":[[["User"]]]}],"meta":{"line":30,"file":"MessageReactionAdd.js","path":"src/client/actions"}},{"name":"messageReactionRemove","description":"Emitted whenever a reaction is removed from a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user whose emoji or reaction emoji was removed","type":[[["User"]]]}],"meta":{"line":30,"file":"MessageReactionRemove.js","path":"src/client/actions"}},{"name":"messageReactionRemoveAll","description":"Emitted whenever all reactions are removed from a cached message.","params":[{"name":"message","description":"The message the reactions were removed from","type":[[["Message"]]]}],"meta":{"line":19,"file":"MessageReactionRemoveAll.js","path":"src/client/actions"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Message"]]]}],"meta":{"line":33,"file":"MessageUpdate.js","path":"src/client/actions"}},{"name":"userNoteUpdate","description":"Emitted whenever a note is updated.","params":[{"name":"user","description":"The user the note belongs to","type":[[["User"]]]},{"name":"oldNote","description":"The note content before the update","type":[[["string"]]]},{"name":"newNote","description":"The note content after the update","type":[[["string"]]]}],"meta":{"line":22,"file":"UserNoteUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"Emitted for general warnings.","params":[{"name":"info","description":"The warning","type":[[["string"]]]}],"meta":{"line":554,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"Emitted for general debugging information.","params":[{"name":"info","description":"The debug information","type":[[["string"]]]}],"meta":{"line":560,"file":"Client.js","path":"src/client"}},{"name":"guildCreate","description":"Emitted whenever the client joins a guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":29,"file":"ClientDataManager.js","path":"src/client"}},{"name":"rateLimit","description":"Emitted when the client hits a rate limit while making a request","params":[{"name":"rateLimitInfo","description":"Object containing the rate limit info","type":[[["Object"]]]},{"name":"rateLimitInfo.limit","description":"Number of requests that can be made to this endpoint","type":[[["number"]]]},{"name":"rateLimitInfo.timeDifference","description":"Delta-T in ms between your system and Discord servers","type":[[["number"]]]},{"name":"rateLimitInfo.path","description":"Path used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.method","description":"HTTP method used for request that triggered this event","type":[[["string"]]]}],"meta":{"line":94,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"channelCreate","description":"Emitted whenever a channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["Channel"]]]}],"meta":{"line":11,"file":"ChannelCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelDelete","description":"Emitted whenever a channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["Channel"]]]}],"meta":{"line":14,"file":"ChannelDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event, not much information\ncan be provided easily here - you need to manually check the pins yourself.\n<warn>The `time` parameter will be a Unix Epoch Date object when there are no pins left.</warn>","params":[{"name":"channel","description":"The channel that the pins update occured in","type":[[["Channel"]]]},{"name":"time","description":"The time when the last pinned message was pinned","type":[[["Date"]]]}],"meta":{"line":28,"file":"ChannelPinsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":16,"file":"GuildBanAdd.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild that the unban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]}],"meta":{"line":13,"file":"GuildBanRemove.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildDelete","description":"Emitted whenever a guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildIntegrationsUpdate","description":"Emitted whenever a guild integration is updated","params":[{"name":"guild","description":"The guild whose integrations were updated","type":[[["Guild"]]]}],"meta":{"line":15,"file":"GuildIntegrationsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of guild members is received (all members come from the same guild).","params":[{"name":"members","description":"The members in the chunk","type":[[["Array","<"],["GuildMember",">"]]]},{"name":"guild","description":"The guild related to the member chunk","type":[[["Guild"]]]}],"meta":{"line":26,"file":"GuildMembersChunk.js","path":"src/client/websocket/packets/handlers"}},{"name":"message","description":"Emitted whenever a message is created.","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":13,"file":"MessageCreate.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted.","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":13,"file":"MessageDelete.js","path":"src/client/websocket/packets/handlers"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk.","params":[{"name":"messages","description":"The deleted messages, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]]}],"meta":{"line":11,"file":"MessageDeleteBulk.js","path":"src/client/websocket/packets/handlers"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence changes, or they change one of their details.","params":[{"name":"oldMember","description":"The member before the presence update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the presence update","type":[[["GuildMember"]]]}],"meta":{"line":56,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":63,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"guildMemberAvailable","description":"Emitted whenever a member becomes available in a large guild.","params":[{"name":"member","description":"The member that became available","type":[[["GuildMember"]]]}],"meta":{"line":70,"file":"PresenceUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"resume","description":"Emitted whenever a WebSocket resumes.","params":[{"name":"replayed","description":"The number of events that were replayed","type":[[["number"]]]}],"meta":{"line":22,"file":"Resumed.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel.","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":54,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"typingStop","description":"Emitted whenever a user stops typing in a channel.","params":[{"name":"channel","description":"The channel the user stopped typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that stopped typing","type":[[["User"]]]}],"meta":{"line":61,"file":"TypingStart.js","path":"src/client/websocket/packets/handlers"}},{"name":"clientUserGuildSettingsUpdate","description":"Emitted whenever the client user's settings update.","params":[{"name":"clientUserGuildSettings","description":"The new client user guild settings","type":[[["ClientUserGuildSettings"]]]}],"meta":{"line":15,"file":"UserGuildSettingsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"clientUserSettingsUpdate","description":"Emitted when the client user's settings update.","params":[{"name":"clientUserSettings","description":"The new client user settings","type":[[["ClientUserSettings"]]]}],"meta":{"line":12,"file":"UserSettingsUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"voiceStateUpdate","description":"Emitted whenever a user changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldMember","description":"The member before the voice state update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the voice state update","type":[[["GuildMember"]]]}],"meta":{"line":45,"file":"VoiceStateUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"webhookUpdate","description":"Emitted whenever a guild text channel has its webhooks changed.","params":[{"name":"channel","description":"The channel that had a webhook update","type":[[["TextChannel"]]]}],"meta":{"line":13,"file":"WebhooksUpdate.js","path":"src/client/websocket/packets/handlers"}},{"name":"ready","description":"Emitted when the client becomes ready to start working.","meta":{"line":120,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"Emitted whenever the client tries to reconnect to the WebSocket.","meta":{"line":352,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"error","description":"Emitted whenever the client's WebSocket encounters a connection error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":369,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"disconnect","description":"Emitted when the client's WebSocket disconnects and will no longer attempt to reconnect.","params":[{"name":"event","description":"The WebSocket close event","type":[[["CloseEvent"]]]}],"meta":{"line":395,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":1292,"file":"Guild.js","path":"src/structures"}},{"name":"guildMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":1313,"file":"Guild.js","path":"src/structures"}},{"name":"guildMemberSpeaking","description":"Emitted once a guild member starts/stops speaking.","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"Whether or not the member is speaking","type":[[["boolean"]]]}],"meta":{"line":1337,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":21,"file":"Client.js","path":"src/client"}},{"name":"ClientDataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.\nextracting a User from a Message object.","access":"private","construct":{"name":"ClientDataResolver","params":[{"name":"client","description":"The client the resolver is for","type":[[["Client"]]]}]},"methods":[{"name":"resolveUser","description":"Resolves a UserResolvable to a User object.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":44,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveUserID","description":"Resolves a UserResolvable to a user ID string.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":58,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveGuild","description":"Resolves a GuildResolvable to a Guild object.","params":[{"name":"guild","description":"The GuildResolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":78,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveGuildMember","description":"Resolves a GuildMemberResolvable to a GuildMember object.","params":[{"name":"guild","description":"The guild that the member is part of","type":[[["GuildResolvable"]]]},{"name":"user","description":"The user that is part of the guild","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":97,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveRole","description":"Resolves a RoleResolvable to a Role object.","params":[{"name":"guild","description":"The guild that this role is part of","type":[[["GuildResolvable"]]]},{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Role"]]],"nullable":true},"meta":{"line":118,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveChannel","description":"Resolves a ChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":140,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveChannelID","description":"Resolves a ChannelResolvable to a channel ID.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":153,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code.","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":173,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string.","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":193,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveImage","description":"Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.","params":[{"name":"image","description":"The image to be resolved","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":[[["Promise","<?"],["string",">"]]],"meta":{"line":205,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image.","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":225,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveFile","description":"Resolves a BufferResolvable to a Buffer.","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":[[["Promise","<"],["Buffer",">"]]],"meta":{"line":249,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveEmojiIdentifier","description":"Resolves an EmojiResolvable to an emoji identifier.","params":[{"name":"emoji","description":"The emoji resolvable to resolve","type":[[["EmojiIdentifierResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":295,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveColor","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"A color"},"meta":{"line":371,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"resolveColor","description":"Resolves a ColorResolvable into a color number.","scope":"static","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"A color"},"meta":{"line":349,"file":"ClientDataResolver.js","path":"src/client"}}],"meta":{"line":21,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ClientManager","description":"Manages the state and background tasks of the client.","access":"private","props":[{"name":"client","description":"The client that instantiated this Manager","type":[[["Client"]]],"meta":{"line":14,"file":"ClientManager.js","path":"src/client"}},{"name":"heartbeatInterval","description":"The heartbeat interval","nullable":true,"type":[[["number"]]],"meta":{"line":20,"file":"ClientManager.js","path":"src/client"}},{"name":"status","description":"The status of the client","type":[[["number"]]],"meta":{"line":27,"file":"ClientManager.js","path":"src/client"}}],"methods":[{"name":"connectToWebSocket","description":"Connects the client to the WebSocket.","params":[{"name":"token","description":"The authorization token","type":[[["string"]]]},{"name":"resolve","description":"Function to run when connection is successful","type":[[["function"]]]},{"name":"reject","description":"Function to run when connection fails","type":[[["function"]]]}],"meta":{"line":37,"file":"ClientManager.js","path":"src/client"}}],"meta":{"line":8,"file":"ClientManager.js","path":"src/client"}},{"name":"DiscordAPIError","description":"Represents an error from the Discord API.","extends":["Error"],"props":[{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":16,"file":"DiscordAPIError.js","path":"src/client/rest"}},{"name":"code","description":"HTTP error code returned by Discord","type":[[["number"]]],"meta":{"line":22,"file":"DiscordAPIError.js","path":"src/client/rest"}},{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":28,"file":"DiscordAPIError.js","path":"src/client/rest"}}],"methods":[{"name":"flattenErrors","description":"Flattens an errors object returned from the API into an array.","scope":"static","access":"private","params":[{"name":"obj","description":"Discord errors object","type":[[["Object"]]]},{"name":"key","description":"Used internally to determine key names of nested fields","optional":true,"type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":38,"file":"DiscordAPIError.js","path":"src/client/rest"}}],"meta":{"line":5,"file":"DiscordAPIError.js","path":"src/client/rest"}},{"name":"RequestHandler","description":"A base class for different types of rate limiting handlers for the REST API.","access":"private","construct":{"name":"RequestHandler","params":[{"name":"restManager","description":"The REST manager to use","type":[[["RESTManager"]]]}]},"props":[{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["RESTManager"]]],"meta":{"line":14,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed","type":[[["Array","<"],["APIRequest",">"]]],"meta":{"line":20,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint","readonly":true,"type":[[["boolean"]]],"meta":{"line":28,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"methods":[{"name":"push","description":"Push a new API request into this bucket.","params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":40,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue.","meta":{"line":47,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"meta":{"line":5,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"SequentialRequestHandler","description":"Handles API Requests sequentially, i.e. we wait until the current request is finished before moving onto\nthe next. This plays a _lot_ nicer in terms of avoiding 429's when there is more than one session of the account,\nbut it can be slower.","extends":["RequestHandler"],"access":"private","construct":{"name":"SequentialRequestHandler","params":[{"name":"restManager","description":"The REST manager to use","type":[[["RESTManager"]]]},{"name":"endpoint","description":"The endpoint to handle","type":[[["string"]]]}]},"props":[{"name":"client","description":"The client that instantiated this handler","type":[[["Client"]]],"meta":{"line":24,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"endpoint","description":"The endpoint that this handler is handling","type":[[["string"]]],"meta":{"line":30,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"timeDifference","description":"The time difference between Discord's Dates and the local computer's Dates. A positive number means the local\ncomputer's time is ahead of Discord's","type":[[["number"]]],"meta":{"line":37,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"busy","description":"Whether the queue is being processed or not","type":[[["boolean"]]],"meta":{"line":43,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"restManager","description":"The RESTManager that instantiated this RequestHandler","type":[[["RESTManager"]]],"meta":{"line":14,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"queue","description":"A list of requests that have yet to be processed","type":[[["Array","<"],["APIRequest",">"]]],"meta":{"line":20,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"globalLimit","description":"Whether or not the client is being rate limited on every endpoint","readonly":true,"type":[[["boolean"]]],"meta":{"line":28,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"methods":[{"name":"execute","description":"Performs a request then resolves a promise to indicate its readiness for a new request.","params":[{"name":"item","description":"The item to execute","type":[[["APIRequest"]]]}],"returns":[[["Promise","<(?"],["Object","|"],["Error",")>"]]],"meta":{"line":56,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"push","description":"Push a new API request into this bucket.","inherits":"RequestHandler#push","inherited":true,"params":[{"name":"request","description":"The new request to push into the queue","type":[[["APIRequest"]]]}],"meta":{"line":40,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}},{"name":"handle","description":"Attempts to get this RequestHandler to process its current queue.","inherits":"RequestHandler#handle","inherited":true,"meta":{"line":47,"file":"RequestHandler.js","path":"src/client/rest/RequestHandlers"}}],"meta":{"line":12,"file":"Sequential.js","path":"src/client/rest/RequestHandlers"}},{"name":"ClientVoiceManager","description":"Manages all the voice stuff for the client.","access":"private","props":[{"name":"client","description":"The client that instantiated this voice manager","type":[[["Client"]]],"meta":{"line":14,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":20,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"joinChannel","description":"Sets up a request to join a voice channel.","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":44,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":8,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\n```js\n// Obtained using:\nvoiceChannel.join().then(connection => {\n  // You can play a file or a stream here:\n  const dispatcher = connection.playFile('./file.mp3');\n});\n```","implements":["VolumeInterface"],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":28,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"stream","description":"The stream that the dispatcher plays","type":[[["ReadableStream"]],[["VoiceBroadcast"]]],"meta":{"line":33,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether playing is paused","type":[[["boolean"]]],"meta":{"line":45,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"destroyed","description":"Whether this dispatcher has been destroyed","type":[[["boolean"]]],"meta":{"line":50,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"passes","description":"How many passes the dispatcher should take when sending packets to reduce packet loss. Values over 5\naren't recommended, as it means you are using 5x more bandwidth. You _can_ edit this at runtime","readonly":true,"type":[[["number"]]],"meta":{"line":61,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"time","description":"How long the stream dispatcher has been \"speaking\" for","readonly":true,"type":[[["number"]]],"meta":{"line":78,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The total time, taking into account pauses and skips, that the dispatcher has been streaming for","readonly":true,"type":[[["number"]]],"meta":{"line":87,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"methods":[{"name":"pause","description":"Stops sending voice packets to the voice connection (stream may still progress however).","meta":{"line":94,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes sending voice packets to the voice connection (may be further on in the stream than when paused).","meta":{"line":99,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"end","description":"Stops the current stream permanently and emits an `end` event.","params":[{"name":"reason","description":"An optional reason for stopping the dispatcher","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder.","params":[{"name":"bitrate","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"meta":{"line":128,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"events":[{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":114,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":140,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the dispatcher starts streaming.","meta":{"line":274,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"end","description":"Emitted once the dispatcher ends.","params":[{"name":"reason","description":"The reason the dispatcher ended","optional":true,"type":[[["string"]]]}],"meta":{"line":295,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"error","description":"Emitted if the dispatcher encounters an error.","params":[{"name":"error","description":"The error message","type":[[["string"]]]}],"meta":{"line":305,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":21,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"BaseOpus","description":"The base opus encoding engine.","access":"private","construct":{"name":"BaseOpus","params":[{"name":"options","description":"The options to apply to the Opus engine","optional":true,"type":[[["Object"]]]},{"name":"options.bitrate","description":"The desired bitrate (kbps)","optional":true,"default":48,"type":[[["number"]]]},{"name":"options.fec","description":"Whether to enable forward error correction","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.plp","description":"The expected packet loss percentage","optional":true,"default":0,"type":[[["number"]]]}]},"props":[{"name":"bitrate","description":"The desired bitrate (kbps)","type":[[["number"]]],"meta":{"line":26,"file":"BaseOpusEngine.js","path":"src/client/voice/opus"}},{"name":"options","description":"Miscellaneous Opus options","type":[[["Object"]]],"meta":{"line":32,"file":"BaseOpusEngine.js","path":"src/client/voice/opus"}}],"meta":{"line":5,"file":"BaseOpusEngine.js","path":"src/client/voice/opus"}},{"name":"AudioPlayer","description":"An Audio Player for a Voice Connection.","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that the player serves","type":[[["VoiceConnection"]]],"meta":{"line":27,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"prism","description":"The prism transcoder that the player uses","type":[[["Prism"]]],"meta":{"line":32,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"transcoder","description":"The current transcoder","readonly":true,"nullable":true,"type":[[["Object"]]],"meta":{"line":50,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"dispatcher","description":"The current dispatcher","readonly":true,"nullable":true,"type":[[["StreamDispatcher"]]],"meta":{"line":59,"file":"AudioPlayer.js","path":"src/client/voice/player"}}],"methods":[{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"meta":{"line":87,"file":"AudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":20,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives voice data from a voice connection.\n```js\n// Obtained using:\nvoiceChannel.join()\n  .then(connection => {\n    const receiver = connection.createReceiver();\n  });\n```","extends":["EventEmitter"],"props":[{"name":"destroyed","description":"Whether or not this receiver has been destroyed","type":[[["boolean"]]],"meta":{"line":36,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"voiceConnection","description":"The VoiceConnection that instantiated this","type":[[["VoiceConnection"]]],"meta":{"line":42,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"methods":[{"name":"recreate","description":"If this VoiceReceiver has been destroyed, running `recreate()` will recreate the listener.\nThis avoids you having to create a new receiver.\n<info>Any streams that you had prior to destroying the receiver will not be recreated.</info>","meta":{"line":68,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"destroy","description":"Destroy this VoiceReceiver, also ending any streams that it may be controlling.","meta":{"line":77,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"stoppedSpeaking","description":"Invoked when a user stops speaking.","access":"private","params":[{"name":"user","description":"The user that stopped speaking","type":[[["User"]]]}],"meta":{"line":99,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"createOpusStream","description":"Creates a readable stream for a user that provides opus data while the user is speaking. When the user\nstops speaking, the stream is destroyed.","params":[{"name":"user","description":"The user to create the stream for","type":[[["UserResolvable"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":124,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"createPCMStream","description":"Creates a readable stream for a user that provides PCM data while the user is speaking. When the user\nstops speaking, the stream is destroyed. The stream is 32-bit signed stereo PCM at 48KHz.","params":[{"name":"user","description":"The user to create the stream for","type":[[["UserResolvable"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":139,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"warn","description":"Emitted whenever a voice packet experiences a problem.","params":[{"name":"reason","description":"The reason for the warning. If it happened because the voice packet could not be\ndecrypted, this would be `decrypt`. If it happened because the voice packet could not be decoded into\nPCM, this would be `decode`","type":[[["string"]]]},{"name":"message","description":"The warning message","type":[[["string"]]]}],"meta":{"line":152,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"opus","description":"Emitted whenever voice data is received from the voice connection. This is _always_ emitted (unlike PCM).","params":[{"name":"user","description":"The user that is sending the buffer (is speaking)","type":[[["User"]]]},{"name":"buffer","description":"The opus buffer","type":[[["Buffer"]]]}],"meta":{"line":184,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"pcm","description":"Emits decoded voice data when it's received. For performance reasons, the decoding will only\nhappen if there is at least one `pcm` listener on this receiver.","params":[{"name":"user","description":"The user that is sending the buffer (is speaking)","type":[[["User"]]]},{"name":"buffer","description":"The decoded buffer","type":[[["Buffer"]]]}],"meta":{"line":199,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":20,"file":"VoiceReceiver.js","path":"src/client/voice/receiver"}},{"name":"SecretKey","description":"Represents a Secret Key used in encryption over voice.","access":"private","props":[{"name":"key","description":"The key used for encryption","type":[[["Uint8Array"]]],"meta":{"line":11,"file":"SecretKey.js","path":"src/client/voice/util"}}],"meta":{"line":5,"file":"SecretKey.js","path":"src/client/voice/util"}},{"name":"VolumeInterface","description":"An interface class for volume transformation.","extends":["EventEmitter"],"props":[{"name":"volume","description":"The current volume of the broadcast","readonly":true,"type":[[["number"]]],"meta":{"line":18,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the broadcast in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":27,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the broadcast from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":36,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":58,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Set the volume in decibels.","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":73,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Set the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":81,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"volumeChange","description":"Emitted when the volume of this interface changes.","params":[{"name":"oldVolume","description":"The old volume of this interface","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this interface","type":[[["number"]]]}],"meta":{"line":59,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"meta":{"line":7,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"VoiceBroadcast","description":"A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n\nExample usage:\n```js\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.playFile('./music.mp3');\n// Play \"music.mp3\" in all voice connections that the client is in\nfor (const connection of client.voiceConnections.values()) {\n  connection.playBroadcast(broadcast);\n}\n```","implements":["VolumeInterface"],"props":[{"name":"client","description":"The client that created the broadcast","type":[[["Client"]]],"meta":{"line":35,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"prism","description":"The audio transcoder that this broadcast uses","type":[[["Prism"]]],"meta":{"line":42,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"currentTranscoder","description":"The current audio transcoder that is being used","type":[[["Object"]]],"meta":{"line":47,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"dispatchers","description":"An array of subscribed dispatchers","readonly":true,"type":[[["Array","<"],["StreamDispatcher",">"]]],"meta":{"line":57,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"methods":[{"name":"playStream","description":"Plays any audio stream across the broadcast.","examples":["// Play streams using ytdl-core\nconst ytdl = require('ytdl-core');\nconst streamOptions = { seek: 0, volume: 1 };\nconst broadcast = client.createVoiceBroadcast();\n\nvoiceChannel.join()\n  .then(connection => {\n    const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', { filter : 'audioonly' });\n    broadcast.playStream(stream);\n    const dispatcher = connection.playBroadcast(broadcast);\n  })\n  .catch(console.error);"],"params":[{"name":"stream","description":"The audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["VoiceBroadcast"]]],"meta":{"line":146,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"playFile","description":"Play the given file in the voice connection.","examples":["// Play files natively\nconst broadcast = client.createVoiceBroadcast();\n\nvoiceChannel.join()\n  .then(connection => {\n    broadcast.playFile('C:/Users/Discord/Desktop/music.mp3');\n    const dispatcher = connection.playBroadcast(broadcast);\n  })\n  .catch(console.error);"],"params":[{"name":"file","description":"The absolute path to the file","type":[[["string"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":167,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"playConvertedStream","description":"Plays a stream of 16-bit signed stereo PCM.","params":[{"name":"stream","description":"The audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["VoiceBroadcast"]]],"meta":{"line":212,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"playOpusStream","description":"Plays an Opus encoded stream.\n<warn>Note that inline volume is not compatible with this method.</warn>","params":[{"name":"stream","description":"The Opus audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":227,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"playArbitraryInput","description":"Play an arbitrary input that can be [handled by ffmpeg](https://ffmpeg.org/ffmpeg-protocols.html#Description)","params":[{"name":"input","description":"The arbitrary input","type":[[["string"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["VoiceBroadcast"]]],"meta":{"line":239,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"pause","description":"Pauses the entire broadcast - all dispatchers also pause.","meta":{"line":248,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"resume","description":"Resumes the entire broadcast - all dispatchers also resume.","meta":{"line":260,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"end","description":"Stop the current stream from playing without unsubscribing dispatchers.","meta":{"line":349,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"destroy","description":"End the current broadcast, all subscribed dispatchers will also end.","meta":{"line":356,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"events":[{"name":"unsubscribe","description":"Emitted whenever a stream dispatcher unsubscribes from the broadcast.","params":[{"name":"dispatcher","description":"The unsubscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":76,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"subscribe","description":"Emitted whenever a stream dispatcher subscribes to the broadcast.","params":[{"name":"dispatcher","description":"The subscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":110,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever an error occurs.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":179,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"warn","description":"Emitted whenever the VoiceBroadcast has any warnings.","params":[{"name":"warning","description":"The warning that was raised","type":[[["string"]],[["Error"]]]}],"meta":{"line":186,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"end","description":"Emitted once the broadcast (the audio stream) ends.","meta":{"line":193,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"meta":{"line":28,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"VoiceConnection","description":"Represents a connection to a guild's voice server.\n```js\n// Obtained using:\nvoiceChannel.join()\n  .then(connection => {\n\n  });\n```","extends":["EventEmitter"],"props":[{"name":"voiceManager","description":"The voice manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":29,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"client","description":"The client that instantiated this connection","type":[[["Client"]]],"meta":{"line":35,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"prism","description":"The audio transcoder for this connection","type":[[["Prism"]]],"meta":{"line":46,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":52,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"status","description":"The current status of the voice connection","type":[[["number"]]],"meta":{"line":58,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Whether we're currently transmitting audio","type":[[["boolean"]]],"meta":{"line":64,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receivers","description":"An array of Voice Receivers that have been created for this connection","type":[[["Array","<"],["VoiceReceiver",">"]]],"meta":{"line":70,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["Object"]]],"meta":{"line":77,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":83,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC to speaking values","access":"private","type":[[["Map","<"],["number",", "],["boolean",">"]]],"meta":{"line":108,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["Object"]]],"meta":{"line":115,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current stream dispatcher (if any)","readonly":true,"nullable":true,"type":[[["StreamDispatcher"]]],"meta":{"line":125,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\" or not.","access":"private","params":[{"name":"value","description":"Whether or not to speak","type":[[["boolean"]]]}],"meta":{"line":134,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel.","params":[{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"meta":{"line":153,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the voice servers.","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":173,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection.","params":[{"name":"sessionID","description":"The voice session ID","type":[[["string"]]]}],"meta":{"line":204,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"checkAuthenticated","description":"Checks whether the voice connection is authenticated.","access":"private","meta":{"line":228,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticateFailed","description":"Invoked when we fail to initiate a voice connection.","access":"private","params":[{"name":"reason","description":"The reason for failure","type":[[["string"]]]}],"meta":{"line":248,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"updateChannel","description":"Move to a different voice channel in the same guild.","access":"private","params":[{"name":"channel","description":"The channel to move to","type":[[["VoiceChannel"]]]}],"meta":{"line":273,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticate","description":"Attempts to authenticate to the voice server.","access":"private","meta":{"line":282,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnect","description":"Attempts to reconnect to the voice server (typically after a region change).","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"meta":{"line":294,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnect the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":310,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"cleanup","description":"Cleans up after disconnect.","access":"private","meta":{"line":329,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection.","access":"private","meta":{"line":349,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onReady","description":"Invoked when the voice websocket is ready.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":375,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSessionDescription","description":"Invoked when a session description is received.","access":"private","params":[{"name":"mode","description":"The encryption mode","type":[[["string"]]]},{"name":"secret","description":"The secret key","type":[[["string"]]]}],"meta":{"line":387,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSpeaking","description":"Invoked when a speaking event is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":405,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playFile","description":"Play the given file in the voice connection.","examples":["// Play files natively\nvoiceChannel.join()\n  .then(connection => {\n    const dispatcher = connection.playFile('C:/Users/Discord/Desktop/music.mp3');\n  })\n  .catch(console.error);"],"params":[{"name":"file","description":"The absolute path to the file","type":[[["string"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":447,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playArbitraryInput","description":"Play an arbitrary input that can be [handled by ffmpeg](https://ffmpeg.org/ffmpeg-protocols.html#Description)","params":[{"name":"input","description":"the arbitrary input","type":[[["string"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":457,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playStream","description":"Plays and converts an audio stream in the voice connection.","examples":["// Play streams using ytdl-core\nconst ytdl = require('ytdl-core');\nconst streamOptions = { seek: 0, volume: 1 };\nvoiceChannel.join()\n  .then(connection => {\n    const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', { filter : 'audioonly' });\n    const dispatcher = connection.playStream(stream, streamOptions);\n  })\n  .catch(console.error);"],"params":[{"name":"stream","description":"The audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":477,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playConvertedStream","description":"Plays a stream of 16-bit signed stereo PCM.","params":[{"name":"stream","description":"The audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":487,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playOpusStream","description":"Plays an Opus encoded stream.\n<warn>Note that inline volume is not compatible with this method.</warn>","params":[{"name":"stream","description":"The Opus audio stream to play","type":[[["ReadableStream"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":498,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"playBroadcast","description":"Plays a voice broadcast.","examples":["// Play a broadcast\nconst broadcast = client\n  .createVoiceBroadcast()\n  .playFile('./test.mp3');\nconst dispatcher = voiceConnection.playBroadcast(broadcast);"],"params":[{"name":"broadcast","description":"The broadcast to play","type":[[["VoiceBroadcast"]]]},{"name":"options","description":"Options for playing the stream","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":514,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"createReceiver","description":"Creates a VoiceReceiver so you can start listening to voice data.\nIt's recommended to only create one of these.","returns":[[["VoiceReceiver"]]],"meta":{"line":523,"file":"VoiceConnection.js","path":"src/client/voice"}}],"events":[{"name":"debug","description":"Debug info from the connection.","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":86,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection.","params":[{"name":"warning","description":"The warning","type":[[["string"]],[["Error"]]]}],"meta":{"line":95,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"newSession","description":"Emitted when a new session ID is received.","meta":{"line":215,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticated","description":"Emitted when we successfully initiate a voice connection.","meta":{"line":234,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"failed","description":"Emitted when we fail to initiate a voice connection.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":251,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":258,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnecting","description":"Emitted when the voice connection is reconnecting (typically after a region change).","meta":{"line":299,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects.","meta":{"line":318,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\nthe connection will already be ready.","meta":{"line":392,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user starts/stops speaking.","params":[{"name":"user","description":"The user that has started/stopped speaking","type":[[["User"]]]},{"name":"speaking","description":"Whether or not the user is speaking","type":[[["boolean"]]]}],"meta":{"line":414,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":21,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP client for a Voice Connection.","extends":["EventEmitter"],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":18,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":24,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"discordAddress","description":"The address of the Discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":30,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"discordPort","description":"The port of the Discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":63,"file":"VoiceUDPClient.js","path":"src/client/voice"}}],"methods":[{"name":"send","description":"Send a packet to the UDP client.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":72,"file":"VoiceUDPClient.js","path":"src/client/voice"}}],"meta":{"line":10,"file":"VoiceUDPClient.js","path":"src/client/voice"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket.","extends":["EventEmitter"],"access":"private","props":[{"name":"client","description":"The client of this voice WebSocket","type":[[["Client"]]],"meta":{"line":25,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"voiceConnection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":31,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":37,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":77,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket.","meta":{"line":52,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":63,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"The data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":89,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":105,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onOpen","description":"Called whenever the WebSocket opens.","meta":{"line":117,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket.","params":[{"name":"event","description":"The message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":136,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket server is lost.","meta":{"line":147,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":155,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":163,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket.","params":[{"name":"interval","description":"The interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":206,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists.","meta":{"line":226,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet.","meta":{"line":238,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"events":[{"name":"ready","description":"Emitted once the voice WebSocket receives the ready packet.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":167,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session.","params":[{"name":"encryptionMode","description":"The type of encryption being used","type":[[["string"]]]},{"name":"secretKey","description":"The secret key used for encryption","type":[[["SecretKey"]]]}],"meta":{"line":175,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a speaking packet is received.","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":184,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received.","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":192,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"warn","description":"Emitted whenver the voice WebSocket encounters a non-fatal error.","params":[{"name":"warn","description":"The warning","type":[[["string"]]]}],"meta":{"line":212,"file":"VoiceWebSocket.js","path":"src/client/voice"}}],"meta":{"line":17,"file":"VoiceWebSocket.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The webhook client.","extends":["Webhook"],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":28,"file":"WebhookClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":35,"file":"WebhookClient.js","path":"src/client"}},{"name":"resolver","description":"The data resolver of the client","access":"private","type":[[["ClientDataResolver"]]],"meta":{"line":42,"file":"WebhookClient.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link WebhookClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":49,"file":"WebhookClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link WebhookClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":56,"file":"WebhookClient.js","path":"src/client"}},{"name":"client","description":"The client that instantiated the webhook","readonly":true,"type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the webhook","type":[[["string"]]],"meta":{"line":34,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the webhook","type":[[["string"]]],"meta":{"line":36,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":53,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":59,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Webhook.js","path":"src/structures"}},{"name":"owner","description":"The owner of the webhook","type":[[["User"]],[["Object"]]],"meta":{"line":72,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":66,"file":"WebhookClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":79,"file":"WebhookClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":91,"file":"WebhookClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":101,"file":"WebhookClient.js","path":"src/client"}},{"name":"destroy","description":"Destroys the client.","meta":{"line":110,"file":"WebhookClient.js","path":"src/client"}},{"name":"send","description":"Send a message with this webhook.","inherits":"Webhook#send","inherited":true,"examples":["// Send a basic message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nwebhook.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nwebhook.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nwebhook.send('This is an embed', {\n  embeds: [{\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   }],\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["WebhookMessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">|"],["Object","|"],["Array","<"],["Object",">)>"]]],"meta":{"line":140,"file":"Webhook.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message with this webhook","inherits":"Webhook#sendMessage","inherited":true,"examples":["// Send a message\nwebhook.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":229,"file":"Webhook.js","path":"src/structures"}},{"name":"sendFile","description":"Send a file with this webhook.","inherits":"Webhook#sendFile","inherited":true,"deprecated":true,"params":[{"name":"attachment","description":"The file to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"The name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":242,"file":"Webhook.js","path":"src/structures"}},{"name":"sendCode","description":"Send a code block with this webhook.","inherits":"Webhook#sendCode","inherited":true,"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":254,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Send a raw slack message with this webhook.","inherits":"Webhook#sendSlackMessage","inherited":true,"examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":275,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edit the webhook.","inherits":"Webhook#edit","inherited":true,"params":[{"name":"name","description":"The new name for the webhook","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the webhook","optional":true,"type":[[["BufferResolvable"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":285,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Delete the webhook.","inherits":"Webhook#delete","inherited":true,"params":[{"name":"reason","description":"Reason for deleting the webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":299,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":11,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketConnection","description":"Abstracts a WebSocket connection with decoding/encoding for the Discord gateway.","access":"private","construct":{"name":"WebSocketConnection","params":[{"name":"manager","description":"The WebSocket manager","type":[[["WebSocketManager"]]]},{"name":"gateway","description":"The WebSocket gateway to connect to","type":[[["string"]]]}]},"props":[{"name":"manager","description":"The WebSocket Manager of this connection","type":[[["WebSocketManager"]]],"meta":{"line":40,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"client","description":"The client this belongs to","type":[[["Client"]]],"meta":{"line":46,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ws","description":"The WebSocket connection itself","type":[[["WebSocket"]]],"meta":{"line":52,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"sequence","description":"The current sequence of the WebSocket","type":[[["number"]]],"meta":{"line":58,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"status","description":"The current status of the client","type":[[["Status"]]],"meta":{"line":64,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"packetManager","description":"The Packet Manager of the connection","type":[[["WebSocketPacketManager"]]],"meta":{"line":70,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"lastPingTimestamp","description":"The last time a ping was sent (a timestamp)","type":[[["number"]]],"meta":{"line":76,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ratelimit","description":"Contains the rate limit queue and metadata","type":[[["Object"]]],"meta":{"line":82,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"disabledEvents","description":"Events that are disabled (will not be processed)","type":[[["Object"]]],"meta":{"line":95,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"closeSequence","description":"The sequence on WebSocket close","type":[[["number"]]],"meta":{"line":101,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"expectingClose","description":"Whether or not the WebSocket is expecting to be closed","type":[[["boolean"]]],"meta":{"line":107,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ENCODING","description":"Encoding the WebSocket connections will use.","scope":"static","type":[[["string"]]],"meta":{"line":503,"file":"WebSocketConnection.js","path":"src/client/websocket"}}],"methods":[{"name":"triggerReady","description":"Causes the client to be marked as ready and emits the ready event.","returns":[[["void"]]],"meta":{"line":115,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"checkIfReady","description":"Checks whether the client is ready to be marked as ready.","returns":[[["void"]]],"meta":{"line":133,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"debug","description":"Emits a debug message.","params":[{"name":"message","description":"Debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":160,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"unpack","description":"Attempts to serialise data from the WebSocket.","params":[{"name":"data","description":"Data to unpack","type":[[["string"]],[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":170,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"pack","description":"Packs an object ready to be sent.","params":[{"name":"data","description":"Data to pack","type":[[["Object"]]]}],"returns":[[["string"]],[["Buffer"]]],"meta":{"line":184,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"processQueue","description":"Processes the current WebSocket queue.","meta":{"line":191,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"_send","description":"Sends data, bypassing the queue.","params":[{"name":"data","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":213,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"send","description":"Adds data to the queue to be sent.","params":[{"name":"data","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":226,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"connect","description":"Creates a connection to a gateway.","params":[{"name":"gateway","description":"The gateway to connect to","type":[[["string"]]]},{"name":"after","description":"How long to wait before connecting","optional":true,"default":0,"type":[[["number"]]]},{"name":"force","description":"Whether or not to force a new connection even if one already exists","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":242,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroys the connection.","returns":[[["boolean"]]],"meta":{"line":268,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onMessage","description":"Called whenever a message is received.","params":[{"name":"event","description":"Event received","type":[[["Event"]]]}],"returns":[[["boolean"]]],"meta":{"line":289,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"setSequence","description":"Sets the current sequence of the connection.","params":[{"name":"s","description":"New sequence","type":[[["number"]]]}],"meta":{"line":303,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onPacket","description":"Called whenever a packet is received.","params":[{"name":"packet","description":"Received packet","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":312,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onOpen","description":"Called whenever a connection is opened to the gateway.","params":[{"name":"event","description":"Received open event","type":[[["Event"]]]}],"meta":{"line":341,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"reconnect","description":"Causes a reconnection to the gateway.","meta":{"line":350,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":364,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"onClose","description":"Called whenever a connection to the gateway is closed.","params":[{"name":"event","description":"Close event that was received","type":[[["CloseEvent"]]]}],"meta":{"line":386,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"ackHeartbeat","description":"Acknowledges a heartbeat.","meta":{"line":413,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"heartbeat","description":"Sends a heartbeat or sets an interval for sending heartbeats.","params":[{"name":"time","description":"If -1, clears the interval, any other number sets an interval\nIf no value is given, a heartbeat will be sent instantly","optional":true,"type":[[["number"]]]}],"meta":{"line":423,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"identify","description":"Identifies the client on a connection.","params":[{"name":"after","description":"How long to wait before identifying","optional":true,"type":[[["number"]]]}],"returns":[[["void"]]],"meta":{"line":449,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"identifyNew","description":"Identifies as a new connection on the gateway.","returns":[[["void"]]],"meta":{"line":458,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"identifyResume","description":"Resumes a session on the gateway.","returns":[[["void"]]],"meta":{"line":479,"file":"WebSocketConnection.js","path":"src/client/websocket"}}],"meta":{"line":29,"file":"WebSocketConnection.js","path":"src/client/websocket"}},{"name":"WebSocketManager","description":"WebSocket Manager of the client.","access":"private","props":[{"name":"client","description":"The client that instantiated this WebSocketManager","type":[[["Client"]]],"meta":{"line":16,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connection","description":"The WebSocket connection of this manager","nullable":true,"type":[[["WebSocketConnection"]]],"meta":{"line":22,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"heartbeat","description":"Sends a heartbeat on the available connection.","returns":[[["void"]]],"meta":{"line":29,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"debug","description":"Emits a debug event.","params":[{"name":"message","description":"Debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":39,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroy the client.","returns":{"types":[[["void"]]],"description":"Whether or not destruction was successful"},"meta":{"line":47,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"send","description":"Send a packet on the available WebSocket.","params":[{"name":"packet","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":60,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connect","description":"Connects the client to a gateway.","params":[{"name":"gateway","description":"The gateway to connect to","type":[[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":73,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":9,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"Shard","description":"Represents a Shard spawned by the ShardingManager.","construct":{"name":"Shard","params":[{"name":"manager","description":"The sharding manager","type":[[["ShardingManager"]]]},{"name":"id","description":"The ID of this shard","type":[[["number"]]]},{"name":"args","description":"Command line arguments to pass to the script","optional":true,"default":"[]","type":[[["Array"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":21,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard","type":[[["number"]]],"meta":{"line":27,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"The environment variables for the shard","type":[[["Object"]]],"meta":{"line":33,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Whether the shard's {@link Client} is ready","type":[[["boolean"]]],"meta":{"line":43,"file":"Shard.js","path":"src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","access":"private","type":[[["function"]]],"meta":{"line":53,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard","type":[[["ChildProcess"]]],"meta":{"line":59,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process for the shard.\n<warn>You should not need to call this manually.</warn>","params":[{"name":"args","description":"Command line arguments to pass to the script","optional":true,"default":"this.manager.args","type":[[["Array"]]]},{"name":"execArgv","description":"Command line arguments to pass to the process executable","optional":true,"default":"this.manager.execArgv","type":[[["Array"]]]}],"returns":[[["ChildProcess"]]],"meta":{"line":71,"file":"Shard.js","path":"src/sharding"}},{"name":"kill","description":"Immediately kills the shard's process and does not restart it.","meta":{"line":96,"file":"Shard.js","path":"src/sharding"}},{"name":"respawn","description":"Kills and restarts the shard's process.","params":[{"name":"delay","description":"How long to wait between killing the process and restarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]}],"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":107,"file":"Shard.js","path":"src/sharding"}},{"name":"send","description":"Sends a message to the shard's process.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":118,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the shard.","examples":["shard.fetchClientValue('guilds.size')\n  .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":135,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script on the shard, in the context of the client.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":163,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":191,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process exiting.","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]}],"meta":{"line":266,"file":"Shard.js","path":"src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the shard's child process.","params":[{"name":"process","description":"Child process that was created","type":[[["ChildProcess"]]]}],"meta":{"line":78,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Emitted upon the shard's {@link Client#ready} event.","meta":{"line":196,"file":"Shard.js","path":"src/sharding"}},{"name":"disconnect","description":"Emitted upon the shard's {@link Client#disconnect} event.","meta":{"line":207,"file":"Shard.js","path":"src/sharding"}},{"name":"reconnecting","description":"Emitted upon the shard's {@link Client#reconnecting} event.","meta":{"line":218,"file":"Shard.js","path":"src/sharding"}},{"name":"message","description":"Emitted upon recieving a message from the child process.","params":[{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":253,"file":"Shard.js","path":"src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process exiting.","params":[{"name":"process","description":"Child process that exited","type":[[["ChildProcess"]]]}],"meta":{"line":267,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":9,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process, such as from a ShardingManager.","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"The client of the current shard","type":[[["Client"]]]}]},"props":[{"name":"id","description":"ID of this shard","readonly":true,"type":[[["number"]]],"meta":{"line":23,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":32,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":41,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","examples":["client.shard.fetchClientValues('guilds.size')\n  .then(results => {\n    console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n  })\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array",">"]]],"meta":{"line":60,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the Clients.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array",">"]]],"description":"Results of the script execution"},"meta":{"line":81,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":102,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":124,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]}],"returns":[[["ShardClientUtil"]]],"meta":{"line":136,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":6,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that can be used to help you spawn shards of your client. Each shard is completely separate\nfrom the other. The Shard Manager takes a path to a file and spawns it under the specified amount of shards safely.\nIf you do not select an amount of shards, the manager will automatically decide the best amount.","extends":["EventEmitter"],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of shards to spawn, or \"auto\"","optional":true,"default":"'auto'","type":[[["number"]],[["string"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":36,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that this manager is going to spawn","type":[[["number"]],[["string"]]],"meta":{"line":46,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":61,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards","type":[[["Array","<"],["string",">"]]],"meta":{"line":67,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"execArgv","description":"Arguments for the shard's process executable","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":73,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":79,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection","<"],["number",", "],["Shard",">"]]],"meta":{"line":85,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Spawns a single shard.","params":[{"name":"id","description":"The ID of the shard to spawn. **This is usually not necessary**","type":[[["number"]]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":93,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":7500,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":111,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"_spawn","description":"Actually spawns shards, unlike that poser above >:(","access":"private","params":[{"name":"amount","description":"Number of shards to spawn","type":[[["number"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":132,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Send a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise","<"],["Array","<"],["Shard",">>"]]],"meta":{"line":163,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the Clients.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array",">"]]],"description":"Results of the script execution"},"meta":{"line":174,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","examples":["manager.fetchClientValues('guilds.size')\n  .then(results => {\n    console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n  })\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array",">"]]],"meta":{"line":191,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawnAll","description":"Kills all running shards and respawns them.","params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"waitForReady","description":"Whether to wait for a shard to become ready before continuing to another","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"currentShardIndex","description":"The shard index to start respawning at","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":208,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"message","description":"Emitted upon recieving a message from a shard.","params":[{"name":"shard","description":"Shard that sent the message","type":[[["Shard"]]]},{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":245,"file":"Shard.js","path":"src/sharding"}},{"name":"launch","description":"Emitted upon launching a shard.","params":[{"name":"shard","description":"Shard that was launched","type":[[["Shard"]]]}],"meta":{"line":96,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":14,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"Attachment","description":"Represents an attachment in a message.","construct":{"name":"Attachment","params":[{"name":"file","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"type":[[["string"]]]}]},"props":[{"name":"name","description":"The name of the file","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":18,"file":"Attachment.js","path":"src/structures"}},{"name":"attachment","description":"The file","readonly":true,"type":[[["BufferResolvable"]],[["Stream"]]],"meta":{"line":27,"file":"Attachment.js","path":"src/structures"}}],"methods":[{"name":"setAttachment","description":"Set the file of this attachment.","params":[{"name":"file","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":{"types":[[["Attachment"]]],"description":"This attachment"},"meta":{"line":37,"file":"Attachment.js","path":"src/structures"}},{"name":"setFile","description":"Set the file of this attachment.","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":{"types":[[["Attachment"]]],"description":"This attachment"},"meta":{"line":47,"file":"Attachment.js","path":"src/structures"}},{"name":"setName","description":"Set the name of this attachment.","params":[{"name":"name","description":"The name of the image","type":[[["string"]]]}],"returns":{"types":[[["Attachment"]]],"description":"This attachment"},"meta":{"line":57,"file":"Attachment.js","path":"src/structures"}},{"name":"_attach","description":"Set the file of this attachment.","access":"private","params":[{"name":"file","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":69,"file":"Attachment.js","path":"src/structures"}}],"meta":{"line":6,"file":"Attachment.js","path":"src/structures"}},{"name":"CategoryChannel","description":"Represents a guild category channel on Discord.","extends":["GuildChannel"],"props":[{"name":"children","description":"The channels that are part of this category","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":17,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":72,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":483,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":497,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":513,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"memberPermissions","description":"Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":81,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role that you want to obtain the overall permissions for","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":128,"file":"GuildChannel.js","path":"src/structures"}},{"name":"replacePermissionOverwrites","description":"Replaces the permission overwrites for a channel","inherits":"GuildChannel#replacePermissionOverwrites","inherited":true,"examples":["channel.replacePermissionOverwrites({\noverwrites: [\n  {\n     id: message.author.id,\n     denied: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":180,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);","// Overwite permissions for a message author and reset some\nmessage.channel.overwritePermissions(message.author, {\n  VIEW_CHANNEL: false,\n  SEND_MESSAGES: null\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["Role"]],[["Snowflake"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":219,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":265,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":303,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":318,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":333,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Set a new parent for the guild channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Sets the parent of a channel\nchannel.setParent('174674066072928256')\n  .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"parent","description":"The new parent for the guild channel","type":[[["CategoryChannel"]],[["SnowFlake"]]]},{"name":"reason","description":"Reason for changing the guild channel's parent","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":348,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('Needs more rate limiting')\n  .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":364,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this guild channel.\n<warn>This is only available when using a bot account.</warn>","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for creating the invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":385,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clone this channel.","inherits":"GuildChannel#clone","inherited":true,"examples":["// Clone a channel\nchannel.clone(undefined, true, false, 'Needed a clone')\n  .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Optional name for the new channel, otherwise it has the name of this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"withPermissions","description":"Whether to clone the channel with this channel's permission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":402,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":416,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('Making room for new channels')\n  .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":449,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>\nconsole.log(`Hello from ${channel}`);","// Logs: Hello from <#123456789012345678>\nconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":7,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"Channel","description":"Represents any channel on Discord.","props":[{"name":"client","description":"The client that instantiated the Channel","readonly":true,"type":[[["Client"]]],"meta":{"line":8,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes the channel.","examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":73,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":6,"file":"Channel.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord user.","extends":["User"],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":20,"file":"ClientUser.js","path":"src/structures"}},{"name":"email","description":"The email of this account\n<warn>This is only filled when using a user account.</warn>","nullable":true,"deprecated":true,"type":[[["string"]]],"meta":{"line":28,"file":"ClientUser.js","path":"src/structures"}},{"name":"friends","description":"A Collection of friends for the logged in user\n<warn>This is only filled when using a user account.</warn>","deprecated":true,"type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":38,"file":"ClientUser.js","path":"src/structures"}},{"name":"blocked","description":"A Collection of blocked users for the logged in user\n<warn>This is only filled when using a user account.</warn>","deprecated":true,"type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":46,"file":"ClientUser.js","path":"src/structures"}},{"name":"notes","description":"A Collection of notes for the logged in user\n<warn>This is only filled when using a user account.</warn>","deprecated":true,"type":[[["Collection","<"],["Snowflake",", "],["string",">"]]],"meta":{"line":54,"file":"ClientUser.js","path":"src/structures"}},{"name":"premium","description":"If the user has Discord premium (nitro)\n<warn>This is only filled when using a user account.</warn>","nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":62,"file":"ClientUser.js","path":"src/structures"}},{"name":"mfaEnabled","description":"If the user has MFA enabled on their account","type":[[["boolean"]]],"meta":{"line":68,"file":"ClientUser.js","path":"src/structures"}},{"name":"mobile","description":"If the user has ever used a mobile device on Discord\n<warn>This is only filled when using a user account.</warn>","nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":76,"file":"ClientUser.js","path":"src/structures"}},{"name":"settings","description":"Various settings for this user\n<warn>This is only filled when using a user account.</warn>","nullable":true,"deprecated":true,"type":[[["ClientUserSettings"]]],"meta":{"line":84,"file":"ClientUser.js","path":"src/structures"}},{"name":"guildSettings","description":"All of the user's guild settings\n<warn>This is only filled when using a user account</warn>","deprecated":true,"type":[[["Collection","<"],["Snowflake",", "],["ClientUserGuildSettings",">"]]],"meta":{"line":92,"file":"ClientUser.js","path":"src/structures"}},{"name":"client","description":"The client that created the instance of the user","readonly":true,"type":[[["Client"]]],"meta":{"line":13,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":29,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":35,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","type":[[["string"]]],"meta":{"line":47,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":53,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":59,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":65,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created","readonly":true,"type":[[["Date"]]],"meta":{"line":89,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":98,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":111,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":121,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one. Otherwise a link to their default avatar will be returned","readonly":true,"type":[[["string"]]],"meta":{"line":132,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":141,"file":"User.js","path":"src/structures"}},{"name":"note","description":"The note that is set for the user\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["string"]]],"meta":{"line":152,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":191,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Set the username of the logged in client.\n<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\nevery hour. Use this sparingly!</info>","examples":["// Set username\nclient.user.setUsername('discordjs')\n  .then(user => console.log(`My new username is ${user.username}`))\n  .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]},{"name":"password","description":"Current password (only for user accounts)","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":117,"file":"ClientUser.js","path":"src/structures"}},{"name":"setEmail","description":"Changes the email for the client user's account.\n<warn>This is only available when using a user account.</warn>","examples":["// Set email\nclient.user.setEmail('bob@gmail.com', 'some amazing password 123')\n  .then(user => console.log(`My new email is ${user.email}`))\n  .catch(console.error);"],"deprecated":true,"params":[{"name":"email","description":"New email to change to","type":[[["string"]]]},{"name":"password","description":"Current password","type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":134,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPassword","description":"Changes the password for the client user's account.\n<warn>This is only available when using a user account.</warn>","examples":["// Set password\nclient.user.setPassword('some new amazing password 456', 'some amazing password 123')\n  .then(user => console.log('New password set!'))\n  .catch(console.error);"],"deprecated":true,"params":[{"name":"newPassword","description":"New password to change to","type":[[["string"]]]},{"name":"oldPassword","description":"Current password","type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":151,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Set the avatar of the logged in client.","examples":["// Set avatar\nclient.user.setAvatar('./avatar.png')\n  .then(user => console.log(`New avatar set!`))\n  .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":165,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Sets the full presence of the client user.","examples":["// Set the client user's presence\nclient.user.setPresence({ game: { name: 'with discord.js' }, status: 'idle' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"Data for the presence","type":[[["PresenceData"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":192,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Sets the status of the client user.","examples":["// Set the client user's status\nclient.user.setStatus('idle')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"status","description":"Status to change to","type":[[["PresenceStatus"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":264,"file":"ClientUser.js","path":"src/structures"}},{"name":"setGame","description":"Sets the game the client user is playing.","deprecated":true,"params":[{"name":"game","description":"Game being played","nullable":true,"type":[[["string"]]]},{"name":"streamingURL","description":"Twitch stream URL","optional":true,"nullable":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":275,"file":"ClientUser.js","path":"src/structures"}},{"name":"setActivity","description":"Sets the activity the client user is playing.","examples":["client.user.setActivity('YouTube', { type: 'WATCHING' })\n  .then(presence => console.log(`Activity set to ${presence.game ? presence.game.name : 'none'}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Activity being played","nullable":true,"type":[[["string"]]]},{"name":"options","description":"Options for setting the activity","optional":true,"type":[[["Object"]]]},{"name":"options.url","description":"Twitch stream URL","optional":true,"type":[[["string"]]]},{"name":"options.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":297,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Sets/removes the AFK flag for the client user.","params":[{"name":"afk","description":"Whether or not the user is AFK","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":309,"file":"ClientUser.js","path":"src/structures"}},{"name":"fetchMentions","description":"Fetches messages that mentioned the client's user.\n<warn>This is only available when using a user account.</warn>","examples":["// Fetch mentions\nclient.user.fetchMentions()\n  .then(console.log)\n  .catch(console.error);","// Fetch mentions from a guild\nclient.user.fetchMentions({ guild: '222078108977594368' })\n  .then(console.log)\n  .catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options for the fetch","optional":true,"type":[[["Object"]]]},{"name":"options.limit","description":"Maximum number of mentions to retrieve","optional":true,"default":25,"type":[[["number"]]]},{"name":"options.roles","description":"Whether to include role mentions","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.everyone","description":"Whether to include everyone/here mentions","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.guild","description":"Limit the search to a specific guild","optional":true,"type":[[["GuildResolvable"]]]}],"returns":[[["Promise","<"],["Array","<"],["Message",">>"]]],"meta":{"line":334,"file":"ClientUser.js","path":"src/structures"}},{"name":"addFriend","description":"Send a friend request.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"user","description":"The user to send the friend request to","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Promise","<"],["User",">"]]],"description":"The user the friend request was sent to"},"meta":{"line":345,"file":"ClientUser.js","path":"src/structures"}},{"name":"removeFriend","description":"Remove a friend.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"user","description":"The user to remove from your friends","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Promise","<"],["User",">"]]],"description":"The user that was removed"},"meta":{"line":357,"file":"ClientUser.js","path":"src/structures"}},{"name":"createGuild","description":"Creates a guild.\n<warn>This is only available to bots in less than 10 guilds and user accounts.</warn>","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"region","description":"The region for the server","optional":true,"type":[[["string"]]]},{"name":"icon","description":"The icon for the guild","optional":true,"default":null,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":{"types":[[["Promise","<"],["Guild",">"]]],"description":"The guild that was created"},"meta":{"line":370,"file":"ClientUser.js","path":"src/structures"}},{"name":"createGroupDM","description":"Creates a Group DM.","examples":["// Create a Group DM with a token provided from OAuth\nclient.user.createGroupDM([{\n  user: '66564597481480192',\n  accessToken: token\n}])\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"recipients","description":"The recipients","type":[[["Array","<"],["GroupDMRecipientOptions",">"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":403,"file":"ClientUser.js","path":"src/structures"}},{"name":"acceptInvite","description":"Accepts an invite to join a guild.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"invite","description":"Invite or code to accept","type":[[["Invite"]],[["string"]]]}],"returns":{"types":[[["Promise","<"],["Guild",">"]]],"description":"Joined guild"},"meta":{"line":421,"file":"ClientUser.js","path":"src/structures"}},{"name":"typingIn","description":"Check whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":161,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Get the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":171,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":181,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","inherits":"User#createDM","inherited":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":199,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","inherits":"User#deleteDM","inherited":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":207,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Blocks the user.\n<warn>This is only available when using a user account.</warn>","inherits":"User#block","inherited":true,"deprecated":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":237,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblocks the user.\n<warn>This is only available when using a user account.</warn>","inherits":"User#unblock","inherited":true,"deprecated":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":247,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Get the profile of the user.\n<warn>This is only available when using a user account.</warn>","inherits":"User#fetchProfile","inherited":true,"deprecated":true,"returns":[[["Promise","<"],["UserProfile",">"]]],"meta":{"line":257,"file":"User.js","path":"src/structures"}},{"name":"setNote","description":"Sets a note for the user.\n<warn>This is only available when using a user account.</warn>","inherits":"User#setNote","inherited":true,"deprecated":true,"params":[{"name":"note","description":"The note to set for the user","type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":268,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":278,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the user's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// logs: Hello from <@123456789>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":296,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","inherits":"User#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","inherits":"User#sendMessage","inherited":true,"implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","inherits":"User#sendEmbed","inherited":true,"implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","inherits":"User#sendFile","inherited":true,"implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","inherits":"User#sendCode","inherited":true,"implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":12,"file":"ClientUser.js","path":"src/structures"}},{"name":"ClientUserChannelOverride","description":"A wrapper around the ClientUser's channel overrides.","props":[{"name":"messageNotifications","description":"The type of message that should notify you","type":[[["MessageNotificationType"]]],"meta":{"line":693,"file":"Constants.js","path":"src/util"}},{"name":"muted","description":"Whether the channel is muted","type":[[["boolean"]]],"meta":{"line":700,"file":"Constants.js","path":"src/util"}}],"methods":[{"name":"patch","description":"Patch the data contained in this class with new partial data.","access":"private","params":[{"name":"data","description":"Data to patch this with","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":17,"file":"ClientUserChannelOverride.js","path":"src/structures"}}],"meta":{"line":6,"file":"ClientUserChannelOverride.js","path":"src/structures"}},{"name":"ClientUserGuildSettings","description":"A wrapper around the ClientUser's guild settings.","props":[{"name":"client","description":"The client that created the instance of the ClientUserGuildSettings","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"guildID","description":"The ID of the guild this settings are for","type":[[["Snowflake"]]],"meta":{"line":21,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you","type":[[["MessageNotificationType"]]],"meta":{"line":658,"file":"Constants.js","path":"src/util"}},{"name":"mobilePush","description":"Whether to receive mobile push notifications","type":[[["boolean"]]],"meta":{"line":665,"file":"Constants.js","path":"src/util"}},{"name":"muted","description":"Whether the guild is muted","type":[[["boolean"]]],"meta":{"line":671,"file":"Constants.js","path":"src/util"}},{"name":"suppressEveryone","description":"Whether to suppress everyone mention","type":[[["boolean"]]],"meta":{"line":677,"file":"Constants.js","path":"src/util"}},{"name":"channelOverrides","description":"A collection containing all the channel overrides","type":[[["Collection","<"],["ClientUserChannelOverride",">"]]],"meta":{"line":683,"file":"Constants.js","path":"src/util"}}],"methods":[{"name":"patch","description":"Patch the data contained in this class with new partial data.","access":"private","params":[{"name":"data","description":"Data to patch this with","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":32,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"update","description":"Update a specific property of the guild settings.","params":[{"name":"name","description":"Name of property","type":[[["string"]]]},{"name":"value","description":"Value to patch","type":[[["value"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":55,"file":"ClientUserGuildSettings.js","path":"src/structures"}}],"meta":{"line":8,"file":"ClientUserGuildSettings.js","path":"src/structures"}},{"name":"ClientUserSettings","description":"A wrapper around the ClientUser's settings.","props":[{"name":"convertEmoticons","description":"Automatically convert emoticons in your messages to emoji\nFor example, when you type `:-)` Discord will convert it to 😃","type":[[["boolean"]]],"meta":{"line":524,"file":"Constants.js","path":"src/util"}},{"name":"defaultGuildsRestricted","description":"If new guilds should automatically disable DMs between you and its members","type":[[["boolean"]]],"meta":{"line":532,"file":"Constants.js","path":"src/util"}},{"name":"detectPlatformAccounts","description":"Automatically detect accounts from services like Steam and Blizzard when you open the Discord client","type":[[["boolean"]]],"meta":{"line":539,"file":"Constants.js","path":"src/util"}},{"name":"developerMode","description":"Developer Mode exposes context menu items helpful for people writing bots using the Discord API","type":[[["boolean"]]],"meta":{"line":546,"file":"Constants.js","path":"src/util"}},{"name":"enableTTSCommand","description":"Allow playback and usage of the `/tts` command","type":[[["boolean"]]],"meta":{"line":553,"file":"Constants.js","path":"src/util"}},{"name":"theme","description":"The theme of the client. Either `light` or `dark`","type":[[["string"]]],"meta":{"line":560,"file":"Constants.js","path":"src/util"}},{"name":"status","description":"Last status set in the client","type":[[["PresenceStatus"]]],"meta":{"line":567,"file":"Constants.js","path":"src/util"}},{"name":"showCurrentGame","description":"Display currently running game as status message","type":[[["boolean"]]],"meta":{"line":574,"file":"Constants.js","path":"src/util"}},{"name":"inlineAttachmentMedia","description":"Display images, videos, and lolcats when uploaded directly to Discord","type":[[["boolean"]]],"meta":{"line":581,"file":"Constants.js","path":"src/util"}},{"name":"inlineEmbedMedia","description":"Display images, videos, and lolcats when uploaded posted as links in chat","type":[[["boolean"]]],"meta":{"line":588,"file":"Constants.js","path":"src/util"}},{"name":"locale","description":"Language the Discord client will use, as an RFC 3066 language identifier","type":[[["string"]]],"meta":{"line":595,"file":"Constants.js","path":"src/util"}},{"name":"messageDisplayCompact","description":"Display messages in compact mode","type":[[["boolean"]]],"meta":{"line":602,"file":"Constants.js","path":"src/util"}},{"name":"renderReactions","description":"Show emoji reactions on messages","type":[[["boolean"]]],"meta":{"line":609,"file":"Constants.js","path":"src/util"}},{"name":"guildPositions","description":"Array of snowflake IDs for guilds, in the order they appear in the Discord client","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":616,"file":"Constants.js","path":"src/util"}},{"name":"restrictedGuilds","description":"Array of snowflake IDs for guilds which you will not recieve DMs from","type":[[["Array","<"],["Snowflake",">"]]],"meta":{"line":623,"file":"Constants.js","path":"src/util"}},{"name":"explicitContentFilter","description":"Safe direct messaging; force people's messages with images to be scanned before they are sent to you.\nOne of `DISABLED`, `NON_FRIENDS`, `FRIENDS_AND_NON_FRIENDS`","type":[[["string"]]],"meta":{"line":631,"file":"Constants.js","path":"src/util"}},{"name":"friendSources","description":"Who can add you as a friend","type":[[["Object"]]],"props":[{"name":"all","description":"Mutual friends and mutual guilds","type":[[["boolean"]]]},{"name":"mutualGuilds","description":"Only mutual guilds","type":[[["boolean"]]]},{"name":"mutualFriends","description":"Only mutual friends","type":[[["boolean"]]]}],"meta":{"line":640,"file":"Constants.js","path":"src/util"}}],"methods":[{"name":"patch","description":"Patch the data contained in this class with new partial data.","access":"private","params":[{"name":"data","description":"Data to patch this with","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":19,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"update","description":"Update a specific property of of user settings.","params":[{"name":"name","description":"Name of property","type":[[["string"]]]},{"name":"value","description":"Value to patch","type":[["*"]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":37,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"setGuildPosition","description":"Sets the position at which this guild will appear in the Discord client.","params":[{"name":"guild","description":"The guild to move","type":[[["Guild"]]]},{"name":"position","description":"Absolute or relative position","type":[[["number"]]]},{"name":"relative","description":"Whether to position relatively or absolutely","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":48,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"addRestrictedGuild","description":"Add a guild to the list of restricted guilds.","params":[{"name":"guild","description":"The guild to add","type":[[["Guild"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":59,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"removeRestrictedGuild","description":"Remove a guild from the list of restricted guilds.","params":[{"name":"guild","description":"The guild to remove","type":[[["Guild"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":71,"file":"ClientUserSettings.js","path":"src/structures"}}],"meta":{"line":7,"file":"ClientUserSettings.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a direct message channel between two users.","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":25,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":31,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":37,"file":"DMChannel.js","path":"src/structures"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":383,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":392,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":411,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"client","description":"The client that instantiated the Channel","readonly":true,"type":[[["Client"]]],"meta":{"line":8,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically concatenates the recipient's mention instead of the\nDM channel object.","returns":[[["string"]]],"meta":{"line":45,"file":"DMChannel.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.","implements":["TextBasedChannel#fetchMessage"],"examples":["// Get message\nchannel.fetchMessage('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);"],"params":[{"name":"messageID","description":"ID of the message to get","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":193,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","implements":["TextBasedChannel#fetchMessages"],"examples":["// Get messages\nchannel.fetchMessages({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.fetchMessages()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":235,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","implements":["TextBasedChannel#fetchPinnedMessages"],"examples":["// Get pinned messages\nchannel.fetchPinnedMessages()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":258,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'discord.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.messages[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n}).catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":320,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel\nchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":331,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop in a channel\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":367,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"deprecated":true,"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":422,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":438,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\nfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":462,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#acknowledge"],"deprecated":true,"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":510,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFiles","description":"Send files to this channel.","implements":["TextBasedChannel#sendFiles"],"deprecated":true,"params":[{"name":"files","description":"Files to send with the message","type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":568,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes the channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":73,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":10,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents a custom emoji.","props":[{"name":"client","description":"The client that instantiated this object","readonly":true,"type":[[["Client"]]],"meta":{"line":11,"file":"Emoji.js","path":"src/structures"}},{"name":"guild","description":"The guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":23,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":29,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of the emoji","type":[[["Snowflake"]]],"meta":{"line":39,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of the emoji","type":[[["string"]]],"meta":{"line":45,"file":"Emoji.js","path":"src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":51,"file":"Emoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":57,"file":"Emoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":63,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at","readonly":true,"type":[[["number"]]],"meta":{"line":73,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created","readonly":true,"type":[[["Date"]]],"meta":{"line":82,"file":"Emoji.js","path":"src/structures"}},{"name":"deletable","description":"Whether the emoji is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles this emoji is active for (empty if all), mapped by role ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":100,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file","readonly":true,"type":[[["string"]]],"meta":{"line":113,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":122,"file":"Emoji.js","path":"src/structures"}}],"methods":[{"name":"edit","description":"Edits the emoji.","examples":["// Edit an emoji\nemoji.edit({name: 'newemoji'})\n  .then(e => console.log(`Edited emoji ${e}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the emoji","type":[[["EmojiEditData"]]]},{"name":"reason","description":"Reason for editing this emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Emoji",">"]]],"meta":{"line":145,"file":"Emoji.js","path":"src/structures"}},{"name":"setName","description":"Set the name of the emoji.","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]},{"name":"reason","description":"The reason for changing the emoji's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Emoji",">"]]],"meta":{"line":155,"file":"Emoji.js","path":"src/structures"}},{"name":"fetchAuthor","description":"Fetches the author for this emoji","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":163,"file":"Emoji.js","path":"src/structures"}},{"name":"addRestrictedRole","description":"Add a role to the list of roles that can use this emoji.","params":[{"name":"role","description":"The role to add","type":[[["Role"]]]}],"returns":[[["Promise","<"],["Emoji",">"]]],"meta":{"line":179,"file":"Emoji.js","path":"src/structures"}},{"name":"addRestrictedRoles","description":"Add multiple roles to the list of roles that can use this emoji.","params":[{"name":"roles","description":"Roles to add","type":[[["Array","<"],["Role",">"]]]}],"returns":[[["Promise","<"],["Emoji",">"]]],"meta":{"line":188,"file":"Emoji.js","path":"src/structures"}},{"name":"removeRestrictedRole","description":"Remove a role from the list of roles that can use this emoji.","params":[{"name":"role","description":"The role to remove","type":[[["Role"]]]}],"returns":[[["Promise","<"],["Emoji",">"]]],"meta":{"line":201,"file":"Emoji.js","path":"src/structures"}},{"name":"removeRestrictedRoles","description":"Remove multiple roles from the list of roles that can use this emoji.","params":[{"name":"roles","description":"Roles to remove","type":[[["Array","<"],["Role",">"]]]}],"returns":[[["Promise","<"],["Emoji",">"]]],"meta":{"line":210,"file":"Emoji.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the emoji mention rather than the object.","examples":["// Send an emoji:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);"],"returns":[[["string"]]],"meta":{"line":226,"file":"Emoji.js","path":"src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","params":[{"name":"other","description":"The emoji to compare it to","type":[[["Emoji"]],[["Object"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the emoji is equal to the given emoji or not"},"meta":{"line":239,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":9,"file":"Emoji.js","path":"src/structures"}},{"name":"GroupDMChannel","description":"Represents a Group DM on Discord.","extends":["Channel"],"implements":["TextBasedChannel"],"props":[{"name":"name","description":"The name of this Group DM, can be null if one isn't set","type":[[["string"]]],"meta":{"line":48,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"icon","description":"A hash of this Group DM icon","nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this Group DM's owner","type":[[["string"]]],"meta":{"line":60,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"managed","description":"If the DM is managed by an application","type":[[["boolean"]]],"meta":{"line":66,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID of the application that made this Group DM, if applicable","nullable":true,"type":[[["string"]]],"meta":{"line":72,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"nicks","description":"Nicknames for group members","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["string",">"]]],"meta":{"line":79,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"recipients","description":"A collection of the recipients of this DM, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":87,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":101,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":107,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"owner","description":"The owner of this Group DM","readonly":true,"type":[[["User"]]],"meta":{"line":115,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":124,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":383,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":392,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":411,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"client","description":"The client that instantiated the Channel","readonly":true,"type":[[["Client"]]],"meta":{"line":8,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this channel equals another channel. It compares all properties, so for most operations\nit is advisable to just compare `channel.id === channel2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GroupDMChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":143,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"addUser","description":"Add a user to the DM","params":[{"name":"accessTokenOrID","description":"Access token or user resolvable","type":[[["UserResolvable"]],[["string"]]]},{"name":"nick","description":"Permanent nickname to give the user (only available if a bot is creating the DM)","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":164,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"setIcon","description":"Set a new GroupDMChannel icon.","examples":["// Edit the group dm icon\nchannel.setIcon('./icon.png')\n .then(updated => console.log('Updated the channel icon'))\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the group dm","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":182,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for this Group DM.","params":[{"name":"name","description":"New name for this Group DM","type":[[["string"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":191,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"removeUser","description":"Removes a user from this Group DM.","params":[{"name":"user","description":"User to remove","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["GroupDMChannel",">"]]],"meta":{"line":200,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the channel's name instead of the Channel object.","examples":["// Logs: Hello from My Group DM!\nconsole.log(`Hello from ${channel}!`);","// Logs: Hello from My Group DM!\nconsole.log(`Hello from ' + channel + '!');"],"returns":[[["string"]]],"meta":{"line":215,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.","implements":["TextBasedChannel#fetchMessage"],"examples":["// Get message\nchannel.fetchMessage('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);"],"params":[{"name":"messageID","description":"ID of the message to get","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":193,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","implements":["TextBasedChannel#fetchMessages"],"examples":["// Get messages\nchannel.fetchMessages({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.fetchMessages()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":235,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","implements":["TextBasedChannel#fetchPinnedMessages"],"examples":["// Get pinned messages\nchannel.fetchPinnedMessages()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":258,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'discord.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.messages[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n}).catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":320,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel\nchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":331,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop in a channel\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":367,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"deprecated":true,"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":422,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":438,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\nfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":462,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#acknowledge"],"deprecated":true,"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":510,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFiles","description":"Send files to this channel.","implements":["TextBasedChannel#sendFiles"],"deprecated":true,"params":[{"name":"files","description":"Files to send with the message","type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":568,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes the channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":73,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":33,"file":"GroupDMChannel.js","path":"src/structures"}},{"name":"Guild","description":"Represents a guild (or a server) on Discord.\n<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\ncheck this with `guild.available`.</info>","props":[{"name":"client","description":"The client that created the instance of the guild","readonly":true,"type":[[["Client"]]],"meta":{"line":20,"file":"Guild.js","path":"src/structures"}},{"name":"members","description":"A collection of members that are in this guild. The key is the member's ID, the value is the member","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":32,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A collection of channels that are in this guild. The key is the channel's ID, the value is the channel","type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":38,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles that are in this guild. The key is the role's ID, the value is the role","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":44,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A collection of presences in this guild","type":[[["Collection","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":50,"file":"Guild.js","path":"src/structures"}},{"name":"deleted","description":"Whether the bot has been removed from the guild","type":[[["boolean"]]],"meta":{"line":56,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the guild is available to access. If it is not available, it indicates a server outage","type":[[["boolean"]]],"meta":{"line":64,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the guild, useful for comparisons","type":[[["Snowflake"]]],"meta":{"line":70,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":88,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon","nullable":true,"type":[[["string"]]],"meta":{"line":94,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":100,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":106,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this guild","type":[[["number"]]],"meta":{"line":112,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":118,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features","type":[[["Array","<"],["Object",">"]]],"meta":{"line":124,"file":"Guild.js","path":"src/structures"}},{"name":"applicationID","description":"The ID of the application that created this guild (if applicable)","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":130,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\"","nullable":true,"type":[[["number"]]],"meta":{"line":136,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved","nullable":true,"type":[[["string"]]],"meta":{"line":142,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelID","description":"The ID of the system channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":148,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild","type":[[["boolean"]]],"meta":{"line":154,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","type":[[["number"]]],"meta":{"line":160,"file":"Guild.js","path":"src/structures"}},{"name":"explicitContentFilter","description":"The explicit content filter level of the guild","type":[[["number"]]],"meta":{"line":166,"file":"Guild.js","path":"src/structures"}},{"name":"mfaLevel","description":"The required MFA level for the guild","type":[[["number"]]],"meta":{"line":172,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":178,"file":"Guild.js","path":"src/structures"}},{"name":"defaultMessageNotifications","description":"The value set for a guild's default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]],"meta":{"line":184,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner","type":[[["Snowflake"]]],"meta":{"line":201,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A collection of emojis that are in this guild\nThe key is the emoji's ID, the value is the emoji","type":[[["Collection","<"],["Snowflake",", "],["Emoji",">"]]],"meta":{"line":247,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":262,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created","readonly":true,"type":[[["Date"]]],"meta":{"line":271,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":280,"file":"Guild.js","path":"src/structures"}},{"name":"verified","description":"If this guild is verified","readonly":true,"type":[[["boolean"]]],"meta":{"line":289,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":298,"file":"Guild.js","path":"src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon.","readonly":true,"type":[[["string"]]],"meta":{"line":308,"file":"Guild.js","path":"src/structures"}},{"name":"splashURL","description":"The URL to this guild's splash","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":317,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":327,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannel","description":"AFK voice channel for this guild","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":336,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannel","description":"System channel for this guild","readonly":true,"nullable":true,"type":[[["GuildChannel"]]],"meta":{"line":345,"file":"Guild.js","path":"src/structures"}},{"name":"voiceConnection","description":"If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":354,"file":"Guild.js","path":"src/structures"}},{"name":"position","description":"The position of this guild\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["number"]]],"meta":{"line":366,"file":"Guild.js","path":"src/structures"}},{"name":"muted","description":"Whether the guild is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":379,"file":"Guild.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":395,"file":"Guild.js","path":"src/structures"}},{"name":"mobilePush","description":"Whether to receive mobile push notifications\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":411,"file":"Guild.js","path":"src/structures"}},{"name":"suppressEveryone","description":"Whether to suppress everyone messages\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":427,"file":"Guild.js","path":"src/structures"}},{"name":"defaultRole","description":"The `@everyone` role of the guild","readonly":true,"type":[[["Role"]]],"meta":{"line":441,"file":"Guild.js","path":"src/structures"}},{"name":"me","description":"The client user as a GuildMember of this guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":450,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedRoles","description":"Fetches a collection of roles in the current guild sorted by position","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":460,"file":"Guild.js","path":"src/structures"}},{"name":"defaultChannel","description":"The `#general` TextChannel of the guild","readonly":true,"deprecated":true,"type":[[["TextChannel"]]],"meta":{"line":1433,"file":"Guild.js","path":"src/structures"}}],"methods":[{"name":"setup","description":"Sets up the guild.","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":83,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the user is present in the guild.","examples":["// Get the guild member of a user\nconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":472,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBan","description":"Fetch a ban for a user.","examples":["// Get ban\nguild.fetchBan(message.author)\n  .then(({ user, reason }) => console.log(`${user.tag} was banned for the reason: ${reason}.`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to fetch the ban for","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["BanInfo",">"]]],"meta":{"line":493,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetch a collection of banned users in this guild.","examples":["// Fetch bans in guild\nguild.fetchBans()\n  .then(bans => console.log(`This guild has ${bans.size} bans`))\n  .catch(console.error);"],"params":[{"name":"withReasons","description":"Whether or not to include the ban reason(s)","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", ("],["User","|"],["BanInfo",")>>"]]],"meta":{"line":507,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetch a collection of invites to this guild.\nResolves with a collection mapping invites by their codes.","examples":["// Fetch invites\nguild.fetchInvites()\n  .then(invites => console.log(`Fetched ${invites.size} invites`))\n  .catch(console.error);","// Fetch invite creator by their id\nguild.fetchInvites()\n .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":532,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVanityCode","description":"Fetches the vanity url invite code to this guild.\nResolves with a string matching the vanity url invite code, not the full url.","examples":["// Fetch invites\nguild.fetchVanityCode()\n  .then(code => {\n    console.log(`Vanity URL: https://discord.gg/${code}`);\n  })\n  .catch(console.error);"],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":548,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetch all webhooks for the guild.","examples":["// Fetch webhooks\nguild.fetchWebhooks()\n  .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":565,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVoiceRegions","description":"Fetch available voice regions.","examples":["// Fetch voice regions\nguild.fetchVoiceRegions()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":578,"file":"Guild.js","path":"src/structures"}},{"name":"fetchEmbed","description":"Fetches the guild embed.","examples":["// Fetches the guild embed\nguild.fetchEmbed()\n  .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["GuildEmbedData",">"]]],"meta":{"line":598,"file":"Guild.js","path":"src/structures"}},{"name":"fetchAuditLogs","description":"Fetch audit logs for this guild.","examples":["// Output audit log entries\nguild.fetchAuditLogs()\n  .then(audit => console.log(audit.entries.first()))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching audit logs","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.before","description":"Limit to entries from before specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.after","description":"Limit to entries from after specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.limit","description":"Limit number of entries","optional":true,"type":[[["number"]]]},{"name":"options.user","description":"Only show entries involving this user","optional":true,"type":[[["UserResolvable"]]]},{"name":"options.type","description":"Only show entries involving this action type","optional":true,"type":[[["AuditLogAction"]]]}],"returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":617,"file":"Guild.js","path":"src/structures"}},{"name":"addMember","description":"Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.","params":[{"name":"user","description":"User to add to the guild","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the addition","type":[[["Object"]]]},{"name":"options.accessToken","description":"An OAuth2 access token for the user with the `guilds.join` scope granted to the\nbot's application","type":[[["string"]]]},{"name":"options.nick","description":"Nickname to give the member (requires `MANAGE_NICKNAMES`)","optional":true,"type":[[["string"]]]},{"name":"options.roles","description":"Roles to add to the member\n(requires `MANAGE_ROLES`)","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["Role",">"]],[["Array","<"],["Snowflake",">"]]]},{"name":"options.mute","description":"Whether the member should be muted (requires `MUTE_MEMBERS`)","optional":true,"type":[[["boolean"]]]},{"name":"options.deaf","description":"Whether the member should be deafened (requires `DEAFEN_MEMBERS`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":634,"file":"Guild.js","path":"src/structures"}},{"name":"fetchMember","description":"Fetch a single guild member from a user.","examples":["// Fetch a guild member\nguild.fetchMember(message.author)\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to fetch the member for","type":[[["UserResolvable"]]]},{"name":"cache","description":"Insert the member into the members cache","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":651,"file":"Guild.js","path":"src/structures"}},{"name":"fetchMembers","description":"Fetches all the members in the guild, even if they are offline. If the guild has less than 250 members,\nthis should not be necessary.","examples":["// Fetch guild members\nguild.fetchMembers()\n  .then(console.log)\n  .catch(console.error);","// Fetches a maximum of 1 member with the given query\nguild.fetchMembers('hydrabolt', 1)\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"query","description":"Limit fetch to members with similar usernames","optional":true,"default":"''","type":[[["string"]]]},{"name":"limit","description":"Maximum number of members to request","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":676,"file":"Guild.js","path":"src/structures"}},{"name":"search","description":"Performs a search within the entire guild.\n<warn>This is only available when using a user account.</warn>","examples":["guild.search({\n  content: 'discord.js',\n  before: '2016-11-17'\n})\n  .then(res => {\n    const hit = res.messages[0].find(m => m.hit).content;\n    console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n  })\n  .catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":719,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the guild with new information - e.g. a new name.","examples":["// Set the guild name and region\nguild.edit({\n  name: 'Discord Guild',\n  region: 'london',\n})\n  .then(g => console.log(`Changed guild name to ${g} and region to ${g.region}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]},{"name":"reason","description":"Reason for editing the guild","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":752,"file":"Guild.js","path":"src/structures"}},{"name":"setExplicitContentFilter","description":"Edit the level of the explicit content filter.","params":[{"name":"explicitContentFilter","description":"The new level of the explicit content filter","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the level of the guild's explicit content filter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":784,"file":"Guild.js","path":"src/structures"}},{"name":"setDefaultMessageNotifications","description":"Edits the setting of the default message notifications of the guild.","params":[{"name":"defaultMessageNotifications","description":"The new setting for the default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]]},{"name":"reason","description":"Reason for changing the setting of the default message notifications","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":795,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edit the name of the guild.","examples":["// Edit the guild name\nguild.setName('Discord Guild')\n .then(g => console.log(`Updated guild name to ${g}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":810,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edit the region of the guild.","examples":["// Edit the guild region\nguild.setRegion('london')\n .then(g => console.log(`Updated guild region to ${g.region}`))\n .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's region","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":825,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edit the verification level of the guild.","examples":["// Edit the guild verification level\nguild.setVerificationLevel(1)\n .then(g => console.log(`Updated guild verification level to ${g.verificationLevel}`))\n .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's verification level","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":840,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edit the AFK channel of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKChannel(channel)\n .then(g => console.log(`Updated guild AFK channel to ${g.afkChannel.name}`))\n .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's AFK channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":855,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannel","description":"Edit the system channel of the guild.","params":[{"name":"systemChannel","description":"The new system channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's system channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":865,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edit the AFK timeout of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKTimeout(60)\n .then(g => console.log(`Updated guild AFK timeout to ${g.afkTimeout}`))\n .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's AFK timeout","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":880,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Set a new guild icon.","examples":["// Edit the guild icon\nguild.setIcon('./icon.png')\n .then(console.log)\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's icon","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":895,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the guild.","examples":["// Edit the guild owner\nguild.setOwner(guild.members.first())\n .then(g => console.log(`Updated the guild owner to ${g.owner.displayName}`))\n .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the guild","type":[[["GuildMemberResolvable"]]]},{"name":"reason","description":"Reason for setting the new owner","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":910,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Set a new guild splash screen.","examples":["// Edit the guild splash\nguild.setSplash('./splash.png')\n .then(console.log)\n .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"reason","description":"Reason for changing the guild's splash screen","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":925,"file":"Guild.js","path":"src/structures"}},{"name":"setPosition","description":"Sets the position of the guild in the guild listing.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"position","description":"Absolute or relative position","type":[[["number"]]]},{"name":"relative","description":"Whether to position relatively or absolutely","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":937,"file":"Guild.js","path":"src/structures"}},{"name":"acknowledge","description":"Marks all messages in this guild as read.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":950,"file":"Guild.js","path":"src/structures"}},{"name":"allowDMs","description":"Allow direct messages from guild members.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"allow","description":"Whether to allow direct messages","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":961,"file":"Guild.js","path":"src/structures"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// Ban a user by ID\nguild.ban('some user ID')\n  .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild}`))\n  .catch(console.error);","// Ban a user by object with reason and days\nguild.ban(user, { days: 7, reason: 'He needed to go' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Ban options. If a number, the number of days to delete messages for, if a\nstring, the ban reason. Supplying an object allows you to do both.","optional":true,"type":[[["Object"]],[["number"]],[["string"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["GuildMember","|"],["User","|"],["string",")>"]]],"description":"Result object will be resolved as specifically as possible.\nIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\nbe resolved, the user ID will be the result."},"meta":{"line":988,"file":"Guild.js","path":"src/structures"}},{"name":"unban","description":"Unbans a user from the guild.","examples":["// Unban a user by ID (or with a user/guild member object)\nguild.unban('some user ID')\n  .then(user => console.log(`Unbanned ${user.username} from ${guild}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning the user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":1009,"file":"Guild.js","path":"src/structures"}},{"name":"pruneMembers","description":"Prunes members from the guild based on how long they have been inactive.","examples":["// See how many members will be pruned\nguild.pruneMembers(12, true)\n  .then(pruned => console.log(`This will prune ${pruned} people!`))\n  .catch(console.error);","// Actually prune the members\nguild.pruneMembers(12)\n  .then(pruned => console.log(`I just pruned ${pruned} people!`))\n  .catch(console.error);"],"params":[{"name":"days","description":"Number of days of inactivity required to kick","type":[[["number"]]]},{"name":"dry","description":"If true, will return number of users that will be kicked, without actually doing it","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for this prune","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":1030,"file":"Guild.js","path":"src/structures"}},{"name":"sync","description":"Syncs this guild (already done automatically every 30 seconds).\n<warn>This is only available when using a user account.</warn>","deprecated":true,"meta":{"line":1040,"file":"Guild.js","path":"src/structures"}},{"name":"createChannel","description":"Creates a new channel in the guild.","examples":["// Create a new text channel\nguild.createChannel('new-general', { type: 'text' })\n  .then(console.log)\n  .catch(console.error);","// Create a new category channel with permission overwrites\nguild.createChannel('new-category', {\n  type: 'category',\n  permissionOverwrites: [{\n    id: guild.id,\n    deny: ['MANAGE_MESSAGES'],\n    allow: ['SEND_MESSAGES']\n  }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"name","description":"The name of the new channel","type":[[["string"]]]},{"name":"typeOrOptions","description":"The type of the new channel, one of `text`, `voice`, `category`, `news`, or `store`. **(deprecated, use options)**\nAlternatively options for the new channel, overriding the following parameters.","optional":true,"default":"'text'","type":[[["string"]],[["ChannelData"]]]},{"name":"permissionOverwrites","description":"Permission overwrites **(deprecated, use options)**","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"reason","description":"Reason for creating this channel **(deprecated, use options)**","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<("],["CategoryChannel","|"],["TextChannel","|"],["VoiceChannel",")>"]]],"meta":{"line":1084,"file":"Guild.js","path":"src/structures"}},{"name":"setChannelPositions","description":"Batch-updates the guild's channels' positions.","examples":["guild.updateChannels([{ channel: channelID, position: newChannelIndex }])\n  .then(g => console.log(`Updated channel positions for ${g}`))\n  .catch(console.error);"],"params":[{"name":"channelPositions","description":"Channel positions to update","type":[[["Array","<"],["ChannelPosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1117,"file":"Guild.js","path":"src/structures"}},{"name":"setEmbed","description":"Edits the guild's embed.","params":[{"name":"embed","description":"The embed for the guild","type":[[["GuildEmbedData"]]]},{"name":"reason","description":"Reason for changing the guild's embed","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1127,"file":"Guild.js","path":"src/structures"}},{"name":"createRole","description":"Creates a new role in the guild with given information.","examples":["// Create a new role\nguild.createRole()\n  .then(role => console.log(`Created new role with name ${role.name}`))\n  .catch(console.error);","// Create a new role with data\nguild.createRole({\n  name: 'Super Cool People',\n  color: 'BLUE',\n})\n  .then(role => console.log(`Created new role with name ${role.name} and color ${role.color}`))\n  .catch(console.error)"],"params":[{"name":"data","description":"The data to update the role with","optional":true,"type":[[["RoleData"]]]},{"name":"reason","description":"Reason for creating this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":1151,"file":"Guild.js","path":"src/structures"}},{"name":"createEmoji","description":"Creates a new custom emoji in the guild.","examples":["// Create a new emoji from a url\nguild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}`))\n  .catch(console.error);","// Create a new emoji from a file on your computer\nguild.createEmoji('./memes/banana.png', 'banana')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}`))\n  .catch(console.error);"],"params":[{"name":"attachment","description":"The image for the emoji","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"The name for the emoji","type":[[["string"]]]},{"name":"roles","description":"Roles to limit the emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["Role",">"]]]},{"name":"reason","description":"Reason for creating the emoji","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"},"meta":{"line":1173,"file":"Guild.js","path":"src/structures"}},{"name":"deleteEmoji","description":"Delete an emoji.","params":[{"name":"emoji","description":"The emoji to delete","type":[[["Emoji"]],[["string"]]]},{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":1189,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Causes the client to leave the guild.","examples":["// Leave a guild\nguild.leave()\n  .then(g => console.log(`Left the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1204,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Causes the client to delete the guild.","examples":["// Delete a guild\nguild.delete()\n  .then(g => console.log(`Deleted the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1217,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this guild equals another guild. It compares all properties, so for most operations\nit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"guild","description":"The guild to compare with","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":1228,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the guild's name instead of the guild object.","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${guild}!`);","// Logs: Hello from My Guild!\nconsole.log('Hello from ' + guild + '!');"],"returns":[[["string"]]],"meta":{"line":1265,"file":"Guild.js","path":"src/structures"}},{"name":"setRolePosition","description":"Set the position of a role in this guild.","params":[{"name":"role","description":"The role to edit, can be a role object or a role ID","type":[[["string"]],[["Role"]]]},{"name":"position","description":"The new position of the role","type":[[["number"]]]},{"name":"relative","description":"Position Moves the role relative to its current position","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1362,"file":"Guild.js","path":"src/structures"}},{"name":"setChannelPosition","description":"Set the position of a channel in this guild.","params":[{"name":"channel","description":"The channel to edit, can be a channel object or a channel ID","type":[[["string"]],[["GuildChannel"]]]},{"name":"position","description":"The new position of the channel","type":[[["number"]]]},{"name":"relative","description":"Position Moves the channel relative to its current position","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1386,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedChannels","description":"Fetches a collection of channels in the current guild sorted by position.","access":"private","params":[{"name":"type","description":"The channel type","type":[[["string"]]]}],"returns":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":1409,"file":"Guild.js","path":"src/structures"}},{"name":"_sortPositionWithID","description":"Sorts a collection by object position or ID if the positions are equivalent.\nIntended to be identical to Discord's sorting method.","access":"private","params":[{"name":"collection","description":"The collection to sort","type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":1424,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":18,"file":"Guild.js","path":"src/structures"}},{"name":"GuildAuditLogs","description":"Audit logs entries are held in this class.","props":[{"name":"webhooks","description":"Cached webhooks","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Webhook",">"]]],"meta":{"line":116,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"entries","description":"The entries for this guild's audit logs","type":[[["Collection","<"],["Snowflake",", "],["GuildAuditLogsEntry",">"]]],"meta":{"line":127,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Targets","description":"Key mirror of all available audit log targets.","scope":"static","type":[[["AuditLogTargetType"]]],"meta":{"line":19,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Actions","description":"All available actions keyed under their names to their numeric values.","scope":"static","type":[[["AuditLogAction"]]],"meta":{"line":68,"file":"GuildAuditLogs.js","path":"src/structures"}}],"methods":[{"name":"build","description":"Handles possible promises for entry targets.","scope":"static","returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":138,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"targetType","description":"Find target type from entry action.","scope":"static","params":[{"name":"target","description":"The action target","type":[[["number"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":160,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"Finds the action type from the entry action.","scope":"static","params":[{"name":"action","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogActionType"]]],"meta":{"line":187,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":107,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildAuditLogsEntry","description":"Audit logs entry.","props":[{"name":"targetType","description":"The target type of this entry","type":[[["AuditLogTargetType"]]],"meta":{"line":237,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"The action type of this entry","type":[[["AuditLogActionType"]]],"meta":{"line":243,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"action","description":"Specific action type of this entry in its string representation","type":[[["AuditLogAction"]]],"meta":{"line":249,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"reason","description":"The reason of this entry","nullable":true,"type":[[["string"]]],"meta":{"line":255,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"executor","description":"The user that executed this entry","type":[[["User"]]],"meta":{"line":261,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"changes","description":"Specific property changes","type":[[["Array","<"],["AuditLogChange",">"]]],"meta":{"line":275,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"id","description":"The ID of this entry","type":[[["Snowflake"]]],"meta":{"line":281,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"extra","description":"Any extra data from the entry","type":[[["Object"]],[["Role"]],[["GuildMember"]]],"meta":{"line":287,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"target","description":"The target of this entry","type":[[["AuditLogEntryTarget"]]],"meta":{"line":320,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp this entry was created at","readonly":true,"type":[[["number"]]],"meta":{"line":353,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdAt","description":"The time this entry was created","readonly":true,"type":[[["Date"]]],"meta":{"line":362,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":230,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a guild channel (i.e. text channels and voice channels).","extends":["Channel"],"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":72,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":483,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":497,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":513,"file":"GuildChannel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated the Channel","readonly":true,"type":[[["Client"]]],"meta":{"line":8,"file":"Channel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `group` - a Group DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `news` - a guild news channel\n* `store` - a guild store channel","type":[[["string"]]],"meta":{"line":27,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":33,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":43,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":51,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created","readonly":true,"type":[[["Date"]]],"meta":{"line":60,"file":"Channel.js","path":"src/structures"}}],"methods":[{"name":"memberPermissions","description":"Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.","params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":81,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","params":[{"name":"role","description":"The role that you want to obtain the overall permissions for","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":128,"file":"GuildChannel.js","path":"src/structures"}},{"name":"replacePermissionOverwrites","description":"Replaces the permission overwrites for a channel","examples":["channel.replacePermissionOverwrites({\noverwrites: [\n  {\n     id: message.author.id,\n     denied: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":180,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);","// Overwite permissions for a message author and reset some\nmessage.channel.overwritePermissions(message.author, {\n  VIEW_CHANNEL: false,\n  SEND_MESSAGES: null\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["Role"]],[["Snowflake"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":219,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":265,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":303,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the guild channel.","examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":318,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the guild channel.","examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":333,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Set a new parent for the guild channel.","examples":["// Sets the parent of a channel\nchannel.setParent('174674066072928256')\n  .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"parent","description":"The new parent for the guild channel","type":[[["CategoryChannel"]],[["SnowFlake"]]]},{"name":"reason","description":"Reason for changing the guild channel's parent","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":348,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the guild channel.","examples":["// Set a new channel topic\nchannel.setTopic('Needs more rate limiting')\n  .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":364,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this guild channel.\n<warn>This is only available when using a bot account.</warn>","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for creating the invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":385,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clone this channel.","examples":["// Clone a channel\nchannel.clone(undefined, true, false, 'Needed a clone')\n  .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Optional name for the new channel, otherwise it has the name of this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"withPermissions","description":"Whether to clone the channel with this channel's permission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":402,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":416,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete('Making room for new channels')\n  .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":449,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","examples":["// Logs: Hello from <#123456789012345678>\nconsole.log(`Hello from ${channel}`);","// Logs: Hello from <#123456789012345678>\nconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":13,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a member of a guild on Discord.","implements":["TextBasedChannel"],"props":[{"name":"client","description":"The client that instantiated this GuildMember","readonly":true,"type":[[["Client"]]],"meta":{"line":14,"file":"GuildMember.js","path":"src/structures"}},{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":26,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this member instance Represents","type":[[["User"]]],"meta":{"line":32,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp this member joined the guild at","type":[[["number"]]],"meta":{"line":38,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by this member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":47,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by this member in their guild, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":53,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleted","description":"Whether the member has been removed from the guild","type":[[["boolean"]]],"meta":{"line":59,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","type":[[["boolean"]]],"meta":{"line":67,"file":"GuildMember.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","type":[[["boolean"]]],"meta":{"line":73,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","type":[[["boolean"]]],"meta":{"line":79,"file":"GuildMember.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","type":[[["boolean"]]],"meta":{"line":85,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceSessionID","description":"The voice session ID of this member, if any","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":91,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannelID","description":"The voice channel ID of this member, if any","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":97,"file":"GuildMember.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is speaking and the client is in the same channel","type":[[["boolean"]]],"meta":{"line":103,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":109,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time this member joined the guild","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":122,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this member","readonly":true,"type":[[["Presence"]]],"meta":{"line":131,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A list of roles that are applied to this member, mapped by the role ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":140,"file":"GuildMember.js","path":"src/structures"}},{"name":"highestRole","description":"The role of this member with the highest position","readonly":true,"type":[[["Role"]]],"meta":{"line":159,"file":"GuildMember.js","path":"src/structures"}},{"name":"colorRole","description":"The role of this member used to set their color","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":168,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayColor","description":"The displayed color of this member in base 10","readonly":true,"type":[[["number"]]],"meta":{"line":179,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayHexColor","description":"The displayed color of this member in hexadecimal","readonly":true,"type":[[["string"]]],"meta":{"line":189,"file":"GuildMember.js","path":"src/structures"}},{"name":"hoistRole","description":"The role of this member used to hoist them in a separate category in the users list","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":199,"file":"GuildMember.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is muted in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":210,"file":"GuildMember.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is deafened in any way","readonly":true,"type":[[["boolean"]]],"meta":{"line":219,"file":"GuildMember.js","path":"src/structures"}},{"name":"voiceChannel","description":"The voice channel this member is in, if any","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":228,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this user","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":237,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayName","description":"The nickname of this member, or their username if they don't have one","readonly":true,"type":[[["string"]]],"meta":{"line":246,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for this member, taking only roles into account","readonly":true,"type":[[["Permissions"]]],"meta":{"line":255,"file":"GuildMember.js","path":"src/structures"}},{"name":"manageable","description":"Whether this member is manageable in terms of role hierarchy by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":270,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether this member is kickable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":281,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether this member is bannable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":290,"file":"GuildMember.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns permissions for this member in a guild channel,\ntaking into account roles and permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":300,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of this member's roles have a permission.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permission\n**(deprecated)**","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override\n(takes priority over `explicit`)","optional":true,"type":[[["boolean"]]]},{"name":"checkOwner","description":"Whether to allow being the guild's owner to override\n(takes priority over `explicit`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":317,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks whether the roles of this member allows them to perform specific actions.","deprecated":true,"params":[{"name":"permissions","description":"The permissions to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":331,"file":"GuildMember.js","path":"src/structures"}},{"name":"missingPermissions","description":"Checks whether the roles of this member allows them to perform specific actions, and lists any missing permissions.","params":[{"name":"permissions","description":"The permissions to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the member to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["PermissionResolvable"]]],"meta":{"line":342,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edits this member.","examples":["// Set a member's nickname and clear their roles\nmessage.member.edit({\n  nick: 'Cool Name',\n  roles: []\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildMemberEditData"]]]},{"name":"reason","description":"Reason for editing this user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":372,"file":"GuildMember.js","path":"src/structures"}},{"name":"setMute","description":"Mute/unmute this member.","examples":["// Mute a member with a reason\nmessage.member.setMute(true, 'It needed to be done')\n  .then(() => console.log(`Muted ${message.member.displayName}`)))\n  .catch(console.error);"],"params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]},{"name":"reason","description":"Reason for muting or unmuting","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":387,"file":"GuildMember.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafen/undeafen this member.","examples":["// Deafen a member\nmessage.member.setDeaf(true)\n  .then(() => console.log(`Deafened ${message.member.displayName}`))\n  .catch(console.error);"],"params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]},{"name":"reason","description":"Reason for deafening or undeafening","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":402,"file":"GuildMember.js","path":"src/structures"}},{"name":"setVoiceChannel","description":"Moves this member to the given channel.","examples":["// Moves a member to a voice channel\nmember.setVoiceChannel('174674066072928256')\n  .then(() => console.log(`Moved ${member.displayName}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Channel to move the member to, or `null` if you want to kick them from\nvoice","type":[[["ChannelResolvable"]],[["null"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":417,"file":"GuildMember.js","path":"src/structures"}},{"name":"setRoles","description":"Sets the roles applied to this member.","examples":["// Set the member's roles to a single role\nguildMember.setRoles(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all of the member's roles\nguildMember.setRoles([])\n  .then(member => console.log(`${member.displayName} now has ${member.roles.size} roles`))\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for applying the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":437,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRole","description":"Adds a single role to this member.","examples":["// Give a role to a member\nmessage.member.addRole('193654001089118208')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"role","description":"The role or ID of the role to add","type":[[["RoleResolvable"]]]},{"name":"reason","description":"Reason for adding the role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":452,"file":"GuildMember.js","path":"src/structures"}},{"name":"addRoles","description":"Adds multiple roles to this member.","examples":["// Gives a member a few roles\nmessage.member.addRoles(['193654001089118208', '369308579892690945'])\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to add","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for adding the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":469,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRole","description":"Removes a single role from this member.","examples":["// Remove a role from a member\nmessage.member.removeRole('193654001089118208')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"role","description":"The role or ID of the role to remove","type":[[["RoleResolvable"]]]},{"name":"reason","description":"Reason for removing the role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":491,"file":"GuildMember.js","path":"src/structures"}},{"name":"removeRoles","description":"Removes multiple roles from this member.","examples":["// Removes a few roles from the member\nmessage.member.removeRoles(['193654001089118208', '369308579892690945'])\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to remove","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for removing the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":508,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Set the nickname for this member.","examples":["// Update the member's nickname\nmessage.member.setNickname('Cool Name')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"nick","description":"The nickname for the guild member","type":[[["string"]]]},{"name":"reason","description":"Reason for setting the nickname","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":535,"file":"GuildMember.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":543,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this guild member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":551,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kick this member from the guild.","examples":["// Kick a member\nmember.kick()\n  .then(() => console.log(`Kicked ${member.displayName}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for kicking user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":565,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Ban this member.","examples":["// Ban a guild member\nmember.ban(7)\n  .then(() => console.log(`Banned ${member.displayName}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Ban options. If a number, the number of days to delete messages for, if a\nstring, the ban reason. Supplying an object allows you to do both.","optional":true,"type":[[["Object"]],[["number"]],[["string"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":582,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the user's mention instead of the Member object.","examples":["// Logs: Hello from <@123456789>!\nconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":593,"file":"GuildMember.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":12,"file":"GuildMember.js","path":"src/structures"}},{"name":"Collector","description":"Abstract class for defining a new Collector.","abstract":true,"props":[{"name":"client","description":"The client","readonly":true,"type":[[["Client"]]],"meta":{"line":26,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":38,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":44,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":50,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":56,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":63,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"listener","description":"Call this to handle an event as a collectable element\nAccepts any event data as parameters","access":"private","type":[[["function"]]],"meta":{"line":71,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Return a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":104,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"_handle","access":"private","emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":80,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stop this collector and emit the `end` event.","emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":136,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handle","description":"Handles incoming events from the `listener` function. Returns null if the event should not be collected,\nor returns an object describing the data that should be stored.","see":["Collector#listener"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[[["Object"]]],"description":"Data to insert into collection, if any","nullable":true},"meta":{"line":161,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"postCheck","description":"This method runs after collection to see if the collector should finish.","abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"cleanup","description":"Called when the collector is ending.","abstract":true,"meta":{"line":175,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"element","description":"The element that got collected","type":[["*"]]},{"name":"collector","description":"The collector","type":[[["Collector"]]]}],"meta":{"line":86,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":143,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":22,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"Invite","description":"Represents an invitation to a guild channel.\n<warn>The only guaranteed properties are `code`, `url`, `guild`, and `channel`.\nOther properties can be missing.</warn>","props":[{"name":"client","description":"The client that instantiated the invite","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Invite.js","path":"src/structures"}},{"name":"guild","description":"The guild the invite is for. If this guild is already known, this will be a guild object. If the guild is\nunknown, this will be a PartialGuild object","type":[[["Guild"]],[["PartialGuild"]]],"meta":{"line":29,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":35,"file":"Invite.js","path":"src/structures"}},{"name":"presenceCount","description":"The approximate number of online members of the guild this invite is for","type":[[["number"]]],"meta":{"line":41,"file":"Invite.js","path":"src/structures"}},{"name":"memberCount","description":"The approximate total number of members of the guild this invite is for","type":[[["number"]]],"meta":{"line":47,"file":"Invite.js","path":"src/structures"}},{"name":"textChannelCount","description":"The number of text channels the guild this invite goes to has","type":[[["number"]]],"meta":{"line":53,"file":"Invite.js","path":"src/structures"}},{"name":"voiceChannelCount","description":"The number of voice channels the guild this invite goes to has","type":[[["number"]]],"meta":{"line":59,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","type":[[["boolean"]]],"meta":{"line":65,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds","nullable":true,"type":[[["number"]]],"meta":{"line":71,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","type":[[["number"]]],"meta":{"line":77,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","type":[[["number"]]],"meta":{"line":83,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","nullable":true,"type":[[["User"]]],"meta":{"line":90,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The channel the invite is for. If this channel is already known, this will be a GuildChannel object.\nIf the channel is unknown, this will be a PartialGuildChannel object.","type":[[["GuildChannel"]],[["PartialGuildChannel"]]],"meta":{"line":98,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","type":[[["number"]]],"meta":{"line":104,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created","readonly":true,"type":[[["Date"]]],"meta":{"line":112,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"type":[[["number"]]],"meta":{"line":121,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire","readonly":true,"type":[[["Date"]]],"meta":{"line":130,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":139,"file":"Invite.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite.","params":[{"name":"reason","description":"Reason for deleting this invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":148,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","examples":["// Logs: Invite: https://discord.gg/A1b2C3\nconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":159,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":10,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a message on Discord.","props":[{"name":"client","description":"The client that instantiated the Message","readonly":true,"type":[[["Client"]]],"meta":{"line":18,"file":"Message.js","path":"src/structures"}},{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]],"meta":{"line":30,"file":"Message.js","path":"src/structures"}},{"name":"deleted","description":"Whether this message has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message","type":[[["Snowflake"]]],"meta":{"line":46,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["MessageType"]]],"meta":{"line":52,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":58,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","type":[[["User"]]],"meta":{"line":64,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the author of the message as a guild member\nOnly available if the message comes from a guild where the author is still a member","nullable":true,"type":[[["GuildMember"]]],"meta":{"line":71,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":77,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":83,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number or string used for checking message delivery","type":[[["string"]]],"meta":{"line":89,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":95,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":101,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["MessageAttachment",">"]]],"meta":{"line":107,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":114,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":120,"file":"Message.js","path":"src/structures"}},{"name":"reactions","description":"A collection of reactions to this message, mapped by the reaction ID","type":[[["Collection","<"],["Snowflake",", "],["MessageReaction",">"]]],"meta":{"line":126,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"All valid mentions that the message contains","type":[[["MessageMentions"]]],"meta":{"line":138,"file":"Message.js","path":"src/structures"}},{"name":"webhookID","description":"ID of the webhook that sent the message, if applicable","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":144,"file":"Message.js","path":"src/structures"}},{"name":"hit","description":"Whether this message is a hit in a search","nullable":true,"type":[[["boolean"]]],"meta":{"line":150,"file":"Message.js","path":"src/structures"}},{"name":"_edits","description":"The previous versions of the message, sorted with the most recent first","access":"private","type":[[["Array","<"],["Message",">"]]],"meta":{"line":157,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent","readonly":true,"type":[[["Date"]]],"meta":{"line":196,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":205,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":214,"file":"Message.js","path":"src/structures"}},{"name":"url","description":"The url to jump to the message","readonly":true,"type":[[["string"]]],"meta":{"line":223,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text.\nIf mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":233,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version\nSorted from latest (first) to oldest (last)","readonly":true,"type":[[["Array","<"],["Message",">"]]],"meta":{"line":316,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":327,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":336,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":347,"file":"Message.js","path":"src/structures"}}],"methods":[{"name":"patch","description":"Updates the message.","access":"private","params":[{"name":"data","description":"Raw Discord message update data","type":[[["Object"]]]}],"meta":{"line":165,"file":"Message.js","path":"src/structures"}},{"name":"createReactionCollector","description":"Creates a reaction collector.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\nconst collector = message.createReactionCollector(filter, { time: 15000 });\ncollector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to apply","type":[[["CollectorFilter"]]]},{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}],"returns":[[["ReactionCollector"]]],"meta":{"line":277,"file":"Message.js","path":"src/structures"}},{"name":"awaitReactions","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of reactions that pass the specified filter.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\nmessage.awaitReactions(filter, { time: 15000 })\n  .then(collected => console.log(`Collected ${collected.size} reactions`))\n  .catch(console.error);"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitReactionsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["MessageReaction",">>"]]],"meta":{"line":300,"file":"Message.js","path":"src/structures"}},{"name":"isMentioned","description":"Whether or not a user, channel or role is mentioned in this message.","params":[{"name":"data","description":"Either a guild channel, user or a role object, or a string representing\nthe ID of any of these","type":[[["GuildChannel"]],[["User"]],[["Role"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":358,"file":"Message.js","path":"src/structures"}},{"name":"isMemberMentioned","description":"Whether or not a guild member is mentioned in this message. Takes into account\nuser mentions, role mentions, and @everyone/@here mentions.","params":[{"name":"member","description":"The member/user to check for a mention of","type":[[["GuildMember"]],[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":369,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edit the content of the message.","examples":["// Update the content of a message\nmessage.edit('This is my new content!')\n  .then(msg => console.log(`New message content: ${msg}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageEditOptions"]],[["RichEmbed"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":396,"file":"Message.js","path":"src/structures"}},{"name":"editCode","description":"Edit the content of the message, with a code block.","deprecated":true,"params":[{"name":"lang","description":"The language for the code block","type":[[["string"]]]},{"name":"content","description":"The new content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":414,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":423,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":431,"file":"Message.js","path":"src/structures"}},{"name":"react","description":"Add a reaction to the message.","examples":["// React to a message with a unicode emoji\nmessage.react('🤔')\n  .then(console.log)\n  .catch(console.error);","// React to a message with a custom emoji\nmessage.react(message.guild.emojis.get('123456789012345678'))\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"emoji","description":"The emoji to react with","type":[[["string"]],[["Emoji"]],[["ReactionEmoji"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":450,"file":"Message.js","path":"src/structures"}},{"name":"clearReactions","description":"Remove all reactions from a message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":461,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message.","examples":["// Delete a message\nmessage.delete()\n  .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n  .catch(console.error);"],"params":[{"name":"timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":475,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Reply to the message.","examples":["// Reply to a message\nmessage.reply('Hey, I\\'m a reply!')\n  .then(sent => console.log(`Sent a reply to ${sent.author.username}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":498,"file":"Message.js","path":"src/structures"}},{"name":"acknowledge","description":"Marks the message as read.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":514,"file":"Message.js","path":"src/structures"}},{"name":"fetchWebhook","description":"Fetches the webhook used to create this message.","returns":[[["Promise","<?"],["Webhook",">"]]],"meta":{"line":522,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\nwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\nmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":535,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the message's content instead of the object.","examples":["// Logs: Message: This is a message!\nconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":564,"file":"Message.js","path":"src/structures"}}],"meta":{"line":16,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an attachment in a message.","props":[{"name":"client","description":"The client that instantiated this MessageAttachment","readonly":true,"type":[[["Client"]]],"meta":{"line":6,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"message","description":"The message this attachment is part of","type":[[["Message"]]],"meta":{"line":18,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["Snowflake"]]],"meta":{"line":28,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"filename","description":"The file name of this attachment","type":[[["string"]]],"meta":{"line":34,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"filesize","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":40,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":46,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":52,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":58,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image)","nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":4,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages on a channel.","extends":["Collector"],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel","type":[[["TextChannel"]],[["DMChannel"]],[["GroupDMChannel"]]]},{"name":"filter","description":"The filter to be applied to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to be applied to this collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel","type":[[["TextBasedChannel"]]],"meta":{"line":28,"file":"MessageCollector.js","path":"src/structures"}},{"name":"received","description":"Total number of messages that were received in the channel during message collection","type":[[["number"]]],"meta":{"line":34,"file":"MessageCollector.js","path":"src/structures"}},{"name":"client","description":"The client","readonly":true,"type":[[["Client"]]],"meta":{"line":26,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":38,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":44,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":50,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":56,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":63,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"listener","description":"Call this to handle an event as a collectable element\nAccepts any event data as parameters","access":"private","type":[[["function"]]],"meta":{"line":71,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Return a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":104,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"handle","description":"Handle an incoming message for possible collection.","access":"private","params":[{"name":"message","description":"The message that could be collected","type":[[["Message"]]]}],"returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":68,"file":"MessageCollector.js","path":"src/structures"}},{"name":"postCheck","description":"Check after collection to see if the collector is done.","access":"private","returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":82,"file":"MessageCollector.js","path":"src/structures"}},{"name":"cleanup","description":"Removes event listeners.","access":"private","meta":{"line":93,"file":"MessageCollector.js","path":"src/structures"}},{"name":"_handle","access":"private","inherits":"Collector#_handle","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":80,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stop this collector and emit the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":136,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"message","description":"Emitted when the collector receives a message.","deprecated":true,"params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"meta":{"line":43,"file":"MessageCollector.js","path":"src/structures"}},{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"element","description":"The element that got collected","type":[["*"]]},{"name":"collector","description":"The collector","type":[[["Collector"]]]}],"meta":{"line":86,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":143,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in a message (image/video preview, rich embed, etc.)\n<info>This class is only used for *received* embeds. If you wish to send one, use the {@link RichEmbed} class.</info>","props":[{"name":"client","description":"The client that instantiated this embed","readonly":true,"type":[[["Client"]]],"meta":{"line":7,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"message","description":"The message this embed is part of","type":[[["Message"]]],"meta":{"line":19,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"type","description":"The type of this embed","type":[[["string"]]],"meta":{"line":29,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","type":[[["string"]]],"meta":{"line":47,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"color","description":"The color of the embed","type":[[["number"]]],"meta":{"line":53,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"fields","description":"The fields of this embed","type":[[["Array","<"],["MessageEmbedField",">"]]],"meta":{"line":59,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of this embed","type":[[["number"]]],"meta":{"line":66,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed","nullable":true,"type":[[["MessageEmbedThumbnail"]]],"meta":{"line":72,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"image","description":"The image of this embed","nullable":true,"type":[[["MessageEmbedImage"]]],"meta":{"line":78,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"video","description":"The video of this embed","nullable":true,"type":[[["MessageEmbedVideo"]]],"meta":{"line":84,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed","nullable":true,"type":[[["MessageEmbedAuthor"]]],"meta":{"line":90,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed","nullable":true,"type":[[["MessageEmbedProvider"]]],"meta":{"line":96,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"footer","description":"The footer of this embed","nullable":true,"type":[[["MessageEmbedFooter"]]],"meta":{"line":102,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"createdAt","description":"The date this embed was created","readonly":true,"type":[[["Date"]]],"meta":{"line":110,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the embed color, with a leading hash","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":119,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":5,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedThumbnail","description":"Represents a thumbnail for a message embed.","props":[{"name":"embed","description":"The embed this thumbnail is part of","type":[[["MessageEmbed"]]],"meta":{"line":136,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL for this thumbnail","type":[[["string"]]],"meta":{"line":146,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL for this thumbnail","type":[[["string"]]],"meta":{"line":152,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"height","description":"The height of the thumbnail","type":[[["number"]]],"meta":{"line":158,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"width","description":"The width of the thumbnail","type":[[["number"]]],"meta":{"line":164,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":130,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedImage","description":"Represents an image for a message embed.","props":[{"name":"embed","description":"The embed this image is part of","type":[[["MessageEmbed"]]],"meta":{"line":177,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL for this image","type":[[["string"]]],"meta":{"line":187,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL for this image","type":[[["string"]]],"meta":{"line":193,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"height","description":"The height of the image","type":[[["number"]]],"meta":{"line":199,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"width","description":"The width of the image","type":[[["number"]]],"meta":{"line":205,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":171,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedVideo","description":"Represents a video for a message embed.","props":[{"name":"embed","description":"The embed this video is part of","type":[[["MessageEmbed"]]],"meta":{"line":218,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The source URL for this video","type":[[["string"]]],"meta":{"line":228,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"height","description":"The height of the video","type":[[["number"]]],"meta":{"line":234,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"width","description":"The width of the video","type":[[["number"]]],"meta":{"line":240,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":212,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedProvider","description":"Represents a provider for a message embed.","props":[{"name":"embed","description":"The embed this provider is part of","type":[[["MessageEmbed"]]],"meta":{"line":253,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this provider","type":[[["string"]]],"meta":{"line":263,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this provider","type":[[["string"]]],"meta":{"line":269,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":247,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedAuthor","description":"Represents an author for a message embed.","props":[{"name":"embed","description":"The embed this author is part of","type":[[["MessageEmbed"]]],"meta":{"line":282,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this author","type":[[["string"]]],"meta":{"line":292,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this author","type":[[["string"]]],"meta":{"line":298,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"iconURL","description":"The icon URL of this author","type":[[["string"]]],"meta":{"line":304,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":276,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedField","description":"Represents a field for a message embed.","props":[{"name":"embed","description":"The embed this footer is part of","type":[[["MessageEmbed"]]],"meta":{"line":317,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"name","description":"The name of this field","type":[[["string"]]],"meta":{"line":327,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"value","description":"The value of this field","type":[[["string"]]],"meta":{"line":333,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"inline","description":"If this field is displayed inline","type":[[["boolean"]]],"meta":{"line":339,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":311,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageEmbedFooter","description":"Represents the footer of a message embed.","props":[{"name":"embed","description":"The embed this footer is part of","type":[[["MessageEmbed"]]],"meta":{"line":352,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"text","description":"The text in this footer","type":[[["string"]]],"meta":{"line":362,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"iconURL","description":"The icon URL of this footer","type":[[["string"]]],"meta":{"line":368,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"proxyIconUrl","description":"The proxy icon URL of this footer","type":[[["string"]]],"meta":{"line":374,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":346,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageMentions","description":"Keeps track of mentions in a {@link Message}.","props":[{"name":"everyone","description":"Whether `@everyone` or `@here` were mentioned","type":[[["boolean"]]],"meta":{"line":12,"file":"MessageMentions.js","path":"src/structures"}},{"name":"users","description":"Any users that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":20,"file":"MessageMentions.js","path":"src/structures"}},{"name":"roles","description":"Any roles that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":39,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_content","description":"Content of the message","access":"private","type":[[["Message"]]],"meta":{"line":56,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_client","description":"The client the message is from","access":"private","type":[[["Client"]]],"meta":{"line":63,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_guild","description":"The guild the message is in","access":"private","nullable":true,"type":[[["Guild"]]],"meta":{"line":70,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_members","description":"Cached members for {@MessageMention#members}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":77,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_channels","description":"Cached channels for {@MessageMention#channels}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":84,"file":"MessageMentions.js","path":"src/structures"}},{"name":"members","description":"Any members that were mentioned (only in {@link TextChannel}s)","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":92,"file":"MessageMentions.js","path":"src/structures"}},{"name":"channels","description":"Any channels that were mentioned","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":108,"file":"MessageMentions.js","path":"src/structures"}},{"name":"EVERYONE_PATTERN","description":"Regular expression that globally matches `@everyone` and `@here`","scope":"static","type":[[["RegExp"]]],"meta":{"line":124,"file":"MessageMentions.js","path":"src/structures"}},{"name":"USERS_PATTERN","description":"Regular expression that globally matches user mentions like `<@81440962496172032>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":130,"file":"MessageMentions.js","path":"src/structures"}},{"name":"ROLES_PATTERN","description":"Regular expression that globally matches role mentions like `<@&297577916114403338>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":136,"file":"MessageMentions.js","path":"src/structures"}},{"name":"CHANNELS_PATTERN","description":"Regular expression that globally matches channel mentions like `<#222079895583457280>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":142,"file":"MessageMentions.js","path":"src/structures"}}],"meta":{"line":6,"file":"MessageMentions.js","path":"src/structures"}},{"name":"MessageReaction","description":"Represents a reaction to a message.","props":[{"name":"message","description":"The message that this reaction refers to","type":[[["Message"]]],"meta":{"line":14,"file":"MessageReaction.js","path":"src/structures"}},{"name":"me","description":"Whether the client has given this reaction","type":[[["boolean"]]],"meta":{"line":20,"file":"MessageReaction.js","path":"src/structures"}},{"name":"count","description":"The number of people that have given the same reaction","type":[[["number"]]],"meta":{"line":26,"file":"MessageReaction.js","path":"src/structures"}},{"name":"users","description":"The users that have given this reaction, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":32,"file":"MessageReaction.js","path":"src/structures"}},{"name":"emoji","description":"The emoji of this reaction, either an Emoji object for known custom emojis, or a ReactionEmoji\nobject which has fewer properties. Whatever the prototype of the emoji, it will still have\n`name`, `id`, `identifier` and `toString()`","readonly":true,"type":[[["Emoji"]],[["ReactionEmoji"]]],"meta":{"line":44,"file":"MessageReaction.js","path":"src/structures"}}],"methods":[{"name":"remove","description":"Removes a user from this reaction.","params":[{"name":"user","description":"The user to remove the reaction of","optional":true,"default":"this.message.client.user","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":63,"file":"MessageReaction.js","path":"src/structures"}},{"name":"fetchUsers","description":"Fetch all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.","params":[{"name":"limit","description":"The maximum amount of users to fetch, defaults to 100","optional":true,"default":100,"type":[[["number"]]]},{"name":"options","description":"Options to fetch users","optional":true,"type":[[["Object"]]]},{"name":"options.before","description":"Limit fetching users to those with an id lower than the supplied id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.after","description":"Limit fetching users to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]],"meta":{"line":80,"file":"MessageReaction.js","path":"src/structures"}}],"meta":{"line":8,"file":"MessageReaction.js","path":"src/structures"}},{"name":"NewsChannel","description":"Represents a guild news channel on Discord.","extends":["TextChannel"],"props":[{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel (always 0)","type":[[["number"]]],"meta":{"line":20,"file":"NewsChannel.js","path":"src/structures"}},{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":18,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":29,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the Discord considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":36,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":42,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":48,"file":"TextChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":383,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":392,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":402,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":411,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":72,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":483,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":497,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":513,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"fetchWebhooks","description":"Fetch all webhooks for the channel.","inherits":"TextChannel#fetchWebhooks","inherited":true,"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":81,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","inherits":"TextChannel#setNSFW","inherited":true,"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":91,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Create a webhook for the channel.","inherits":"TextChannel#createWebhook","inherited":true,"examples":["channel.createWebhook('Snek', 'https://i.imgur.com/mI8XcpG.jpg')\n  .then(webhook => console.log(`Created webhook ${webhook}`))\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"avatar","description":"The avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"reason","description":"Reason for creating this webhook","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":106,"file":"TextChannel.js","path":"src/structures"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","inherits":"TextChannel#setRateLimitPerUser","inherited":true,"params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":122,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","inherits":"TextChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.","inherits":"TextChannel#fetchMessage","inherited":true,"implements":["TextBasedChannel#fetchMessage"],"examples":["// Get message\nchannel.fetchMessage('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);"],"params":[{"name":"messageID","description":"ID of the message to get","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":193,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","inherits":"TextChannel#fetchMessages","inherited":true,"implements":["TextBasedChannel#fetchMessages"],"examples":["// Get messages\nchannel.fetchMessages({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.fetchMessages()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":235,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","inherits":"TextChannel#fetchPinnedMessages","inherited":true,"implements":["TextBasedChannel#fetchPinnedMessages"],"examples":["// Get pinned messages\nchannel.fetchPinnedMessages()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":258,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","inherits":"TextChannel#search","inherited":true,"implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'discord.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.messages[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n}).catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":320,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","inherits":"TextChannel#startTyping","inherited":true,"implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel\nchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":331,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","inherits":"TextChannel#stopTyping","inherited":true,"implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop in a channel\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":367,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createCollector","description":"Creates a Message Collector","inherits":"TextChannel#createCollector","inherited":true,"implements":["TextBasedChannel#createCollector"],"deprecated":true,"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":422,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","inherits":"TextChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":438,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\nfilter.","inherits":"TextChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":462,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk delete given messages that are newer than two weeks.\n<warn>This is only available when using a bot account.</warn>","inherits":"TextChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":488,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","inherits":"TextChannel#acknowledge","inherited":true,"implements":["TextBasedChannel#acknowledge"],"deprecated":true,"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":510,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","inherits":"TextChannel#sendMessage","inherited":true,"implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","inherits":"TextChannel#sendEmbed","inherited":true,"implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFiles","description":"Send files to this channel.","inherits":"TextChannel#sendFiles","inherited":true,"implements":["TextBasedChannel#sendFiles"],"deprecated":true,"params":[{"name":"files","description":"Files to send with the message","type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":568,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","inherits":"TextChannel#sendFile","inherited":true,"implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","inherits":"TextChannel#sendCode","inherited":true,"implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":81,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role that you want to obtain the overall permissions for","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":128,"file":"GuildChannel.js","path":"src/structures"}},{"name":"replacePermissionOverwrites","description":"Replaces the permission overwrites for a channel","inherits":"GuildChannel#replacePermissionOverwrites","inherited":true,"examples":["channel.replacePermissionOverwrites({\noverwrites: [\n  {\n     id: message.author.id,\n     denied: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":180,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);","// Overwite permissions for a message author and reset some\nmessage.channel.overwritePermissions(message.author, {\n  VIEW_CHANNEL: false,\n  SEND_MESSAGES: null\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["Role"]],[["Snowflake"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":219,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":265,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":303,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":318,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":333,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Set a new parent for the guild channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Sets the parent of a channel\nchannel.setParent('174674066072928256')\n  .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"parent","description":"The new parent for the guild channel","type":[[["CategoryChannel"]],[["SnowFlake"]]]},{"name":"reason","description":"Reason for changing the guild channel's parent","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":348,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('Needs more rate limiting')\n  .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":364,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this guild channel.\n<warn>This is only available when using a bot account.</warn>","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for creating the invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":385,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clone this channel.","inherits":"GuildChannel#clone","inherited":true,"examples":["// Clone a channel\nchannel.clone(undefined, true, false, 'Needed a clone')\n  .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Optional name for the new channel, otherwise it has the name of this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"withPermissions","description":"Whether to clone the channel with this channel's permission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":402,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":416,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('Making room for new channels')\n  .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":449,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>\nconsole.log(`Hello from ${channel}`);","// Logs: Hello from <#123456789012345678>\nconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":7,"file":"NewsChannel.js","path":"src/structures"}},{"name":"OAuth2Application","description":"Represents an OAuth2 Application.","props":[{"name":"client","description":"The client that instantiated the application","readonly":true,"type":[[["Client"]]],"meta":{"line":9,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"id","description":"The ID of the app","type":[[["Snowflake"]]],"meta":{"line":25,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"name","description":"The name of the app","type":[[["string"]]],"meta":{"line":31,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"description","description":"The app's description","type":[[["string"]]],"meta":{"line":37,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"icon","description":"The app's icon hash","nullable":true,"type":[[["string"]]],"meta":{"line":43,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"iconURL","description":"The app's icon URL","type":[[["string"]]],"meta":{"line":49,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"rpcOrigins","description":"The app's RPC origins","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"redirectURIs","description":"The app's redirect URIs","type":[[["Array","<"],["string",">"]]],"meta":{"line":61,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"botRequireCodeGrant","description":"If this app's bot requires a code grant when using the OAuth2 flow","type":[[["boolean"]]],"meta":{"line":67,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"botPublic","description":"If this app's bot is public","type":[[["boolean"]]],"meta":{"line":73,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"rpcApplicationState","description":"If this app can use rpc","type":[[["boolean"]]],"meta":{"line":79,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"bot","description":"Object containing basic info about this app's bot","type":[[["Object"]]],"meta":{"line":85,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"flags","description":"The flags for the app","type":[[["number"]]],"meta":{"line":91,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"secret","description":"OAuth2 secret for the application","type":[[["boolean"]]],"meta":{"line":97,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"owner","description":"The owner of this OAuth application","nullable":true,"type":[[["User"]]],"meta":{"line":104,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the app was created at","readonly":true,"type":[[["number"]]],"meta":{"line":113,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"createdAt","description":"The time the app was created","readonly":true,"type":[[["Date"]]],"meta":{"line":122,"file":"OAuth2Application.js","path":"src/structures"}}],"methods":[{"name":"reset","description":"Reset the app's secret and bot token.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["OAuth2Application"]]],"meta":{"line":132,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the app name rather than the app object.","returns":[[["string"]]],"meta":{"line":140,"file":"OAuth2Application.js","path":"src/structures"}}],"meta":{"line":7,"file":"OAuth2Application.js","path":"src/structures"}},{"name":"PartialGuild","description":"Represents a guild that the client only has limited information for - e.g. from invites.","props":[{"name":"client","description":"The client that instantiated this PartialGuild","readonly":true,"type":[[["Client"]]],"meta":{"line":13,"file":"PartialGuild.js","path":"src/structures"}},{"name":"id","description":"The ID of this guild","type":[[["Snowflake"]]],"meta":{"line":29,"file":"PartialGuild.js","path":"src/structures"}},{"name":"name","description":"The name of this guild","type":[[["string"]]],"meta":{"line":35,"file":"PartialGuild.js","path":"src/structures"}},{"name":"icon","description":"The hash of this guild's icon","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"PartialGuild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"PartialGuild.js","path":"src/structures"}}],"meta":{"line":11,"file":"PartialGuild.js","path":"src/structures"}},{"name":"PartialGuildChannel","description":"Represents a guild channel that the client only has limited information for - e.g. from invites.","props":[{"name":"client","description":"The client that instantiated this PartialGuildChannel","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"id","description":"The ID of this guild channel","type":[[["Snowflake"]]],"meta":{"line":28,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of this guild channel","type":[[["string"]]],"meta":{"line":34,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of this guild channel - `text` or `voice`","type":[[["string"]]],"meta":{"line":40,"file":"PartialGuildChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"PartialGuildChannel.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a role or member in a guild channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":8,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a user ID or a role ID","type":[[["Snowflake"]]],"meta":{"line":24,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["string"]]],"meta":{"line":30,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"deny","description":"The permissions that are denied for the user or role as a bitfield.","type":[[["number"]]],"meta":{"line":36,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"allow","description":"The permissions that are allowed for the user or role as a bitfield.","type":[[["number"]]],"meta":{"line":42,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"denied","description":"The permissions that are denied for the user or role.","deprecated":true,"type":[[["Permissions"]]],"meta":{"line":49,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"allowed","description":"The permissions that are allowed for the user or role.","deprecated":true,"type":[[["Permissions"]]],"meta":{"line":56,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Delete this Permission Overwrite.","params":[{"name":"reason","description":"Reason for deleting this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":64,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":6,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a user's presence.","props":[{"name":"status","description":"The status of this presence:","type":[[["PresenceStatus"]]],"meta":{"line":24,"file":"Presence.js","path":"src/structures"}},{"name":"game","description":"The game that the user is playing","nullable":true,"type":[[["Game"]]],"meta":{"line":30,"file":"Presence.js","path":"src/structures"}},{"name":"clientStatus","description":"The devices this presence is on","nullable":true,"type":[[["object"]]],"props":[{"name":"web","type":[[["PresenceStatus"]]]},{"name":"mobile","type":[[["PresenceStatus"]]]},{"name":"desktop","type":[[["PresenceStatus"]]]}],"meta":{"line":39,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another","params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":53,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":16,"file":"Presence.js","path":"src/structures"}},{"name":"Game","description":"Represents a game that is part of a user's presence.","props":[{"name":"name","description":"The name of the game being played","type":[[["string"]]],"meta":{"line":76,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the game status, its possible values:\n- 0: Playing\n- 1: Streaming\n- 2: Listening\n- 3: Watching","type":[[["number"]]],"meta":{"line":86,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the game is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":92,"file":"Presence.js","path":"src/structures"}},{"name":"details","description":"Details about the activity","nullable":true,"type":[[["string"]]],"meta":{"line":98,"file":"Presence.js","path":"src/structures"}},{"name":"state","description":"State of the activity","nullable":true,"type":[[["string"]]],"meta":{"line":104,"file":"Presence.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID associated with this activity","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":110,"file":"Presence.js","path":"src/structures"}},{"name":"timestamps","description":"Timestamps for the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"start","description":"When the activity started","nullable":true,"type":[[["Date"]]]},{"name":"end","description":"When the activity will end","nullable":true,"type":[[["Date"]]]}],"meta":{"line":118,"file":"Presence.js","path":"src/structures"}},{"name":"party","description":"Party of the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"id","description":"ID of the party","nullable":true,"type":[[["string"]]]},{"name":"size","description":"Size of the party as `[current, max]`","type":[[["Array","<"],["number",">"]]]}],"meta":{"line":129,"file":"Presence.js","path":"src/structures"}},{"name":"assets","description":"Assets for rich presence","nullable":true,"type":[[["RichPresenceAssets"]]],"meta":{"line":135,"file":"Presence.js","path":"src/structures"}},{"name":"streaming","description":"Whether or not the game is being streamed","readonly":true,"type":[[["boolean"]]],"meta":{"line":154,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the game's name instead of the Game object.","returns":[[["string"]]],"meta":{"line":162,"file":"Presence.js","path":"src/structures"}},{"name":"equals","description":"Whether this game is equal to another game","params":[{"name":"game","description":"The game to compare with","type":[[["Game"]]]}],"returns":[[["boolean"]]],"meta":{"line":171,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":68,"file":"Presence.js","path":"src/structures"}},{"name":"RichPresenceAssets","description":"Assets for a rich presence","props":[{"name":"largeText","description":"Hover text for the large image","nullable":true,"type":[[["string"]]],"meta":{"line":192,"file":"Presence.js","path":"src/structures"}},{"name":"smallText","description":"Hover text for the small image","nullable":true,"type":[[["string"]]],"meta":{"line":198,"file":"Presence.js","path":"src/structures"}},{"name":"largeImage","description":"ID of the large image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":204,"file":"Presence.js","path":"src/structures"}},{"name":"smallImage","description":"ID of the small image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":210,"file":"Presence.js","path":"src/structures"}},{"name":"smallImageURL","description":"The URL of the small image asset","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":218,"file":"Presence.js","path":"src/structures"}},{"name":"largeImageURL","description":"The URL of the large image asset","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":229,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":184,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollector","description":"Collects reactions on messages.","extends":["Collector"],"construct":{"name":"ReactionCollector","params":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]]},{"name":"filter","description":"The filter to apply to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}]},"props":[{"name":"message","description":"The message","type":[[["Message"]]],"meta":{"line":28,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"users","description":"The users which have reacted","type":[[["Collection"]]],"meta":{"line":34,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"total","description":"The total number of reactions collected","type":[[["number"]]],"meta":{"line":40,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"client","description":"The client","readonly":true,"type":[[["Client"]]],"meta":{"line":26,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":38,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":44,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":50,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":56,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":63,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"listener","description":"Call this to handle an event as a collectable element\nAccepts any event data as parameters","access":"private","type":[[["function"]]],"meta":{"line":71,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Return a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":104,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"handle","description":"Handle an incoming reaction for possible collection.","access":"private","params":[{"name":"reaction","description":"The reaction to possibly collect","type":[[["MessageReaction"]]]}],"returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":52,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"postCheck","description":"Check after collection to see if the collector is done.","access":"private","params":[{"name":"reaction","description":"The reaction that was collected","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that reacted","type":[[["User"]]]}],"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":67,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"cleanup","description":"Remove event listeners.","access":"private","meta":{"line":79,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"_handle","access":"private","inherits":"Collector#_handle","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":80,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stop this collector and emit the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":136,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"element","description":"The element that got collected","type":[["*"]]},{"name":"collector","description":"The collector","type":[[["Collector"]]]}],"meta":{"line":86,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":143,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":15,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"ReactionEmoji","description":"Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\nwill use this class opposed to the Emoji class when the client doesn't know enough\ninformation about them.","props":[{"name":"reaction","description":"The message reaction this emoji refers to","type":[[["MessageReaction"]]],"meta":{"line":12,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"name","description":"The name of this reaction emoji","type":[[["string"]]],"meta":{"line":18,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this reaction emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":24,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":32,"file":"ReactionEmoji.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"Creates the text required to form a graphical emoji on Discord.","examples":["// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used is ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":44,"file":"ReactionEmoji.js","path":"src/structures"}}],"meta":{"line":6,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"RichEmbed","description":"A rich embed to be sent with a message with a fluent interface for creation.","construct":{"name":"RichEmbed","params":[{"name":"data","description":"Data to set in the rich embed","optional":true,"type":[[["Object"]]]}]},"props":[{"name":"title","description":"Title for this Embed","type":[[["string"]]],"meta":{"line":15,"file":"RichEmbed.js","path":"src/structures"}},{"name":"description","description":"Description for this Embed","type":[[["string"]]],"meta":{"line":21,"file":"RichEmbed.js","path":"src/structures"}},{"name":"url","description":"URL for this Embed","type":[[["string"]]],"meta":{"line":27,"file":"RichEmbed.js","path":"src/structures"}},{"name":"color","description":"Color for this Embed","type":[[["number"]]],"meta":{"line":33,"file":"RichEmbed.js","path":"src/structures"}},{"name":"author","description":"Author for this Embed","type":[[["Object"]]],"meta":{"line":39,"file":"RichEmbed.js","path":"src/structures"}},{"name":"timestamp","description":"Timestamp for this Embed","type":[[["Date"]]],"meta":{"line":45,"file":"RichEmbed.js","path":"src/structures"}},{"name":"fields","description":"Fields for this Embed","type":[[["Array","<"],["Object",">"]]],"meta":{"line":51,"file":"RichEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"Thumbnail for this Embed","type":[[["Object"]]],"meta":{"line":57,"file":"RichEmbed.js","path":"src/structures"}},{"name":"image","description":"Image for this Embed","type":[[["Object"]]],"meta":{"line":63,"file":"RichEmbed.js","path":"src/structures"}},{"name":"footer","description":"Footer for this Embed","type":[[["Object"]]],"meta":{"line":69,"file":"RichEmbed.js","path":"src/structures"}},{"name":"file","description":"File to upload alongside this Embed","type":[[["FileOptions"]],[["string"]],[["Attachment"]]],"meta":{"line":75,"file":"RichEmbed.js","path":"src/structures"}},{"name":"files","description":"The files to upload alongside this Embed","type":[[["Array","<("],["FileOptions","|"],["string","|"],["Attachment",")>"]]],"meta":{"line":81,"file":"RichEmbed.js","path":"src/structures"}},{"name":"length","description":"The accumulated length for the embed title, description, fields, author and footer text","readonly":true,"type":[[["number"]]],"meta":{"line":244,"file":"RichEmbed.js","path":"src/structures"}}],"methods":[{"name":"setTitle","description":"Sets the title of this embed.","params":[{"name":"title","description":"The title","type":[[["StringResolvable"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":89,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setDescription","description":"Sets the description of this embed.","params":[{"name":"description","description":"The description","type":[[["StringResolvable"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":101,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setURL","description":"Sets the URL of this embed.","params":[{"name":"url","description":"The URL","type":[[["string"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":113,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setColor","description":"Sets the color of this embed.","params":[{"name":"color","description":"The color of the embed","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":123,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setAuthor","description":"Sets the author of this embed.","params":[{"name":"name","description":"The name of the author","type":[[["StringResolvable"]]]},{"name":"icon","description":"The icon URL of the author","optional":true,"type":[[["string"]]]},{"name":"url","description":"The URL of the author","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":136,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setTimestamp","description":"Sets the timestamp of this embed.","params":[{"name":"timestamp","description":"The timestamp or date","optional":true,"default":"Date.now()","type":[[["Date"]],[["number"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":146,"file":"RichEmbed.js","path":"src/structures"}},{"name":"addField","description":"Adds a field to the embed (max 25).","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":159,"file":"RichEmbed.js","path":"src/structures"}},{"name":"addBlankField","description":"Convenience function for `<RichEmbed>.addField('\\u200B', '\\u200B', inline)`.","params":[{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":176,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setThumbnail","description":"Set the thumbnail of this embed.","params":[{"name":"url","description":"The URL of the thumbnail","type":[[["string"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":185,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setImage","description":"Set the image of this embed.","params":[{"name":"url","description":"The URL of the image","type":[[["string"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":195,"file":"RichEmbed.js","path":"src/structures"}},{"name":"setFooter","description":"Sets the footer of this embed.","params":[{"name":"text","description":"The text of the footer","type":[[["StringResolvable"]]]},{"name":"icon","description":"The icon URL of the footer","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":206,"file":"RichEmbed.js","path":"src/structures"}},{"name":"attachFile","description":"Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\nsetting an embed image or author/footer icons. Only one file may be attached.","params":[{"name":"file","description":"Local path or URL to the file to attach,\nor valid FileOptions for a file to attach","type":[[["FileOptions"]],[["string"]],[["Attachment"]]]}],"returns":{"types":[[["RichEmbed"]]],"description":"This embed"},"meta":{"line":220,"file":"RichEmbed.js","path":"src/structures"}},{"name":"attachFiles","description":"Sets the files to upload alongside the embed. A file can be accessed via `attachment://fileName.extension` when\nsetting an embed image or author/footer icons. Multiple files can be attached.","params":[{"name":"files","description":"Files to attach","type":[[["Array","<("],["FileOptions","|"],["string","|"],["Attachment",")>"]]]}],"returns":[[["RichEmbed"]]],"meta":{"line":233,"file":"RichEmbed.js","path":"src/structures"}},{"name":"_apiTransform","description":"Transforms the embed object to be processed.","access":"private","returns":{"types":[[["Object"]]],"description":"The raw data of this embed"},"meta":{"line":259,"file":"RichEmbed.js","path":"src/structures"}}],"meta":{"line":9,"file":"RichEmbed.js","path":"src/structures"}},{"name":"Role","description":"Represents a role on Discord.","props":[{"name":"client","description":"The client that instantiated the role","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Role.js","path":"src/structures"}},{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":22,"file":"Role.js","path":"src/structures"}},{"name":"deleted","description":"Whether the role has been deleted","type":[[["boolean"]]],"meta":{"line":28,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["Snowflake"]]],"meta":{"line":38,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":44,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":50,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":56,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role from the API","type":[[["number"]]],"meta":{"line":62,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The permissions bitfield of the role","type":[[["number"]]],"meta":{"line":68,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":74,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":80,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":88,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created","readonly":true,"type":[[["Date"]]],"meta":{"line":97,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":106,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":117,"file":"Role.js","path":"src/structures"}},{"name":"editable","description":"Whether the role is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":126,"file":"Role.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the role in the role manager","readonly":true,"type":[[["number"]]],"meta":{"line":138,"file":"Role.js","path":"src/structures"}}],"methods":[{"name":"serialize","description":"Get an object mapping permission names to whether or not the role enables that permission.","examples":["// Print the serialized role permissions\nconsole.log(role.serialize());"],"returns":[[["Object","<"],["string",", "],["boolean",">"]]],"meta":{"line":150,"file":"Role.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if the role has a permission.","examples":["// See if a role can ban a member\nif (role.hasPermission('BAN_MEMBERS')) {\n  console.log('This role can ban members');\n} else {\n  console.log('This role can\\'t ban members');\n}"],"params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permission\n**(deprecated)**","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override\n(takes priority over `explicit`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":170,"file":"Role.js","path":"src/structures"}},{"name":"hasPermissions","description":"Checks if the role has all specified permissions.","deprecated":true,"params":[{"name":"permissions","description":"The permissions to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the role to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":183,"file":"Role.js","path":"src/structures"}},{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if this role's position is lower (other role's is higher),\npositive number if this one is higher (other's is lower), 0 if equal"},"meta":{"line":193,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role.","examples":["// Edit name of a role\nrole.edit({ name: 'New Name' })\n  .then(updated => console.log(`Edited role name from ${role.name} to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]},{"name":"reason","description":"The reason for editing this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":219,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the role.","examples":["// Set the name of the role\nrole.setName('New Name')\n  .then(updated => console.log(`Edited role name from ${role.name} to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":234,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Set a new color for the role.","examples":["// Set the color of a role\nrole.setColor('#FF0000')\n  .then(updated => console.log(`Set color of role to ${role.color}`))\n  .catch(console.error);"],"params":[{"name":"color","description":"The color of the role","type":[[["ColorResolvable"]]]},{"name":"reason","description":"Reason for changing the role's color","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":249,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Set whether or not the role should be hoisted.","examples":["// Set the hoist of the role\nrole.setHoist(true)\n  .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n  .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not the role should be hoisted","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":264,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Set the position of the role.","examples":["// Set the position of the role\nrole.setPosition(1)\n  .then(updated => console.log(`Role position: ${updated.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":279,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Set the permissions of the role.","examples":["// Set the permissions of the role\nrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);","// Remove all permissions from a role\nrole.setPermissions(0)\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["PermissionResolvable"]]]},{"name":"reason","description":"Reason for changing the role's permissions","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":299,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Set whether this role is mentionable.","examples":["// Make the role mentionable\nrole.setMentionable(true, 'Role needs to be pinged')\n  .then(updated => console.log(`Role mentionable: ${updated.mentionable}`))\n  .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not this role should be mentionable","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":314,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role.","examples":["// Delete a role\nrole.delete('The role needed to go')\n  .then(deleted => console.log(`Deleted role ${deleted.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting the role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":328,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\nit is advisable to just compare `role.id === role2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"role","description":"Role to compare with","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":339,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the role mention rather than the Role object.","returns":[[["string"]]],"meta":{"line":354,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\npositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":366,"file":"Role.js","path":"src/structures"}}],"meta":{"line":8,"file":"Role.js","path":"src/structures"}},{"name":"StoreChannel","description":"Represents a guild store channel on Discord.","extends":["GuildChannel"],"props":[{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":21,"file":"StoreChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":72,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":483,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":497,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":513,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"memberPermissions","description":"Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":81,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role that you want to obtain the overall permissions for","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":128,"file":"GuildChannel.js","path":"src/structures"}},{"name":"replacePermissionOverwrites","description":"Replaces the permission overwrites for a channel","inherits":"GuildChannel#replacePermissionOverwrites","inherited":true,"examples":["channel.replacePermissionOverwrites({\noverwrites: [\n  {\n     id: message.author.id,\n     denied: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":180,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);","// Overwite permissions for a message author and reset some\nmessage.channel.overwritePermissions(message.author, {\n  VIEW_CHANNEL: false,\n  SEND_MESSAGES: null\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["Role"]],[["Snowflake"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":219,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":265,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":303,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":318,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":333,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Set a new parent for the guild channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Sets the parent of a channel\nchannel.setParent('174674066072928256')\n  .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"parent","description":"The new parent for the guild channel","type":[[["CategoryChannel"]],[["SnowFlake"]]]},{"name":"reason","description":"Reason for changing the guild channel's parent","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":348,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('Needs more rate limiting')\n  .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":364,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this guild channel.\n<warn>This is only available when using a bot account.</warn>","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for creating the invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":385,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clone this channel.","inherits":"GuildChannel#clone","inherited":true,"examples":["// Clone a channel\nchannel.clone(undefined, true, false, 'Needed a clone')\n  .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Optional name for the new channel, otherwise it has the name of this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"withPermissions","description":"Whether to clone the channel with this channel's permission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":402,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":416,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('Making room for new channels')\n  .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":449,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>\nconsole.log(`Hello from ${channel}`);","// Logs: Hello from <#123456789012345678>\nconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":7,"file":"StoreChannel.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a guild text channel on Discord.","extends":["GuildChannel"],"implements":["TextBasedChannel"],"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":18,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":29,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the Discord considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":36,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":42,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":48,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":54,"file":"TextChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":383,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":392,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":402,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":411,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":72,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":483,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":497,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":513,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"fetchWebhooks","description":"Fetch all webhooks for the channel.","examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":81,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":91,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Create a webhook for the channel.","examples":["channel.createWebhook('Snek', 'https://i.imgur.com/mI8XcpG.jpg')\n  .then(webhook => console.log(`Created webhook ${webhook}`))\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"avatar","description":"The avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"reason","description":"Reason for creating this webhook","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":106,"file":"TextChannel.js","path":"src/structures"}},{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":122,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.","implements":["TextBasedChannel#fetchMessage"],"examples":["// Get message\nchannel.fetchMessage('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);"],"params":[{"name":"messageID","description":"ID of the message to get","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":193,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","implements":["TextBasedChannel#fetchMessages"],"examples":["// Get messages\nchannel.fetchMessages({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.fetchMessages()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":235,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","implements":["TextBasedChannel#fetchPinnedMessages"],"examples":["// Get pinned messages\nchannel.fetchPinnedMessages()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":258,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#search"],"examples":["channel.search({\n  content: 'discord.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.messages[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n}).catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":320,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel\nchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":331,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop in a channel\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":367,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createCollector","description":"Creates a Message Collector","implements":["TextBasedChannel#createCollector"],"deprecated":true,"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":422,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":438,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\nfilter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":462,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk delete given messages that are newer than two weeks.\n<warn>This is only available when using a bot account.</warn>","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":488,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","implements":["TextBasedChannel#acknowledge"],"deprecated":true,"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":510,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFiles","description":"Send files to this channel.","implements":["TextBasedChannel#sendFiles"],"deprecated":true,"params":[{"name":"files","description":"Files to send with the message","type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":568,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":81,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role that you want to obtain the overall permissions for","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":128,"file":"GuildChannel.js","path":"src/structures"}},{"name":"replacePermissionOverwrites","description":"Replaces the permission overwrites for a channel","inherits":"GuildChannel#replacePermissionOverwrites","inherited":true,"examples":["channel.replacePermissionOverwrites({\noverwrites: [\n  {\n     id: message.author.id,\n     denied: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":180,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);","// Overwite permissions for a message author and reset some\nmessage.channel.overwritePermissions(message.author, {\n  VIEW_CHANNEL: false,\n  SEND_MESSAGES: null\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["Role"]],[["Snowflake"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":219,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":265,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":303,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":318,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":333,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Set a new parent for the guild channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Sets the parent of a channel\nchannel.setParent('174674066072928256')\n  .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"parent","description":"The new parent for the guild channel","type":[[["CategoryChannel"]],[["SnowFlake"]]]},{"name":"reason","description":"Reason for changing the guild channel's parent","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":348,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('Needs more rate limiting')\n  .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":364,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this guild channel.\n<warn>This is only available when using a bot account.</warn>","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for creating the invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":385,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clone this channel.","inherits":"GuildChannel#clone","inherited":true,"examples":["// Clone a channel\nchannel.clone(undefined, true, false, 'Needed a clone')\n  .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Optional name for the new channel, otherwise it has the name of this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"withPermissions","description":"Whether to clone the channel with this channel's permission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":402,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":416,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('Making room for new channels')\n  .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":449,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>\nconsole.log(`Hello from ${channel}`);","// Logs: Hello from <#123456789012345678>\nconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":10,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","implements":["TextBasedChannel"],"props":[{"name":"client","description":"The client that created the instance of the user","readonly":true,"type":[[["Client"]]],"meta":{"line":13,"file":"User.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":29,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":35,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":41,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","type":[[["string"]]],"meta":{"line":47,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":53,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":59,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","nullable":true,"type":[[["Message"]]],"meta":{"line":65,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":80,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created","readonly":true,"type":[[["Date"]]],"meta":{"line":89,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":98,"file":"User.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":111,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":121,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one. Otherwise a link to their default avatar will be returned","readonly":true,"type":[[["string"]]],"meta":{"line":132,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":141,"file":"User.js","path":"src/structures"}},{"name":"note","description":"The note that is set for the user\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["string"]]],"meta":{"line":152,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":191,"file":"User.js","path":"src/structures"}}],"methods":[{"name":"typingIn","description":"Check whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":161,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Get the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":171,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":181,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":199,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":207,"file":"User.js","path":"src/structures"}},{"name":"addFriend","description":"Sends a friend request to the user.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":217,"file":"User.js","path":"src/structures"}},{"name":"removeFriend","description":"Removes the user from your friends.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":227,"file":"User.js","path":"src/structures"}},{"name":"block","description":"Blocks the user.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":237,"file":"User.js","path":"src/structures"}},{"name":"unblock","description":"Unblocks the user.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":247,"file":"User.js","path":"src/structures"}},{"name":"fetchProfile","description":"Get the profile of the user.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<"],["UserProfile",">"]]],"meta":{"line":257,"file":"User.js","path":"src/structures"}},{"name":"setNote","description":"Sets a note for the user.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"params":[{"name":"note","description":"The note to set for the user","type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":268,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":278,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the user's mention instead of the User object.","examples":["// logs: Hello from <@123456789>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":296,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Send a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","implements":["TextBasedChannel#sendMessage"],"examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","implements":["TextBasedChannel#sendEmbed"],"deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","implements":["TextBasedChannel#sendFile"],"deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","implements":["TextBasedChannel#sendCode"],"deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":11,"file":"User.js","path":"src/structures"}},{"name":"UserConnection","description":"Represents a user connection (or \"platform identity\").","props":[{"name":"user","description":"The user that owns the connection","type":[[["User"]]],"meta":{"line":10,"file":"UserConnection.js","path":"src/structures"}},{"name":"type","description":"The type of the connection","type":[[["string"]]],"meta":{"line":20,"file":"UserConnection.js","path":"src/structures"}},{"name":"name","description":"The username of the connection account","type":[[["string"]]],"meta":{"line":26,"file":"UserConnection.js","path":"src/structures"}},{"name":"id","description":"The id of the connection account","type":[[["string"]]],"meta":{"line":32,"file":"UserConnection.js","path":"src/structures"}},{"name":"revoked","description":"Whether the connection is revoked","type":[[["boolean"]]],"meta":{"line":38,"file":"UserConnection.js","path":"src/structures"}},{"name":"integrations","description":"Partial server integrations (not yet implemented)","type":[[["Array","<"],["Object",">"]]],"meta":{"line":44,"file":"UserConnection.js","path":"src/structures"}}],"meta":{"line":4,"file":"UserConnection.js","path":"src/structures"}},{"name":"UserProfile","description":"Represents a user's profile on Discord.","props":[{"name":"user","description":"The owner of the profile","type":[[["User"]]],"meta":{"line":13,"file":"UserProfile.js","path":"src/structures"}},{"name":"client","description":"The client that created the instance of the UserProfile","readonly":true,"type":[[["Client"]]],"meta":{"line":15,"file":"UserProfile.js","path":"src/structures"}},{"name":"mutualGuilds","description":"The guilds that the client user and the user share","type":[[["Collection","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":27,"file":"UserProfile.js","path":"src/structures"}},{"name":"connections","description":"The user's connections","type":[[["Collection","<"],["Snowflake",", "],["UserConnection",">"]]],"meta":{"line":33,"file":"UserProfile.js","path":"src/structures"}},{"name":"premium","description":"If the user has Discord Premium","type":[[["boolean"]]],"meta":{"line":43,"file":"UserProfile.js","path":"src/structures"}},{"name":"premiumSince","description":"The date since which the user has had Discord Premium","nullable":true,"type":[[["Date"]]],"meta":{"line":49,"file":"UserProfile.js","path":"src/structures"}}],"meta":{"line":7,"file":"UserProfile.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a guild voice channel on Discord.","extends":["GuildChannel"],"props":[{"name":"members","description":"The members in this voice channel","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":17,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":29,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":35,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"connection","description":"The voice connection for this voice channel, if the client is connected","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":43,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"full","description":"Checks if the voice channel is full","readonly":true,"type":[[["boolean"]]],"meta":{"line":54,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":63,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Checks if the client has permission join the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":72,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":84,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":31,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel in the list","type":[[["number"]]],"meta":{"line":37,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":43,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":49,"file":"GuildChannel.js","path":"src/structures"}},{"name":"calculatedPosition","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":72,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":483,"file":"GuildChannel.js","path":"src/structures"}},{"name":"muted","description":"Whether the channel is muted\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["boolean"]]],"meta":{"line":497,"file":"GuildChannel.js","path":"src/structures"}},{"name":"messageNotifications","description":"The type of message that should notify you\n<warn>This is only available when using a user account.</warn>","readonly":true,"nullable":true,"deprecated":true,"type":[[["MessageNotificationType"]]],"meta":{"line":513,"file":"GuildChannel.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel (in kbps).","examples":["// Set the bitrate of a voice channel\nvoiceChannel.setBitrate(48)\n  .then(vc => console.log(`Set bitrate to ${vc.bitrate}kbps for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":99,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","examples":["// Set the user limit of a voice channel\nvoiceChannel.setUserLimit(42)\n  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":115,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this voice channel.","examples":["// Join a voice channel\nvoiceChannel.join()\n  .then(connection => console.log('Connected!'))\n  .catch(console.error);"],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":128,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel.","examples":["// Leave a voice channel\nvoiceChannel.leave();"],"meta":{"line":139,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a user in this channel, taking into account channel overwrites.","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The user that you want to obtain the overall permissions for","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":81,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role that you want to obtain the overall permissions for","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":109,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Get the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Permissions"]]],"nullable":true},"meta":{"line":128,"file":"GuildChannel.js","path":"src/structures"}},{"name":"replacePermissionOverwrites","description":"Replaces the permission overwrites for a channel","inherits":"GuildChannel#replacePermissionOverwrites","inherited":true,"examples":["channel.replacePermissionOverwrites({\noverwrites: [\n  {\n     id: message.author.id,\n     denied: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.overwrites","description":"Permission overwrites","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":180,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Overwrites the permissions for a user or role in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["// Overwrite permissions for a message author\nmessage.channel.overwritePermissions(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);","// Overwite permissions for a message author and reset some\nmessage.channel.overwritePermissions(message.author, {\n  VIEW_CHANNEL: false,\n  SEND_MESSAGES: null\n})\n  .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["Role"]],[["Snowflake"]],[["UserResolvable"]]]},{"name":"options","description":"The configuration for the update","type":[[["PermissionOverwriteOptions"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":219,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":265,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":303,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Set a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":318,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Set a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"relative","description":"Move the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":333,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Set a new parent for the guild channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Sets the parent of a channel\nchannel.setParent('174674066072928256')\n  .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n  .catch(console.error);"],"params":[{"name":"parent","description":"The new parent for the guild channel","type":[[["CategoryChannel"]],[["SnowFlake"]]]},{"name":"reason","description":"Reason for changing the guild channel's parent","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":348,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Set a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('Needs more rate limiting')\n  .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":364,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Create an invite to this guild channel.\n<warn>This is only available when using a bot account.</warn>","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for creating the invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":385,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clone this channel.","inherits":"GuildChannel#clone","inherited":true,"examples":["// Clone a channel\nchannel.clone(undefined, true, false, 'Needed a clone')\n  .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Optional name for the new channel, otherwise it has the name of this channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"withPermissions","description":"Whether to clone the channel with this channel's permission overwrites","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"withTopic","description":"Whether to clone the channel with this channel's topic","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":402,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":416,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('Making room for new channels')\n  .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":439,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":449,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"GuildChannel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>\nconsole.log(`Hello from ${channel}`);","// Logs: Hello from <#123456789012345678>\nconsole.log('Hello from ' + channel);"],"returns":[[["string"]]],"meta":{"line":532,"file":"GuildChannel.js","path":"src/structures"}}],"meta":{"line":9,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"VoiceRegion","description":"Represents a Discord voice region for guilds.","props":[{"name":"id","description":"The ID of the region","type":[[["string"]]],"meta":{"line":10,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"name","description":"Name of the region","type":[[["string"]]],"meta":{"line":16,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"vip","description":"Whether the region is VIP-only","type":[[["boolean"]]],"meta":{"line":22,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"deprecated","description":"Whether the region is deprecated","type":[[["boolean"]]],"meta":{"line":28,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"optimal","description":"Whether the region is optimal","type":[[["boolean"]]],"meta":{"line":34,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"custom","description":"Whether the region is custom","type":[[["boolean"]]],"meta":{"line":40,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"sampleHostname","description":"A sample hostname for what a connection might look like","type":[[["string"]]],"meta":{"line":46,"file":"VoiceRegion.js","path":"src/structures"}}],"meta":{"line":4,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a webhook.","props":[{"name":"client","description":"The client that instantiated the webhook","readonly":true,"type":[[["Client"]]],"meta":{"line":14,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the webhook","type":[[["string"]]],"meta":{"line":34,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the webhook","type":[[["string"]]],"meta":{"line":36,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":47,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":53,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":59,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":65,"file":"Webhook.js","path":"src/structures"}},{"name":"owner","description":"The owner of the webhook","type":[[["User"]],[["Object"]]],"meta":{"line":72,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Send a message with this webhook.","examples":["// Send a basic message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nwebhook.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nwebhook.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nwebhook.send('This is an embed', {\n  embeds: [{\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   }],\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["WebhookMessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">|"],["Object","|"],["Array","<"],["Object",">)>"]]],"meta":{"line":140,"file":"Webhook.js","path":"src/structures"}},{"name":"sendMessage","description":"Send a message with this webhook","examples":["// Send a message\nwebhook.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"The content to send","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":229,"file":"Webhook.js","path":"src/structures"}},{"name":"sendFile","description":"Send a file with this webhook.","deprecated":true,"params":[{"name":"attachment","description":"The file to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"The name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text message to send with the attachment","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":242,"file":"Webhook.js","path":"src/structures"}},{"name":"sendCode","description":"Send a code block with this webhook.","deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"The options to provide","type":[[["WebhookMessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":254,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Send a raw slack message with this webhook.","examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":275,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edit the webhook.","params":[{"name":"name","description":"The new name for the webhook","type":[[["string"]]]},{"name":"avatar","description":"The new avatar for the webhook","optional":true,"type":[[["BufferResolvable"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":285,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Delete the webhook.","params":[{"name":"reason","description":"Reason for deleting the webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":299,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":10,"file":"Webhook.js","path":"src/structures"}},{"name":"Collection","description":"A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\nan ID, for significantly improved performance and ease-of-use.","extends":["Map"],"props":[{"name":"_array","description":"Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":12,"file":"Collection.js","path":"src/util"}},{"name":"_keyArray","description":"Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called","access":"private","nullable":true,"type":[[["Array"]]],"meta":{"line":20,"file":"Collection.js","path":"src/util"}}],"methods":[{"name":"array","description":"Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behavior, use `[...collection.values()]` or\n`Array.from(collection.values())` instead.","returns":[[["Array"]]],"meta":{"line":48,"file":"Collection.js","path":"src/util"}},{"name":"keyArray","description":"Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behavior, use `[...collection.keys()]` or\n`Array.from(collection.keys())` instead.","returns":[[["Array"]]],"meta":{"line":60,"file":"Collection.js","path":"src/util"}},{"name":"first","description":"Obtains the first value(s) in this collection.","params":[{"name":"count","description":"Number of values to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":70,"file":"Collection.js","path":"src/util"}},{"name":"firstKey","description":"Obtains the first key(s) in this collection.","params":[{"name":"count","description":"Number of keys to obtain from the beginning","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":86,"file":"Collection.js","path":"src/util"}},{"name":"last","description":"Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","params":[{"name":"count","description":"Number of values to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":103,"file":"Collection.js","path":"src/util"}},{"name":"lastKey","description":"Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","params":[{"name":"count","description":"Number of keys to obtain from the end","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":117,"file":"Collection.js","path":"src/util"}},{"name":"random","description":"Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.","params":[{"name":"count","description":"Number of values to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single value if `count` is undefined, or an array of values of `count` length"},"meta":{"line":131,"file":"Collection.js","path":"src/util"}},{"name":"randomKey","description":"Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.","params":[{"name":"count","description":"Number of keys to obtain randomly","optional":true,"type":[[["number"]]]}],"returns":{"types":[["*"],[["Array","<"],["*",">"]]],"description":"The single key if `count` is undefined, or an array of keys of `count` length"},"meta":{"line":149,"file":"Collection.js","path":"src/util"}},{"name":"findAll","description":"Searches for all items where their specified property's value is identical to the given value\n(`item[prop] === value`).","examples":["collection.findAll('username', 'Bob');"],"deprecated":true,"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":171,"file":"Collection.js","path":"src/util"}},{"name":"find","description":"Searches for a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n<warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\nshould use the `get` method. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>","examples":["collection.find('username', 'Bob');","collection.find(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":196,"file":"Collection.js","path":"src/util"}},{"name":"findKey","description":"Searches for the key of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n[Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).","examples":["collection.findKey('username', 'Bob');","collection.findKey(val => val.username === 'Bob');"],"params":[{"name":"propOrFn","description":"The property to test against, or the function to test with","type":[[["string"]],[["function"]]]},{"name":"value","description":"The expected value - only applicable and required if using a property for the first argument","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":226,"file":"Collection.js","path":"src/util"}},{"name":"exists","description":"Searches for the existence of a single item where its specified property's value is identical to the given value\n(`item[prop] === value`).\n<warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>","examples":["if (collection.exists('username', 'Bob')) {\n console.log('user here!');\n}"],"deprecated":true,"params":[{"name":"prop","description":"The property to test against","type":[[["string"]]]},{"name":"value","description":"The expected value","type":[["*"]]}],"returns":[[["boolean"]]],"meta":{"line":258,"file":"Collection.js","path":"src/util"}},{"name":"sweep","description":"Removes entries that satisfy the provided filter function.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":{"types":[[["number"]]],"description":"The number of removed entries"},"meta":{"line":268,"file":"Collection.js","path":"src/util"}},{"name":"filter","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\nbut returns a Collection instead of an Array.","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Collection"]]],"meta":{"line":285,"file":"Collection.js","path":"src/util"}},{"name":"filterArray","description":"Identical to\n[Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).","deprecated":true,"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["Array"]]],"meta":{"line":302,"file":"Collection.js","path":"src/util"}},{"name":"partition","description":"Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.","examples":["const [big, small] = collection.partition(guild => guild.memberCount > 250);"],"params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array","<"],["Collection",">"]]],"meta":{"line":319,"file":"Collection.js","path":"src/util"}},{"name":"map","description":"Identical to\n[Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).","params":[{"name":"fn","description":"Function that produces an element of the new array, taking three arguments","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Array"]]],"meta":{"line":339,"file":"Collection.js","path":"src/util"}},{"name":"some","description":"Identical to\n[Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":354,"file":"Collection.js","path":"src/util"}},{"name":"every","description":"Identical to\n[Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).","params":[{"name":"fn","description":"Function used to test (should return a boolean)","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":369,"file":"Collection.js","path":"src/util"}},{"name":"reduce","description":"Identical to\n[Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).","params":[{"name":"fn","description":"Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\nand `collection`","type":[[["function"]]]},{"name":"initialValue","description":"Starting value for the accumulator","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":385,"file":"Collection.js","path":"src/util"}},{"name":"tap","description":"Identical to\n[Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\nbut returns the collection instead of undefined.","examples":["collection\n .tap(user => console.log(user.username))\n .filter(user => user.bot)\n .tap(user => console.log(user.username));"],"params":[{"name":"fn","description":"Function to execute for each element","type":[[["function"]]]},{"name":"thisArg","description":"Value to use as `this` when executing function","optional":true,"type":[["*"]]}],"returns":[[["Collection"]]],"meta":{"line":417,"file":"Collection.js","path":"src/util"}},{"name":"clone","description":"Creates an identical shallow copy of this collection.","examples":["const newColl = someColl.clone();"],"returns":[[["Collection"]]],"meta":{"line":427,"file":"Collection.js","path":"src/util"}},{"name":"concat","description":"Combines this collection with others into a new collection. None of the source collections are modified.","examples":["const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"],"params":[{"name":"collections","description":"Collections to merge","variable":true,"type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":437,"file":"Collection.js","path":"src/util"}},{"name":"deleteAll","description":"Calls the `delete()` method on all items that have it.","returns":[[["Array","<"],["Promise",">"]]],"meta":{"line":449,"file":"Collection.js","path":"src/util"}},{"name":"equals","description":"Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.","params":[{"name":"collection","description":"Collection to compare with","type":[[["Collection"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the collections have identical contents"},"meta":{"line":464,"file":"Collection.js","path":"src/util"}},{"name":"sort","description":"The sort() method sorts the elements of a collection in place and returns the collection.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.","params":[{"name":"compareFunction","description":"Specifies a function that defines the sort order.\nif omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.","optional":true,"type":[[["function"]]]}],"returns":[[["Collection"]]],"meta":{"line":482,"file":"Collection.js","path":"src/util"}}],"meta":{"line":8,"file":"Collection.js","path":"src/util"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\npermissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\nthat override their default permissions.","construct":{"name":"Permissions","params":[{"name":"member","description":"Member the permissions are for **(deprecated)**","optional":true,"type":[[["GuildMember"]]]},{"name":"permissions","description":"Permissions or bitfield to read from","type":[[["number"]],[["PermissionResolvable"]]]}]},"props":[{"name":"_member","description":"Member the permissions are for","deprecated":true,"type":[[["GuildMember"]]],"meta":{"line":22,"file":"Permissions.js","path":"src/util"}},{"name":"bitfield","description":"Bitfield of the packed permissions","type":[[["number"]]],"meta":{"line":28,"file":"Permissions.js","path":"src/util"}},{"name":"raw","description":"Bitfield of the packed permissions","see":["{@link Permissions#bitfield}"],"readonly":true,"deprecated":true,"type":[[["number"]]],"meta":{"line":46,"file":"Permissions.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric permission flags. All available properties:\n- `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n- `CREATE_INSTANT_INVITE` (create invitations to the guild)\n- `KICK_MEMBERS`\n- `BAN_MEMBERS`\n- `MANAGE_CHANNELS` (edit and reorder channels)\n- `MANAGE_GUILD` (edit the guild information, region, etc.)\n- `ADD_REACTIONS` (add new reactions to messages)\n- `VIEW_AUDIT_LOG`\n- `PRIORITY_SPEAKER`\n- `VIEW_CHANNEL`\n- `READ_MESSAGES` **(deprecated)**\n- `SEND_MESSAGES`\n- `SEND_TTS_MESSAGES`\n- `MANAGE_MESSAGES` (delete messages and reactions)\n- `EMBED_LINKS` (links posted will have a preview embedded)\n- `ATTACH_FILES`\n- `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n- `MENTION_EVERYONE`\n- `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n- `EXTERNAL_EMOJIS` **(deprecated)**\n- `CONNECT` (connect to a voice channel)\n- `SPEAK` (speak in a voice channel)\n- `MUTE_MEMBERS` (mute members across all voice channels)\n- `DEAFEN_MEMBERS` (deafen members across all voice channels)\n- `MOVE_MEMBERS` (move members between voice channels)\n- `USE_VAD` (use voice activity detection)\n- `CHANGE_NICKNAME`\n- `MANAGE_NICKNAMES` (change other members' nicknames)\n- `MANAGE_ROLES`\n- `MANAGE_ROLES_OR_PERMISSIONS` **(deprecated)**\n- `MANAGE_WEBHOOKS`\n- `MANAGE_EMOJIS`","see":["{@link https://discordapp.com/developers/docs/topics/permissions}"],"scope":"static","type":[[["Object"]]],"meta":{"line":237,"file":"Permissions.js","path":"src/util"}},{"name":"ALL","description":"Bitfield representing every permission combined","scope":"static","type":[[["number"]]],"meta":{"line":279,"file":"Permissions.js","path":"src/util"}},{"name":"DEFAULT","description":"Bitfield representing the default permissions for users","scope":"static","type":[[["number"]]],"meta":{"line":285,"file":"Permissions.js","path":"src/util"}}],"methods":[{"name":"has","description":"Checks whether the bitfield has a permission, or multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":60,"file":"Permissions.js","path":"src/util"}},{"name":"missing","description":"Gets all given permissions that are missing from the bitfield.","params":[{"name":"permissions","description":"Permissions to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["PermissionResolvable"]]],"meta":{"line":73,"file":"Permissions.js","path":"src/util"}},{"name":"add","description":"Adds permissions to this one, creating a new instance to represent the new bitfield.","params":[{"name":"permissions","description":"Permissions to add","variable":true,"type":[[["PermissionResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":83,"file":"Permissions.js","path":"src/util"}},{"name":"remove","description":"Removes permissions to this one, creating a new instance to represent the new bitfield.","params":[{"name":"permissions","description":"Permissions to remove","variable":true,"type":[[["PermissionResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":99,"file":"Permissions.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping permission name (like `VIEW_CHANNEL`) to a {@link boolean} indicating whether the\npermission is available.","params":[{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Object"]]],"meta":{"line":116,"file":"Permissions.js","path":"src/util"}},{"name":"hasPermission","description":"Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.","see":["{@link Permissions#has}"],"deprecated":true,"params":[{"name":"permission","description":"The permission to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permission","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":130,"file":"Permissions.js","path":"src/util"}},{"name":"hasPermissions","description":"Checks whether the user has all specified permissions.","see":["{@link Permissions#has}"],"deprecated":true,"params":[{"name":"permissions","description":"The permissions to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":142,"file":"Permissions.js","path":"src/util"}},{"name":"missingPermissions","description":"Checks whether the user has all specified permissions, and lists any missing permissions.","see":["{@link Permissions#missing}"],"deprecated":true,"params":[{"name":"permissions","description":"The permissions to check for","type":[[["PermissionResolvable"]]]},{"name":"explicit","description":"Whether to require the user to explicitly have the exact permissions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["PermissionResolvable"]]],"meta":{"line":154,"file":"Permissions.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of permission names (such as `VIEW_CHANNEL`) based on the permissions available.","params":[{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":163,"file":"Permissions.js","path":"src/util"}},{"name":"freeze","description":"Freezes these permissions, making them immutable.","returns":{"types":[[["Permissions"]]],"description":"These permissions"},"meta":{"line":171,"file":"Permissions.js","path":"src/util"}},{"name":"resolve","description":"Resolves permissions to their numeric form.","scope":"static","params":[{"name":"permission","description":"Permission(s) to resolve","type":[[["PermissionResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":191,"file":"Permissions.js","path":"src/util"}}],"meta":{"line":9,"file":"Permissions.js","path":"src/util"}},{"name":"EvaluatedPermissions","description":"The final evaluated permissions for a member in a channel","see":["{@link Permissions}"],"deprecated":true,"meta":{"line":287,"file":"Permissions.js","path":"src/util"}},{"name":"SnowflakeUtil","description":"A container for useful snowflake-related methods.","methods":[{"name":"generate","description":"Generates a Discord snowflake.\n<info>This hardcodes the worker ID as 1 and the process ID as 0.</info>","scope":"static","params":[{"name":"timestamp","description":"Timestamp or date of the snowflake to generate","optional":true,"default":"Date.now()","type":[[["number"]],[["Date"]]]}],"returns":{"types":[[["Snowflake"]]],"description":"The generated snowflake"},"meta":{"line":33,"file":"Snowflake.js","path":"src/util"}},{"name":"deconstruct","description":"Deconstructs a Discord snowflake.","scope":"static","params":[{"name":"snowflake","description":"Snowflake to deconstruct","type":[[["Snowflake"]]]}],"returns":{"types":[[["DeconstructedSnowflake"]]],"description":"Deconstructed snowflake"},"meta":{"line":61,"file":"Snowflake.js","path":"src/util"}}],"meta":{"line":10,"file":"Snowflake.js","path":"src/util"}},{"name":"Util","description":"Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.","methods":[{"name":"splitMessage","description":"Splits a string into multiple chunks at a designated character that do not exceed a specific length.","scope":"static","params":[{"name":"text","description":"Content to split","type":[[["string"]]]},{"name":"options","description":"Options controlling the behaviour of the split","optional":true,"type":[[["SplitOptions"]]]}],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":19,"file":"Util.js","path":"src/util"}},{"name":"escapeMarkdown","description":"Escapes any Discord-flavour markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]},{"name":"onlyCodeBlock","description":"Whether to only escape codeblocks (takes priority)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"onlyInlineCode","description":"Whether to only escape inline code","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":45,"file":"Util.js","path":"src/util"}},{"name":"fetchRecommendedShards","description":"Gets the recommended shard count from Discord.","scope":"static","params":[{"name":"token","description":"Discord auth token","type":[[["string"]]]},{"name":"guildsPerShard","description":"Number of guilds per shard","optional":true,"default":1000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The recommended number of shards"},"meta":{"line":57,"file":"Util.js","path":"src/util"}},{"name":"parseEmoji","description":"Parses emoji info out of a string. The string must be one of:\n* A UTF-8 emoji (no ID)\n* A URL-encoded UTF-8 emoji (no ID)\n* A Discord custom emoji (`<:name:id>` or `<a:name:id>`)","scope":"static","access":"private","params":[{"name":"text","description":"Emoji string to parse","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"description":"Object with `animated`, `name`, and `id` properties","nullable":true},"meta":{"line":78,"file":"Util.js","path":"src/util"}},{"name":"arraysEqual","description":"Checks whether the arrays are equal, also removes duplicated entries from b.","scope":"static","access":"private","params":[{"name":"a","description":"Array which will not be modified.","type":[[["Array","<"],["*",">"]]]},{"name":"b","description":"Array to remove duplicated entries from.","type":[[["Array","<"],["*",">"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the arrays are equal."},"meta":{"line":93,"file":"Util.js","path":"src/util"}},{"name":"cloneObject","description":"Shallow-copies an object with its class/prototype intact.","scope":"static","access":"private","params":[{"name":"obj","description":"Object to clone","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":111,"file":"Util.js","path":"src/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":122,"file":"Util.js","path":"src/util"}},{"name":"convertToBuffer","description":"Converts an ArrayBuffer or string to a Buffer.","scope":"static","access":"private","params":[{"name":"ab","description":"ArrayBuffer to convert","type":[[["ArrayBuffer"]],[["string"]]]}],"returns":[[["Buffer"]]],"meta":{"line":141,"file":"Util.js","path":"src/util"}},{"name":"str2ab","description":"Converts a string to an ArrayBuffer.","scope":"static","access":"private","params":[{"name":"str","description":"String to convert","type":[[["string"]]]}],"returns":[[["ArrayBuffer"]]],"meta":{"line":152,"file":"Util.js","path":"src/util"}},{"name":"makeError","description":"Makes an Error from a plain info object.","scope":"static","access":"private","params":[{"name":"obj","description":"Error info","type":[[["Object"]]]},{"name":"obj.name","description":"Error type","type":[[["string"]]]},{"name":"obj.message","description":"Message for the error","type":[[["string"]]]},{"name":"obj.stack","description":"Stack for the error","type":[[["string"]]]}],"returns":[[["Error"]]],"meta":{"line":168,"file":"Util.js","path":"src/util"}},{"name":"makePlainError","description":"Makes a plain error info object from an Error.","scope":"static","access":"private","params":[{"name":"err","description":"Error to get info from","type":[[["Error"]]]}],"returns":[[["Object"]]],"meta":{"line":181,"file":"Util.js","path":"src/util"}},{"name":"moveElementInArray","description":"Moves an element in an array *in place*.","scope":"static","access":"private","params":[{"name":"array","description":"Array to modify","type":[[["Array","<"],["*",">"]]]},{"name":"element","description":"Element to move","type":[["*"]]},{"name":"newIndex","description":"Index or offset to move the element to","type":[[["number"]]]},{"name":"offset","description":"Move the element by an offset amount rather than to a set index","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["number"]]],"meta":{"line":198,"file":"Util.js","path":"src/util"}},{"name":"delayFor","description":"Creates a Promise that resolves after a specified duration.","scope":"static","access":"private","params":[{"name":"ms","description":"How long to wait before resolving (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":214,"file":"Util.js","path":"src/util"}}],"meta":{"line":8,"file":"Util.js","path":"src/util"}}],"interfaces":[{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features.","props":[{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":383,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":392,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":402,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":411,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"methods":[{"name":"send","description":"Send a message to this channel.","examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message,\ncan also be just a RichEmbed or Attachment","optional":true,"type":[[["MessageOptions"]],[["Attachment"]],[["RichEmbed"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":118,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessage","description":"Gets a single message from this channel, regardless of it being cached or not.","examples":["// Get message\nchannel.fetchMessage('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);"],"params":[{"name":"messageID","description":"ID of the message to get","type":[[["Snowflake"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":193,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchMessages","description":"Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","examples":["// Get messages\nchannel.fetchMessages({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.fetchMessages()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Query parameters to pass in","optional":true,"default":"{}","type":[[["ChannelLogsQueryOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":235,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"fetchPinnedMessages","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","examples":["// Get pinned messages\nchannel.fetchPinnedMessages()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":258,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"search","description":"Performs a search within the channel.\n<warn>This is only available when using a user account.</warn>","examples":["channel.search({\n  content: 'discord.js',\n  before: '2016-11-17'\n}).then(res => {\n  const hit = res.messages[0].find(m => m.hit).content;\n  console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n}).catch(console.error);"],"deprecated":true,"params":[{"name":"options","description":"Options to pass to the search","optional":true,"default":"{}","type":[[["MessageSearchOptions"]]]}],"returns":[[["Promise","<"],["MessageSearchResult",">"]]],"meta":{"line":320,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// Start typing in a channel\nchannel.startTyping();"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"type":[[["number"]]]}],"meta":{"line":331,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop in a channel\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":367,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createCollector","description":"Creates a Message Collector","deprecated":true,"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":422,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":438,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\nfilter.","examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":462,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk delete given messages that are newer than two weeks.\n<warn>This is only available when using a bot account.</warn>","examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":488,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"acknowledge","description":"Marks all messages in this channel as read.\n<warn>This is only available when using a user account.</warn>","deprecated":true,"returns":[[["Promise","<("],["TextChannel","|"],["GroupDMChannel","|"],["DMChannel",")>"]]],"meta":{"line":510,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendMessage","description":"Send a message to this channel.","examples":["// Send a message\nchannel.sendMessage('hello!')\n .then(message => console.log(`Sent message: ${message.content}`))\n .catch(console.error);"],"deprecated":true,"params":[{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"default":"{}","type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":538,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendEmbed","description":"Send an embed to this channel.","deprecated":true,"params":[{"name":"embed","description":"Embed for the message","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["string"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":550,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFiles","description":"Send files to this channel.","deprecated":true,"params":[{"name":"files","description":"Files to send with the message","type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":568,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendFile","description":"Send a file to this channel.","deprecated":true,"params":[{"name":"attachment","description":"File to send","type":[[["BufferResolvable"]]]},{"name":"name","description":"Name and extension of the file","optional":true,"default":"'file.jpg'","type":[[["string"]]]},{"name":"content","description":"Text for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":581,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"sendCode","description":"Send a code block to this channel.","deprecated":true,"params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content of the code block","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":593,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"typedefs":[{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\n* A User object\n* A Snowflake\n* A Message object (resolves to the message author)\n* A Guild object (owner of the guild)\n* A GuildMember object","type":[[["User"]],[["Snowflake"]],[["Message"]],[["Guild"]],[["GuildMember"]]],"meta":{"line":29,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\n* A Guild object\n* A Snowflake","type":[[["Guild"]],[["Snowflake"]]],"meta":{"line":66,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"GuildMemberResolvable","description":"Data that resolves to give a GuildMember object. This can be:\n* A GuildMember object\n* A User object","type":[[["GuildMember"]],[["User"]]],"meta":{"line":84,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"RoleResolvable","description":"Data that can be resolved to a Role object. This can be:\n* A Role\n* A Snowflake","type":[[["Role"]],[["Snowflake"]]],"meta":{"line":105,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel object. This can be:\n* A Channel object\n* A Message object (the channel the message was sent in)\n* A Guild object (the #general channel)\n* A Snowflake","type":[[["Channel"]],[["Guild"]],[["Message"]],[["Snowflake"]]],"meta":{"line":126,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\n* An invite code\n* An invite URL","type":[[["string"]]],"meta":{"line":161,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\n* A string\n* An array (joined with a new line delimiter to give a string)\n* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":180,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\n* A Buffer\n* A base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":213,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"BufferResolvable","description":"Data that can be resolved to give a Buffer. This can be:\n* A Buffer\n* The path to a local file\n* A URL\n* A Stream","type":[[["string"]],[["Buffer"]]],"meta":{"line":230,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"EmojiIdentifierResolvable","description":"Data that can be resolved to give an emoji identifier. This can be:\n* The unicode representation of an emoji\n* A custom emoji ID\n* An Emoji object\n* A ReactionEmoji object","type":[[["string"]],[["Emoji"]],[["ReactionEmoji"]]],"meta":{"line":281,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"ColorResolvable","description":"Can be a Hex Literal, Hex String, Number, RGB Array, or one of the following\n```\n[\n  'DEFAULT',\n  'WHITE',\n  'AQUA',\n  'GREEN',\n  'BLUE',\n  'PURPLE',\n  'LUMINOUS_VIVID_PINK',\n  'GOLD',\n  'ORANGE',\n  'RED',\n  'GREY',\n  'DARKER_GREY',\n  'NAVY',\n  'DARK_AQUA',\n  'DARK_GREEN',\n  'DARK_BLUE',\n  'DARK_PURPLE',\n  'DARK_VIVID_PINK',\n  'DARK_GOLD',\n  'DARK_ORANGE',\n  'DARK_RED',\n  'DARK_GREY',\n  'LIGHT_GREY',\n  'DARK_NAVY',\n  'RANDOM',\n]\n```\nor something like\n```\n[255, 0, 255]\n```\nfor purple","type":[[["string"]],[["number"]],[["Array"]]],"meta":{"line":305,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"seek","description":"The time to seek to","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at","optional":true,"default":1,"type":[[["number"]]]},{"name":"passes","description":"How many times to send the voice packet to reduce packet loss","optional":true,"default":1,"type":[[["number"]]]},{"name":"bitrate","description":"The bitrate (quality) of the audio.\nIf set to 'auto', the voice channel's bitrate will be used","optional":true,"default":48000,"type":[[["number"]],[["string"]]]}],"meta":{"line":424,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"PresenceData","description":"Data resembling a raw Discord presence.","type":[[["Object"]]],"props":[{"name":"status","description":"Status of the user","optional":true,"type":[[["PresenceStatus"]]]},{"name":"afk","description":"Whether the user is AFK","optional":true,"type":[[["boolean"]]]},{"name":"game","description":"Game the user is playing","optional":true,"type":[[["Object"]]]},{"name":"game.name","description":"Name of the game","optional":true,"type":[[["string"]]]},{"name":"game.url","description":"Twitch stream URL","optional":true,"type":[[["string"]]]},{"name":"game.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]}],"meta":{"line":171,"file":"ClientUser.js","path":"src/structures"}},{"name":"PresenceStatus","description":"The status of this presence:\n\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`offline`** - user is offline or invisible\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":3,"file":"Presence.js","path":"src/structures"}},{"name":"GroupDMRecipientOptions","description":"An object containing either a user or access token, and an optional nickname.","type":[[["Object"]]],"props":[{"name":"user","description":"User to add to the Group DM\n(only available if a user is creating the DM)","optional":true,"type":[[["UserResolvable"]],[["Snowflake"]]]},{"name":"accessToken","description":"Access token to use to add a user to the Group DM\n(only available if a bot is creating the DM)","optional":true,"type":[[["string"]]]},{"name":"nick","description":"Permanent nickname (only available if a bot is creating the DM)","optional":true,"type":[[["string"]]]}],"meta":{"line":380,"file":"ClientUser.js","path":"src/structures"}},{"name":"EmojiEditData","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]},{"name":"roles","description":"Roles to restrict emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<("],["Snowflake","|"],["Role",")>"]]]}],"meta":{"line":127,"file":"Emoji.js","path":"src/structures"}},{"name":"BanInfo","description":"An object containing information about a guild member's ban.","type":[[["Object"]]],"props":[{"name":"user","description":"User that was banned","type":[[["User"]]]},{"name":"reason","description":"Reason the user was banned","nullable":true,"type":[[["string"]]]}],"meta":{"line":476,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEmbedData","description":"The Guild Embed object","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the embed is enabled","type":[[["boolean"]]]},{"name":"channel","description":"The embed channel","nullable":true,"type":[[["ChannelResolvable"]]]}],"meta":{"line":582,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEditData","description":"The data for editing a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","optional":true,"type":[[["string"]]]},{"name":"region","description":"The region of the guild","optional":true,"type":[[["string"]]]},{"name":"verificationLevel","description":"The verification level of the guild","optional":true,"type":[[["number"]]]},{"name":"explicitContentFilter","description":"The level of the explicit content filter","optional":true,"type":[[["number"]]]},{"name":"afkChannel","description":"The AFK channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"systemChannel","description":"The system channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"afkTimeout","description":"The AFK timeout of the guild","optional":true,"type":[[["number"]]]},{"name":"icon","description":"The icon of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"owner","description":"The owner of the guild","optional":true,"type":[[["GuildMemberResolvable"]]]},{"name":"splash","description":"The splash screen of the guild","optional":true,"type":[[["Base64Resolvable"]]]}],"meta":{"line":723,"file":"Guild.js","path":"src/structures"}},{"name":"ChannelCreationOverwrites","description":"Overwrites to use when creating a channel or replacing overwrites","type":[[["Object"]]],"props":[{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"allowed","description":"The permissions to allow\n**(deprecated)**","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"denied","description":"The permissions to deny\n**(deprecated)**","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"id","description":"Member or role this overwrite is for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"meta":{"line":1044,"file":"Guild.js","path":"src/structures"}},{"name":"ChannelPosition","description":"The data needed for updating a channel's position.","type":[[["Object"]]],"props":[{"name":"channel","description":"Channel to update","type":[[["ChannelResolvable"]]]},{"name":"position","description":"New position for the channel","type":[[["number"]]]}],"meta":{"line":1101,"file":"Guild.js","path":"src/structures"}},{"name":"AuditLogTargetType","description":"The target type of an entry, e.g. `GUILD`. Here are the available types:\n* GUILD\n* CHANNEL\n* USER\n* ROLE\n* INVITE\n* WEBHOOK\n* EMOJI\n* MESSAGE","type":[[["string"]]],"meta":{"line":6,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogAction","description":"The action of an entry. Here are the available actions:\n* ALL: null\n* GUILD_UPDATE: 1\n* CHANNEL_CREATE: 10\n* CHANNEL_UPDATE: 11\n* CHANNEL_DELETE: 12\n* CHANNEL_OVERWRITE_CREATE: 13\n* CHANNEL_OVERWRITE_UPDATE: 14\n* CHANNEL_OVERWRITE_DELETE: 15\n* MEMBER_KICK: 20\n* MEMBER_PRUNE: 21\n* MEMBER_BAN_ADD: 22\n* MEMBER_BAN_REMOVE: 23\n* MEMBER_UPDATE: 24\n* MEMBER_ROLE_UPDATE: 25\n* ROLE_CREATE: 30\n* ROLE_UPDATE: 31\n* ROLE_DELETE: 32\n* INVITE_CREATE: 40\n* INVITE_UPDATE: 41\n* INVITE_DELETE: 42\n* WEBHOOK_CREATE: 50\n* WEBHOOK_UPDATE: 51\n* WEBHOOK_DELETE: 52\n* EMOJI_CREATE: 60\n* EMOJI_UPDATE: 61\n* EMOJI_DELETE: 62\n* MESSAGE_DELETE: 72","type":[[["number"]],[["string"]]],"meta":{"line":36,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogEntryTarget","description":"The target of an entry. It can be one of:\n* A guild\n* A user\n* A role\n* An emoji\n* An invite\n* A webhook\n* An object where the keys represent either the new value or the old value","type":[[["Object"]],[["Guild"]],[["User"]],[["Role"]],[["Emoji"]],[["Invite"]],[["Webhook"]]],"meta":{"line":143,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogActionType","description":"The action type of an entry, e.g. `CREATE`. Here are the available types:\n* CREATE\n* DELETE\n* UPDATE\n* ALL","type":[[["string"]]],"meta":{"line":172,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogChange","description":"An entry in the audit log representing a specific change.","type":[[["object"]]],"props":[{"name":"key","description":"The property that was changed, e.g. `nick` for nickname changes","type":[[["string"]]]},{"name":"old","description":"The old value of the change, e.g. for nicknames, the old nickname","optional":true,"type":[["*"]]},{"name":"new","description":"The new value of the change, e.g. for nicknames, the new nickname","optional":true,"type":[["*"]]}],"meta":{"line":263,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"PermissionOverwriteOptions","description":"An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n```js\n{\n 'SEND_MESSAGES': true,\n 'EMBED_LINKS': null,\n 'ATTACH_FILES': false,\n}\n```","type":[[["Object"]]],"meta":{"line":185,"file":"GuildChannel.js","path":"src/structures"}},{"name":"ChannelData","description":"The data for a guild channel.","type":[[["Object"]]],"props":[{"name":"type","description":"The type of the channel (Only when creating)","optional":true,"type":[[["string"]]]},{"name":"name","description":"The name of the channel","optional":true,"type":[[["string"]]]},{"name":"position","description":"The position of the channel","optional":true,"type":[[["number"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the channel","optional":true,"type":[[["number"]]]},{"name":"parent","description":"The parent or parent ID of the channel","optional":true,"type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"permissionOverwrites","description":"Overwrites of the channel","optional":true,"type":[[["Array","<"],["ChannelCreationOverwrites",">"]],[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]]},{"name":"rateLimitPerUser","description":"The rate limit per user of the channel in seconds","optional":true,"type":[[["number"]]]}],"meta":{"line":276,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildMemberEditData","description":"The data for editing this member.","type":[[["Object"]]],"props":[{"name":"nick","description":"The nickname to set for the member","optional":true,"type":[[["string"]]]},{"name":"roles","description":"The roles or role IDs to apply","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether or not the member should be muted","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"type":[[["boolean"]]]},{"name":"channel","description":"Channel to move member to (if they are connected to voice), or `null`\nif you want to kick them from voice","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]}],"meta":{"line":347,"file":"GuildMember.js","path":"src/structures"}},{"name":"CollectorFilter","description":"Filter to be applied to the collector.","type":[[["function"]]],"params":[{"name":"args","description":"Any arguments received by the listener","variable":true,"type":[["*"]]},{"name":"collection","description":"The items collected by this collector","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":4,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"CollectorOptions","description":"Options to be applied to the collector.","type":[[["Object"]]],"props":[{"name":"time","description":"How long to run the collector for","optional":true,"type":[[["number"]]]}],"meta":{"line":12,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"MessageOptions","description":"Options provided when sending or editing a message.","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embed","description":"An embed for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["RichEmbed"]],[["Object"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"file","description":"A file to send with the message **(deprecated)**","optional":true,"type":[[["FileOptions"]],[["BufferResolvable"]],[["Attachment"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["BufferResolvable",">"]],[["Array","<"],["Attachment",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]},{"name":"reply","description":"User to reply to (prefixes the message with a mention, except in DMs)","optional":true,"type":[[["UserResolvable"]]]}],"meta":{"line":41,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"FileOptions","type":[[["Object"]]],"props":[{"name":"attachment","description":"File to attach","type":[[["BufferResolvable"]]]},{"name":"name","description":"Filename of the attachment","optional":true,"default":"'file.jpg'","type":[[["string"]]]}],"meta":{"line":58,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"SplitOptions","description":"Options for splitting a message.","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":1950,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":64,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["Snowflake"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":208,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"MessageSearchOptions","type":[[["Object"]]],"props":[{"name":"content","description":"Message content","optional":true,"type":[[["string"]]]},{"name":"maxID","description":"Maximum ID for the filter","optional":true,"type":[[["Snowflake"]]]},{"name":"minID","description":"Minimum ID for the filter","optional":true,"type":[[["Snowflake"]]]},{"name":"has","description":"One of `link`, `embed`, `file`, `video`, `image`, or `sound`,\nor add `-` to negate (e.g. `-file`)","optional":true,"type":[[["string"]]]},{"name":"channel","description":"Channel to limit search to (only for guild search endpoint)","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"author","description":"Author to limit search","optional":true,"type":[[["UserResolvable"]]]},{"name":"authorType","description":"One of `user`, `bot`, `webhook`, or add `-` to negate (e.g. `-webhook`)","optional":true,"type":[[["string"]]]},{"name":"sortBy","description":"`recent` or `relevant`","optional":true,"default":"'recent'","type":[[["string"]]]},{"name":"sortOrder","description":"`asc` or `desc`","optional":true,"default":"'desc'","type":[[["string"]]]},{"name":"contextSize","description":"How many messages to get around the matched message (0 to 2)","optional":true,"default":2,"type":[[["number"]]]},{"name":"limit","description":"Maximum number of results to get (1 to 25)","optional":true,"default":25,"type":[[["number"]]]},{"name":"offset","description":"Offset the \"pages\" of results (since you can only see 25 at a time)","optional":true,"default":0,"type":[[["number"]]]},{"name":"mentions","description":"Mentioned user filter","optional":true,"type":[[["UserResolvable"]]]},{"name":"mentionsEveryone","description":"If everyone is mentioned","optional":true,"type":[[["boolean"]]]},{"name":"linkHostname","description":"Filter links by hostname","optional":true,"type":[[["string"]]]},{"name":"embedProvider","description":"The name of an embed provider","optional":true,"type":[[["string"]]]},{"name":"embedType","description":"one of `image`, `video`, `url`, `rich`","optional":true,"type":[[["string"]]]},{"name":"attachmentFilename","description":"The name of an attachment","optional":true,"type":[[["string"]]]},{"name":"attachmentExtension","description":"The extension of an attachment","optional":true,"type":[[["string"]]]},{"name":"before","description":"Date to find messages before","optional":true,"type":[[["Date"]]]},{"name":"after","description":"Date to find messages before","optional":true,"type":[[["Date"]]]},{"name":"during","description":"Date to find messages during (range of date to date + 24 hours)","optional":true,"type":[[["Date"]]]},{"name":"nsfw","description":"Include results from NSFW channels","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":270,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"MessageSearchResult","type":[[["Object"]]],"props":[{"name":"totalResults","description":"Total result count","type":[[["number"]]]},{"name":"messages","description":"Array of message results\nThe message which has triggered the result will have the `hit` property set to `true`","type":[[["Array","<"],["Array","<"],["Message",">>"]]]}],"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["MessageCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":442,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitReactionsOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["ReactionCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":281,"file":"Message.js","path":"src/structures"}},{"name":"MessageEditOptions","description":"Options that can be passed into editMessage.","type":[[["Object"]]],"props":[{"name":"embed","description":"An embed to be added/edited","optional":true,"type":[[["Object"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]}],"meta":{"line":378,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum amount of messages to process","type":[[["number"]]]},{"name":"maxMatches","description":"The maximum amount of messages to collect","type":[[["number"]]]}],"meta":{"line":4,"file":"MessageCollector.js","path":"src/structures"}},{"name":"ReactionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum total amount of reactions to collect","type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","type":[[["number"]]]}],"meta":{"line":4,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"RoleData","description":"The data for a role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]],[["number"]]]},{"name":"mentionable","description":"Whether or not the role should be mentionable","optional":true,"type":[[["boolean"]]]}],"meta":{"line":197,"file":"Role.js","path":"src/structures"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into send, sendMessage, sendFile, sendEmbed, and sendCode.","type":[[["Object"]]],"props":[{"name":"username","description":"Username override for the message","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatarURL","description":"Avatar URL override for the message","optional":true,"type":[[["string"]]]},{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embeds","description":"An array of embeds for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["Array","<("],["RichEmbed","|"],["Object",")>"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"file","description":"A file to send with the message **(deprecated)**","optional":true,"type":[[["FileOptions"]],[["BufferResolvable"]],[["Attachment"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["BufferResolvable",">"]],[["Array","<"],["Attachment",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":78,"file":"Webhook.js","path":"src/structures"}},{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"apiRequestMethod","description":"One of `sequential` or `burst`. The sequential handler executes\nall requests in the order they are triggered, whereas the burst handler runs multiple in parallel, and doesn't\nprovide the guarantee of any particular order. Burst mode is more likely to hit a 429 ratelimit error by its nature,\nand is therefore slightly riskier to use.","optional":true,"default":"'sequential'","type":[[["string"]]]},{"name":"shardId","description":"ID of the shard to run","optional":true,"default":0,"type":[[["number"]]]},{"name":"shardCount","description":"Total number of shards","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\n(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\nindefinitely)","optional":true,"default":200,"type":[[["number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\nsweepable (in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\nthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\nupon joining a guild (should be avoided whenever possible)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Default value for {@link MessageOptions#disableEveryone}","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"sync","description":"Whether to periodically sync guilds (for user accounts)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\ncorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"restTimeOffset","description":"Extra time in millseconds to wait before continuing to make REST\nrequests (higher values will reduce rate-limiting errors on bad connections)","optional":true,"default":500,"type":[[["number"]]]},{"name":"retryLimit","description":"How many times to retry on 5XX errors\n(Infinity for indefinite amount of retries)","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\nprocessed, potentially resulting in performance improvements for larger bots. Only disable events you are\n100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\nmost impact is typically `TYPING_START`.","optional":true,"type":[[["Array","<"],["WSEventType",">"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]}],"meta":{"line":3,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection\n(defaults to `false` for browsers)","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":51,"file":"Constants.js","path":"src/util"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"API version to use","optional":true,"default":7,"type":[[["number"]]]},{"name":"api","description":"Base url of the API","optional":true,"default":"'https://discordapp.com/api'","type":[[["string"]]]},{"name":"cdn","description":"Base url of the CDN","optional":true,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"invite","description":"Base url of invites","optional":true,"default":"'https://discord.gg'","type":[[["string"]]]}],"meta":{"line":71,"file":"Constants.js","path":"src/util"}},{"name":"Status","description":"The current status of the client. Here are the available statuses:\n* READY: 0\n* CONNECTING: 1\n* RECONNECTING: 2\n* IDLE: 3\n* NEARLY: 4\n* DISCONNECTED: 5","type":[[["number"]]],"meta":{"line":243,"file":"Constants.js","path":"src/util"}},{"name":"VoiceStatus","description":"The current status of a voice connection. Here are the available statuses:\n* CONNECTED\n* CONNECTING\n* AUTHENTICATING\n* RECONNECTING\n* DISCONNECTED","type":[[["number"]]],"meta":{"line":262,"file":"Constants.js","path":"src/util"}},{"name":"ActivityType","description":"The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n* PLAYING\n* STREAMING\n* LISTENING\n* WATCHING","type":[[["string"]]],"meta":{"line":364,"file":"Constants.js","path":"src/util"}},{"name":"WSEventType","description":"The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n* READY\n* RESUMED\n* GUILD_SYNC\n* GUILD_CREATE\n* GUILD_DELETE\n* GUILD_UPDATE\n* GUILD_MEMBER_ADD\n* GUILD_MEMBER_REMOVE\n* GUILD_MEMBER_UPDATE\n* GUILD_MEMBERS_CHUNK\n* GUILD_INTEGRATIONS_UPDATE\n* GUILD_ROLE_CREATE\n* GUILD_ROLE_DELETE\n* GUILD_ROLE_UPDATE\n* GUILD_BAN_ADD\n* GUILD_BAN_REMOVE\n* CHANNEL_CREATE\n* CHANNEL_DELETE\n* CHANNEL_UPDATE\n* CHANNEL_PINS_UPDATE\n* MESSAGE_CREATE\n* MESSAGE_DELETE\n* MESSAGE_UPDATE\n* MESSAGE_DELETE_BULK\n* MESSAGE_REACTION_ADD\n* MESSAGE_REACTION_REMOVE\n* MESSAGE_REACTION_REMOVE_ALL\n* USER_UPDATE\n* USER_NOTE_UPDATE\n* USER_SETTINGS_UPDATE\n* PRESENCE_UPDATE\n* VOICE_STATE_UPDATE\n* TYPING_START\n* VOICE_SERVER_UPDATE\n* RELATIONSHIP_ADD\n* RELATIONSHIP_REMOVE\n* WEBHOOKS_UPDATE","type":[[["string"]]],"meta":{"line":388,"file":"Constants.js","path":"src/util"}},{"name":"MessageType","description":"The type of a message, e.g. `DEFAULT`. Here are the available types:\n* DEFAULT\n* RECIPIENT_ADD\n* RECIPIENT_REMOVE\n* CALL\n* CHANNEL_NAME_CHANGE\n* CHANNEL_ICON_CHANGE\n* PINS_ADD\n* GUILD_MEMBER_JOIN","type":[[["string"]]],"meta":{"line":471,"file":"Constants.js","path":"src/util"}},{"name":"MessageNotificationType","description":"The type of a message notification setting. Here are the available types:\n* EVERYTHING\n* MENTIONS\n* NOTHING\n* INHERIT (only for GuildChannel)","type":[[["string"]]],"meta":{"line":494,"file":"Constants.js","path":"src/util"}},{"name":"APIError","description":"An error encountered while performing an API request. Here are the potential errors:\n* UNKNOWN_ACCOUNT\n* UNKNOWN_APPLICATION\n* UNKNOWN_CHANNEL\n* UNKNOWN_GUILD\n* UNKNOWN_INTEGRATION\n* UNKNOWN_INVITE\n* UNKNOWN_MEMBER\n* UNKNOWN_MESSAGE\n* UNKNOWN_OVERWRITE\n* UNKNOWN_PROVIDER\n* UNKNOWN_ROLE\n* UNKNOWN_TOKEN\n* UNKNOWN_USER\n* UNKNOWN_EMOJI\n* UNKNOWN_WEBHOOK\n* BOT_PROHIBITED_ENDPOINT\n* BOT_ONLY_ENDPOINT\n* MAXIMUM_GUILDS\n* MAXIMUM_FRIENDS\n* MAXIMUM_PINS\n* MAXIMUM_ROLES\n* MAXIMUM_REACTIONS\n* UNAUTHORIZED\n* MISSING_ACCESS\n* INVALID_ACCOUNT_TYPE\n* CANNOT_EXECUTE_ON_DM\n* EMBED_DISABLED\n* CANNOT_EDIT_MESSAGE_BY_OTHER\n* CANNOT_SEND_EMPTY_MESSAGE\n* CANNOT_MESSAGE_USER\n* CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n* CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n* OAUTH2_APPLICATION_BOT_ABSENT\n* MAXIMUM_OAUTH2_APPLICATIONS\n* INVALID_OAUTH_STATE\n* MISSING_PERMISSIONS\n* INVALID_AUTHENTICATION_TOKEN\n* NOTE_TOO_LONG\n* INVALID_BULK_DELETE_QUANTITY\n* CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n* INVALID_OR_TAKEN_INVITE_CODE\n* CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n* BULK_DELETE_MESSAGE_TOO_OLD\n* INVITE_ACCEPTED_TO_GUILD_NOT_CONTANING_BOT\n* REACTION_BLOCKED","type":[[["string"]]],"meta":{"line":739,"file":"Constants.js","path":"src/util"}},{"name":"DefaultMessageNotifications","description":"The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n* ALL\n* MENTIONS","type":[[["string"]]],"meta":{"line":836,"file":"Constants.js","path":"src/util"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\n* A string (see {@link Permissions.FLAGS})\n* A permission number","type":[[["string"]],[["number"]],[["Permissions"]],[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":179,"file":"Permissions.js","path":"src/util"}},{"name":"Snowflake","description":"A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n```\nIf we have a snowflake '266241948824764416' we can represent it as binary:\n\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n      number of ms since Discord epoch       worker  pid    increment\n```","type":[[["string"]]],"meta":{"line":15,"file":"Snowflake.js","path":"src/util"}},{"name":"DeconstructedSnowflake","description":"A deconstructed snowflake.","type":[[["Object"]]],"props":[{"name":"timestamp","description":"Timestamp the snowflake was created","type":[[["number"]]]},{"name":"date","description":"Date the snowflake was created","type":[[["Date"]]]},{"name":"workerID","description":"Worker ID in the snowflake","type":[[["number"]]]},{"name":"processID","description":"Process ID in the snowflake","type":[[["number"]]]},{"name":"increment","description":"Increment in the snowflake","type":[[["number"]]]},{"name":"binary","description":"Binary representation of the snowflake","type":[[["string"]]]}],"meta":{"line":45,"file":"Snowflake.js","path":"src/util"}}],"externals":[{"name":"Stream","see":["{@link https://nodejs.org/api/stream.html}"],"meta":{"line":239,"file":"ClientDataResolver.js","path":"src/client"}},{"name":"Prism","see":["{@link https://github.com/hydrabolt/prism-media}"],"meta":{"line":37,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"CloseEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}"],"meta":{"line":377,"file":"WebSocketConnection.js","path":"src/client/websocket"}}]},
  // discord.js/master.json
  {"meta":{"generator":"0.9.0","format":20,"date":1571396903823},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.js.org\"><img src=\"/static/logo.svg\" width=\"546\" alt=\"discord.js\" id=\"djs-logo\" /></a>\n  </p>\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/v/discord.js.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord.js\"><img src=\"https://img.shields.io/npm/dt/discord.js.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://travis-ci.org/discordjs/discord.js\"><img src=\"https://travis-ci.org/discordjs/discord.js.svg\" alt=\"Build status\" /></a>\n    <a href=\"https://david-dm.org/discordjs/discord.js\"><img src=\"https://img.shields.io/david/discordjs/discord.js.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/discordjs\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord.js/\"><img src=\"https://nodei.co/npm/discord.js.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Welcome!\nWelcome to the discord.js v12 documentation.\n\nv12 is still very much a work-in-progress, as we're aiming to make it the best it can possibly be before releasing.\nOnly use it if you are fond of living life on the bleeding edge.\n\n## About\ndiscord.js is a powerful [Node.js](https://nodejs.org) module that allows you to interact with the\n[Discord API](https://discordapp.com/developers/docs/intro) very easily.\n\n- Object-oriented\n- Predictable abstractions\n- Performant\n- 100% coverage of the Discord API\n\n## Installation\n**Node.js 10.0.0 or newer is required.**  \nIgnore any warnings about unmet peer dependencies, as they're all optional.\n\nWithout voice support: `npm install discordjs/discord.js`  \nWith voice support ([node-opus](https://www.npmjs.com/package/node-opus)): `npm install discordjs/discord.js node-opus`  \nWith voice support ([opusscript](https://www.npmjs.com/package/opusscript)): `npm install discordjs/discord.js opusscript`\n\n### Audio engines\nThe preferred audio engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n### Optional packages\n- [zlib-sync](https://www.npmjs.com/package/zlib-sync) for significantly faster WebSocket data inflation (`npm install zlib-sync`)\n- [zucc](https://www.npmjs.com/package/zucc) for significantly faster WebSocket data inflation (`npm install zucc`)\n- [erlpack](https://github.com/discordapp/erlpack) for significantly faster WebSocket data (de)serialisation (`npm install discordapp/erlpack`)\n- One of the following packages can be installed for faster voice packet encryption and decryption:\n    - [sodium](https://www.npmjs.com/package/sodium) (`npm install sodium`)\n    - [libsodium.js](https://www.npmjs.com/package/libsodium-wrappers) (`npm install libsodium-wrappers`)\n- [uws](https://www.npmjs.com/package/@discordjs/uws) for a much faster WebSocket connection (`npm install @discordjs/uws`)\n- [bufferutil](https://www.npmjs.com/package/bufferutil) for a much faster WebSocket connection when *not* using uws (`npm install bufferutil`)\n\n## Example usage\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.on('ready', () => {\n  console.log(`Logged in as ${client.user.tag}!`);\n});\n\nclient.on('message', msg => {\n  if (msg.content === 'ping') {\n    msg.reply('pong');\n  }\n});\n\nclient.login('token');\n```\n\n## Links\n* [Website](https://discord.js.org/) ([source](https://github.com/discordjs/website))\n* [Documentation](https://discord.js.org/#/docs/main/master/general/welcome)\n* [Guide](https://discordjs.guide/) ([source](https://github.com/discordjs/guide)) - this is still for stable  \n  See also the WIP [Update Guide](https://github.com/discordjs/guide/blob/v12-changes/guide/additional-info/changes-in-v12.md) also including updated and removed items in the library.\n* [Discord.js Discord server](https://discord.gg/bRCvFy9)\n* [Discord API Discord server](https://discord.gg/discord-api)\n* [GitHub](https://github.com/discordjs/discord.js)\n* [NPM](https://www.npmjs.com/package/discord.js)\n* [Related libraries](https://discordapi.com/unofficial/libs.html)\n\n### Extensions\n* [RPC](https://www.npmjs.com/package/discord-rpc) ([source](https://github.com/discordjs/RPC))\n\n## Contributing\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the\n[documentation](https://discord.js.org/#/docs).  \nSee [the contribution guide](https://github.com/discordjs/discord.js/blob/master/.github/CONTRIBUTING.md) if you'd like to submit a PR.\n\n## Help\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle\nnudge in the right direction, please don't hesitate to join our official [Discord.js Server](https://discord.gg/bRCvFy9).\n","path":"docs/general/welcome.md"},"updating":{"name":"Updating your code","type":"md","content":"# Version 11.1.0\nv11.1.0 features improved voice and gateway stability, as well as support for new features such as audit logs and searching for messages.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.1.0) for a full list of changes, including\ninformation about deprecations.\n\n# Version 11\nVersion 11 contains loads of new and improved features, optimisations, and bug fixes.\nSee [the changelog](https://github.com/discordjs/discord.js/releases/tag/11.0.0) for a full list of changes.\n\n## Significant additions\n* Message Reactions and Embeds (rich text)\n* Support for uws and erlpack for better performance\n* OAuthApplication support\n* Web distributions\n\n## Breaking changes\n### Client.login() no longer supports logging in with email + password\nLogging in with an email and password has always been heavily discouraged since the advent of proper token support, but in v11 we have made the decision to completely remove the functionality, since Hammer & Chisel have [officially stated](https://github.com/hammerandchisel/discord-api-docs/issues/69#issuecomment-223886862) it simply shouldn't be done.\n\nUser accounts can still log in with tokens just like bot accounts. To obtain the token for a user account, you can log in to Discord with that account, and use Ctrl + Shift + I to open the developer tools. In the console tab, evaluating `localStorage.token` will give you the token for that account.\n\n### ClientUser.setEmail()/setPassword() now require the current password, as well as setUsername() on user accounts\nSince you can no longer log in with email and password, you must provide the current account password to the `setEmail()`, `setPassword()`, and `setUsername()` methods for user accounts (self-bots).\n\n### Removed TextBasedChannel.sendTTSMessage()\nThis method was deemed to be an entirely pointless shortcut that virtually nobody even used.\nThe same results can be achieved by passing options to `send()` or `sendMessage()`.\n\nExample:\n```js\nchannel.send('Hi there', { tts: true });\n```\n\n### Using Collection.find()/exists() with IDs will throw an error\nThis is simply to help prevent a common mistake that is made frequently.\nTo find something or check its existence using an ID, you should use `.get()` and `.has()` which are part of the [ES6 Map class](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Map), which Collection is an extension of.\n\n# Version 10\nVersion 10's non-BC changes focus on cleaning up some inconsistencies that exist in previous versions.\nUpgrading from v9 should be quick and painless.\n\n## Client options\nAll client options have been converted to camelCase rather than snake_case, and `max_message_cache` was renamed to `messageCacheMaxSize`.\n\nv9 code example:\n```js\nconst client = new Discord.Client({\n  disable_everyone: true,\n  max_message_cache: 500,\n  message_cache_lifetime: 120,\n  message_sweep_interval: 60\n});\n```\n\nv10 code example:\n```js\nconst client = new Discord.Client({\n  disableEveryone: true,\n  messageCacheMaxSize: 500,\n  messageCacheLifetime: 120,\n  messageSweepInterval: 60\n});\n```\n\n## Presences\nPresences have been completely restructured.\nPrevious versions of discord.js assumed that users had the same presence amongst all guilds - with the introduction of sharding, however, this is no longer the case.\n\nv9 discord.js code may look something like this:\n```js\nUser.status; // the status of the user\nUser.game; // the game that the user is playing\nClientUser.setStatus(status, game, url); // set the new status for the user\n```\n\nv10 moves presences to GuildMember instances. For the sake of simplicity, though, User classes also expose presences.\nWhen accessing a presence on a User object, it simply finds the first GuildMember for the user, and uses its presence.\nAdditionally, the introduction of the Presence class keeps all of the presence data organised.\n\n**It is strongly recommended that you use a GuildMember's presence where available, rather than a User.\nA user may have an entirely different presence between two different guilds.**\n\nv10 code:\n```js\nMemberOrUser.presence.status; // the status of the member or user\nMemberOrUser.presence.game; // the game that the member or user is playing\nClientUser.setStatus(status); // online, idle, dnd, offline\nClientUser.setGame(game, streamingURL); // a game\nClientUser.setPresence(fullPresence); // status and game combined\n```\n\n## Voice\nVoice has been rewritten internally, but in a backwards-compatible manner.\nThere is only one breaking change here; the `disconnected` event was renamed to `disconnect`.\nSeveral more events have been made available to a VoiceConnection, so see the documentation.\n\n## Events\nMany events have been renamed or had their arguments change.\n\n### Client events\n|    Version   9                                       |    Version   10                               |\n|------------------------------------------------------|-----------------------------------------------|\n|    guildMemberAdd(guild, member)                     |    guildMemberAdd(member)                     |\n|    guildMemberAvailable(guild, member)               |    guildMemberAvailable(member)               |\n|    guildMemberRemove(guild, member)                  |    guildMemberRemove(member)                  |\n|    guildMembersChunk(guild, members)                 |    guildMembersChunk(members)                 |\n|    guildMemberUpdate(guild, oldMember, newMember)    |    guildMemberUpdate(oldMember, newMember)    |\n|    guildRoleCreate(guild, role)                      |    roleCreate(role)                           |\n|    guildRoleDelete(guild, role)                      |    roleDelete(role)                           |\n|    guildRoleUpdate(guild, oldRole, newRole)          |    roleUpdate(oldRole, newRole)               |\n\nThe guild parameter that has been dropped from the guild-related events can still be derived using `member.guild` or `role.guild`.\n\n### VoiceConnection events\n| Version 9    | Version 10 |\n|--------------|------------|\n| disconnected | disconnect |\n\n## Dates and timestamps\nAll dates/timestamps on the structures have been refactored to have a consistent naming scheme and availability.\nAll of them are named similarly to this:  \n**Date:** `Message.createdAt`  \n**Timestamp:** `Message.createdTimestamp`  \nSee the docs for each structure to see which date/timestamps are available on them.\n\n\n# Version 9\nThe version 9 (v9) rewrite takes a much more object-oriented approach than previous versions,\nwhich allows your code to be much more readable and manageable.\nIt's been rebuilt from the ground up and should be much more stable, fixing caching issues that affected\nolder versions. It also has support for newer Discord Features, such as emojis.\n\nVersion 9, while containing a sizable number of breaking changes, does not require much change in your code's logic -\nmost of the concepts are still the same, but loads of functions have been moved around.\nThe vast majority of methods you're used to using have been moved out of the Client class,\ninto other more relevant classes where they belong.\nBecause of this, you will need to convert most of your calls over to the new methods.\n\nHere are a few examples of methods that have changed:\n* `Client.sendMessage(channel, message)` ==> `TextChannel.sendMessage(message)`\n  * `Client.sendMessage(user, message)` ==> `User.sendMessage(message)`\n* `Client.updateMessage(message, \"New content\")` ==> `Message.edit(\"New Content\")`\n* `Client.getChannelLogs(channel, limit)` ==> `TextChannel.fetchMessages({options})`\n* `Server.detailsOfUser(User)` ==> `Server.members.get(User).properties` (retrieving a member gives a GuildMember object)\n* `Client.joinVoiceChannel(voicechannel)` => `VoiceChannel.join()`\n\nA couple more important details:\n* `Client.loginWithToken(\"token\")` ==> `client.login(\"token\")`\n* `Client.servers.length` ==> `client.guilds.size` (all instances of `server` are now `guild`)\n\n## No more callbacks!\nVersion 9 eschews callbacks in favour of Promises. This means all code relying on callbacks must be changed.  \nFor example, the following code:\n\n```js\nclient.getChannelLogs(channel, 100, function(messages) {\n  console.log(`${messages.length} messages found`);\n});\n```\n\n```js\nchannel.fetchMessages({limit: 100}).then(messages => {\n  console.log(`${messages.size} messages found`);\n});\n```\n","path":"docs/general/updating.md"},"faq":{"name":"FAQ","type":"md","content":"# Frequently Asked Questions\nThese questions are some of the most frequently asked.\n\n\n## No matter what, I get `SyntaxError: Block-scoped declarations (let, const, function, class) not yet supported outside strict mode`‽\nUpdate to Node.js 10.0.0 or newer.\n\n## How do I get voice working?\n- Install FFMPEG.\n- Install either the `node-opus` package or the `opusscript` package.\n  node-opus is greatly preferred, due to it having significantly better performance.\n\n## How do I install FFMPEG?\n- **npm:** `npm install ffmpeg-binaries`\n- **Ubuntu 16.04:** `sudo apt install ffmpeg`\n- **Ubuntu 14.04:** `sudo apt-get install libav-tools`\n- **Windows:** `npm install ffmpeg-binaries` or see the [FFMPEG section of AoDude's guide](https://github.com/bdistin/OhGodMusicBot/blob/master/README.md#download-ffmpeg).\n\n## How do I set up node-opus?\n- **Ubuntu:** Simply run `npm install node-opus`, and it's done. Congrats!\n- **Windows:** Run `npm install --global --production windows-build-tools` in an admin command prompt or PowerShell.\n  Then, running `npm install node-opus` in your bot's directory should successfully build it. Woo!\n\nOther questions can be found at the [official Discord.js guide](https://discordjs.guide/popular-topics/common-questions.html)\nIf you have issues not listed here or on the guide, feel free to ask in the [official Discord.js server](https://discord.gg/bRCvFy9).\nAlways make sure to read the [documentation](https://discord.js.org/#/docs/main/stable/general/welcome).\n","path":"docs/general/faq.md"}}},"topics":{"name":"Topics","files":{"voice":{"name":"Voice","type":"md","content":"# Introduction to Voice\nVoice in discord.js can be used for many things, such as music bots, recording or relaying audio.\n\nIn discord.js, you can use voice by connecting to a `VoiceChannel` to obtain a `VoiceConnection`, where you can start streaming and receiving audio.\n\nTo get started, make sure you have:\n* FFmpeg - `npm install ffmpeg-binaries`\n* an opus encoder, choose one from below:\n  * `npm install node-opus` (better performance)\n  * `npm install opusscript`\n* a good network connection\n\nThe preferred opus engine is node-opus, as it performs significantly better than opusscript. When both are available, discord.js will automatically choose node-opus.\nUsing opusscript is only recommended for development environments where node-opus is tough to get working.\nFor production bots, using node-opus should be considered a necessity, especially if they're going to be running on multiple servers.\n\n## Joining a voice channel\nThe example below reacts to a message and joins the sender's voice channel, catching any errors. This is important\nas it allows us to obtain a `VoiceConnection` that we can start to stream audio with.\n\n```js\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\nclient.login('token here');\n\nclient.on('message', async message => {\n  // Voice only works in guilds, if the message does not come from a guild,\n  // we ignore it\n  if (!message.guild) return;\n\n  if (message.content === '/join') {\n    // Only try to join the sender's voice channel if they are in one themselves\n    if (message.member.voice.channel) {\n      const connection = await message.member.voice.channel.join();\n    } else {\n      message.reply('You need to join a voice channel first!');\n    }\n  }\n});\n```\n\n## Streaming to a Voice Channel\nIn the previous example, we looked at how to join a voice channel in order to obtain a `VoiceConnection`. Now that we\nhave obtained a voice connection, we can start streaming audio to it.\n\n### Introduction to playing on voice connections\nThe most basic example of playing audio over a connection would be playing a local file:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3');\n```\n\nThe `dispatcher` in this case is a `StreamDispatcher` - here you can control the volume and playback of the stream:\n\n```js\ndispatcher.pause();\ndispatcher.resume();\n\ndispatcher.setVolume(0.5); // half the volume\n\ndispatcher.on('finish', () => {\n  console.log('Finished playing!');\n});\n\ndispatcher.destroy(); // end the stream\n```\n\nWe can also pass in options when we first play the stream:\n\n```js\nconst dispatcher = connection.play('/home/discord/audio.mp3', {\n  volume: 0.5\n});\n```\n\n### What can I play?\n\nDiscord.js allows you to play a lot of things:\n\n```js\n// ReadableStreams, in this example YouTube audio\nconst ytdl = require('ytdl-core');\nconnection.play(ytdl(\n  'https://www.youtube.com/watch?v=ZlAU_w7-Xp8',\n  { filter: 'audioonly' }));\n\n// Files on the internet\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');\n\n// Local files\nconnection.play('/home/discord/audio.mp3');\n```\n\nNew to v12 is the ability to play OggOpus and WebmOpus streams with much better performance by skipping out Ffmpeg. Note this comes at the cost of no longer having volume control over the stream:\n\n```js\nconnection.play(fs.createReadStream('./media.webm'), {\n  type: 'webm/opus'\n});\n\nconnection.play(fs.createReadStream('./media.ogg'), {\n  type: 'ogg/opus'\n});\n```\n\nMake sure to consult the documentation for a full list of what you can play - there's too much to cover here!\n\n## Voice Broadcasts\n\nA voice broadcast is very useful for \"radio\" bots, that play the same audio across multiple channels. It means audio is only transcoded once, and is much better on performance.\n\n```js\nconst broadcast = client.voice.createBroadcast();\n\nbroadcast.on('subscribe', dispatcher => {\n  console.log('New broadcast subscriber!');\n});\n\nbroadcast.on('unsubscribe', dispatcher => {\n  console.log('Channel unsubscribed from broadcast :(');\n})\n```\n\n`broadcast` is an instance of `VoiceBroadcast`, which has the same `play` method you are used to with regular VoiceConnections:\n\n```js\nconst dispatcher = broadcast.play('./audio.mp3');\n\nconnection.play(broadcast);\n```\n\nIt's important to note that the `dispatcher` stored above is a `BroadcastDispatcher` - it controls all the dispatcher subscribed to the broadcast, e.g. setting the volume of this dispatcher affects the volume of all subscribers.\n\n## Voice Receive\ncoming soon&trade;\n","path":"docs/topics/voice.md"},"web":{"name":"Web builds","type":"md","content":"# Web builds\nIn addition to your usual Node applications, discord.js has special distributions available that are capable of running in web browsers.\nThis is useful for client-side web apps that need to interact with the Discord API.\n[Webpack 3](https://webpack.js.org/) is used to build these.\n\n## Restrictions\n- Any voice-related functionality is unavailable, as there is currently no audio encoding/decoding capabilities without external native libraries,\n  which web browsers do not support.\n- The ShardingManager cannot be used, since it relies on being able to spawn child processes for shards.\n- None of the native optional packages are usable.\n\n### Require Library\nIf you are making your own webpack project, you can require `discord.js/browser` wherever you need to use discord.js, like so:\n```js\nconst Discord = require('discord.js/browser');\n// do something with Discord like you normally would\n```\n\n### Webpack File\nYou can obtain your desired version of discord.js' web build from the [webpack branch](https://github.com/discordjs/discord.js/tree/webpack) of the GitHub repository.\nThere is a file for each branch and version of the library, and the ones ending in `.min.js` are minified to substantially reduce the size of the source code.\n\nInclude the file on the page just as you would any other JS library, like so:\n```html\n<script type=\"text/javascript\" src=\"discord.VERSION.min.js\"></script>\n```\n\nRather than importing discord.js with `require('discord.js')`, the entire `Discord` object is available as a global (on the `window`) object.\nThe usage of the API isn't any different from using it in Node.js.\n\n#### Example\n```html\n<script type=\"text/javascript\" src=\"discord.11.1.0.min.js\"></script>\n<script type=\"text/javascript\">\n  const client = new Discord.Client();\n\n  client.on('message', msg => {\n    const guildTag = msg.channel.type === 'text' ? `[${msg.guild.name}]` : '[DM]';\n    const channelTag = msg.channel.type === 'text' ? `[#${msg.channel.name}]` : '';\n    console.log(`${guildTag}${channelTag} ${msg.author.tag}: ${msg.content}`);\n  });\n\n  client.login('some crazy token');\n</script>\n```\n","path":"docs/topics/web.md"},"partials":{"name":"Partials","type":"md","content":"# Partials\n\nPartials allow you to receive events that contain uncached instances, providing structures that contain very minimal\ndata. For example, if you were to receive a `messageDelete` event with an uncached message, normally Discord.js would\ndiscard the event. With partials, you're able to receive the event, with a Message object that contains just an ID.\n\n## Opting in\n\nPartials are opt-in, and you can enable them in the Client options by specifying [PartialTypes](/#/docs/main/master/typedef/PartialType):\n\n```js\n// Accept partial messages and DM channels when emitting events\nnew Client({ partials: ['MESSAGE', 'CHANNEL'] });\n```\n\n## Usage & warnings\n\n<warn>The only guaranteed data a partial structure can store is its ID. All other properties/methods should be\nconsidered invalid/defunct while accessing a partial structure.</warn>\n\nAfter opting-in with the above, you begin to allow partial messages and channels in your caches, so it's important\nto check whether they're safe to access whenever you encounter them, whether it be in events or through normal cache\nusage.\n\nAll instance of structures that you opted-in for will have a `partial` property. As you'd expect, this value is `true`\nwhen the instance is partial. Partial structures are only guaranteed to contain an ID, any other properties and methods\nno longer carry their normal type guarantees.\n\nThis means you have to take time to consider possible parts of your program that might need checks put in place to\nprevent accessing partial data:\n\n```js\nclient.on('messageDelete', message => {\n  console.log(`${message.id} was deleted!`);\n  // Partial messages do not contain any content so skip them\n  if (!message.partial) {\n    console.log(`It had content: \"${message.content}\"`);\n  }\n})\n\n// You can also try to upgrade partials to full instances:\nclient.on('messageReactionAdd', async (reaction, user) => {\n  // If a message gains a reaction and it is uncached, fetch and cache the message\n  // You should account for any errors while fetching, it could return API errors if the resource is missing\n  if (reaction.message.partial) await reaction.message.fetch();\n  // Now the message has been cached and is fully available:\n  console.log(`${reaction.message.author}'s message \"${reaction.message.content}\" gained a reaction!`);\n});\n```\n\n<info>If a message is deleted and both the message and channel are uncached, you must enable both 'MESSAGE' and\n'CHANNEL' in the client options to receive the messageDelete event.</info>\n\n## Why?\n\nThis allows developers to listen to events that contain uncached data, which is useful if you're running a moderation\nbot or any bot that relies on still receiving updates to resources you don't have cached -- message reactions are a\ngood example.\n\nCurrently, the only type of channel that can be uncached is a DM channel, there is no reason why guild channels should\nnot be cached.\n","path":"docs/topics/partials.md"}}},"examples":{"name":"Examples","files":{"ping":{"name":"Ping","type":"js","content":"/**\n * A ping pong bot, whenever you send \"ping\", it replies \"pong\".\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"ping\"\n  if (message.content === 'ping') {\n    // Send \"pong\" to the same channel\n    message.channel.send('pong');\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/ping.js"},"avatars":{"name":"Avatars","type":"js","content":"/**\n * Send a user a link to their avatar\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for messages\nclient.on('message', message => {\n  // If the message is \"what is my avatar\"\n  if (message.content === 'what is my avatar') {\n    // Send the user's avatar URL\n    message.reply(message.author.displayAvatarURL());\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/avatars.js"},"attachments":{"name":"Attachments","type":"md","content":"# Sending Attachments\n\nIn here you'll see a few examples showing how you can send an attachment using discord.js.\n\n## Sending an attachment using a URL\n\nThere are a few ways you can do this, but we'll show you the easiest.\n\nThe following examples use [MessageAttachment](/#/docs/main/master/class/MessageAttachment).\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel\n\t\tmessage.channel.send(attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here is the result:\n\n![Image showing the result](/static/attachment-example1.png)\n\nBut what if you want to send an attachment with a message content? Fear not, for it is easy to do that too! We'll recommend reading [the TextChannel's \"send\" function documentation](/#/docs/main/master/class/TextChannel?scrollTo=send) to see what other options are available.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('https://i.imgur.com/w3duR07.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd here's the result of this one:\n\n![Image showing the result](/static/attachment-example2.png)\n\n## Sending a local file or buffer\n\nSending a local file isn't hard either! We'll be using [MessageAttachment](/#/docs/main/master/class/MessageAttachment) for these examples too.\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!rip'\n\tif (message.content === '!rip') {\n\t\t// Create the attachment using MessageAttachment\n\t\tconst attachment = new MessageAttachment('./rip.png');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author},`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nThe results are the same as the URL examples:\n\n![Image showing result](/static/attachment-example1.png)\n\nBut what if you have a buffer from an image? Or a text document? Well, it's the same as sending a local file or a URL!\n\nIn the following example, we'll be getting the buffer from a `memes.txt` file, and send it in the message channel.\nYou can use any buffer you want, and send it. Just make sure to overwrite the filename if it isn't an image!\n\n```js\n// Extract the required classes from the discord.js module\nconst { Client, MessageAttachment } = require('discord.js');\n\n// Import the native fs module\nconst fs = require('fs');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n\t// If the message is '!memes'\n\tif (message.content === '!memes') {\n\t\t// Get the buffer from the 'memes.txt', assuming that the file exists\n\t\tconst buffer = fs.readFileSync('./memes.txt');\n\n\t\t/**\n\t\t * Create the attachment using MessageAttachment,\n\t\t * overwritting the default file name to 'memes.txt'\n\t\t * Read more about it over at\n\t\t * http://discord.js.org/#/docs/main/master/class/MessageAttachment\n\t\t */\n\t\tconst attachment = new MessageAttachment(buffer, 'memes.txt');\n\t\t// Send the attachment in the message channel with a content\n\t\tmessage.channel.send(`${message.author}, here are your memes!`, attachment);\n\t}\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd of course, the results are:\n\n![Attachment File example 3](/static/attachment-example3.png)\n","path":"docs/examples/attachments.md"},"greeting":{"name":"Server greeting","type":"js","content":"/**\n * A bot that welcomes new guild members when they join\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\n// Create an event listener for new guild members\nclient.on('guildMemberAdd', member => {\n  // Send the message to a designated channel on a server:\n  const channel = member.guild.channels.find(ch => ch.name === 'member-log');\n  // Do nothing if the channel wasn't found on this server\n  if (!channel) return;\n  // Send the message, mentioning the member\n  channel.send(`Welcome to the server, ${member}`);\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/greeting.js"},"embed":{"name":"Message Embed","type":"js","content":"/**\n * An example of how you can send embeds\n */\n\n// Extract the required classes from the discord.js module\nconst { Client, MessageEmbed } = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // If the message is \"how to embed\"\n  if (message.content === 'how to embed') {\n    // We can create embeds using the MessageEmbed constructor\n    // Read more about all that you can do with the constructor\n    // over at https://discord.js.org/#/docs/main/master/class/MessageEmbed\n    const embed = new MessageEmbed()\n      // Set the title of the field\n      .setTitle('A slick little embed')\n      // Set the color of the embed\n      .setColor(0xFF0000)\n      // Set the main content of the embed\n      .setDescription('Hello, this is a slick embed!');\n    // Send the embed to the same channel as the message\n    message.channel.send(embed);\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n","path":"docs/examples/embed.js"},"moderation":{"name":"Moderation","type":"md","content":"# Moderation\n\nIn here, you'll see some basic examples for kicking and banning a member.\n\n## Kicking a member\n\nLet's say you have a member that you'd like to kick. Here is an example of how you *can* do it.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // If the message content starts with \"!kick\"\n  if (message.content.startsWith('!kick')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Kick the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         */\n        member.kick('Optional reason that will display in the audit logs').then(() => {\n          // We let the message author know we were able to kick the person\n          message.reply(`Successfully kicked ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to kick the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to kick the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    // Otherwise, if no user was mentioned\n    } else {\n      message.reply('You didn\\'t mention the user to kick!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/kick-example.png)\n\n## Banning a member\n\nBanning works the same way as kicking, but it has slightly more options that can be changed.\n\n```js\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create an instance of a Discord client\nconst client = new Discord.Client();\n\n/**\n * The ready event is vital, it means that only _after_ this will your bot start reacting to information\n * received from Discord\n */\nclient.on('ready', () => {\n  console.log('I am ready!');\n});\n\nclient.on('message', message => {\n  // Ignore messages that aren't from a guild\n  if (!message.guild) return;\n\n  // if the message content starts with \"!ban\"\n  if (message.content.startsWith('!ban')) {\n    // Assuming we mention someone in the message, this will return the user\n    // Read more about mentions over at https://discord.js.org/#/docs/main/master/class/MessageMentions\n    const user = message.mentions.users.first();\n    // If we have a user mentioned\n    if (user) {\n      // Now we get the member from the user\n      const member = message.guild.member(user);\n      // If the member is in the guild\n      if (member) {\n        /**\n         * Ban the member\n         * Make sure you run this on a member, not a user!\n         * There are big differences between a user and a member\n         * Read more about what ban options there are over at\n         * https://discord.js.org/#/docs/main/master/class/GuildMember?scrollTo=ban\n         */\n        member.ban({\n          reason: 'They were bad!',\n        }).then(() => {\n          // We let the message author know we were able to ban the person\n          message.reply(`Successfully banned ${user.tag}`);\n        }).catch(err => {\n          // An error happened\n          // This is generally due to the bot not being able to ban the member,\n          // either due to missing permissions or role hierarchy\n          message.reply('I was unable to ban the member');\n          // Log the error\n          console.error(err);\n        });\n      } else {\n        // The mentioned user isn't in this guild\n        message.reply('That user isn\\'t in this guild!');\n      }\n    } else {\n    // Otherwise, if no user was mentioned\n      message.reply('You didn\\'t mention the user to ban!');\n    }\n  }\n});\n\n// Log our bot in using the token from https://discordapp.com/developers/applications/me\nclient.login('your token here');\n```\n\nAnd the result is:\n\n![Image showing the result](/static/ban-example.png)\n","path":"docs/examples/moderation.md"},"webhook":{"name":"Webhook","type":"js","content":"/**\n * Send a message using a webhook\n */\n\n// Import the discord.js module\nconst Discord = require('discord.js');\n\n// Create a new webhook\nconst hook = new Discord.WebhookClient('webhook id', 'webhook token');\n\n// Send a message using the webhook\nhook.send('I am now alive!');\n","path":"docs/examples/webhook.js"}}}},"classes":[{"name":"BaseClient","description":"The base class for all clients.","extends":[[["EventEmitter"]]],"props":[{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"Intervals set by {@link BaseClient#setImmediate} that are still active","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","meta":{"line":65,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"Sets an immediate that will be automatically cancelled if the client is destroyed.","params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Clears an immediate.","params":[{"name":"immediate","description":"Immediate to cancel","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":14,"file":"BaseClient.js","path":"src/client"}},{"name":"Client","description":"The main hub for interacting with the Discord API, and the starting point for any bot.","extends":[[["BaseClient"]]],"construct":{"name":"Client","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"ws","description":"The WebSocket manager of the client","type":[[["WebSocketManager"]]],"meta":{"line":77,"file":"Client.js","path":"src/client"}},{"name":"actions","description":"The action manager of the client","access":"private","type":[[["ActionsManager"]]],"meta":{"line":84,"file":"Client.js","path":"src/client"}},{"name":"voice","description":"The voice manager of the client (`null` in browsers)","nullable":true,"type":[[["ClientVoiceManager"]]],"meta":{"line":90,"file":"Client.js","path":"src/client"}},{"name":"shard","description":"Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})","nullable":true,"type":[[["ShardClientUtil"]]],"meta":{"line":96,"file":"Client.js","path":"src/client"}},{"name":"users","description":"All of the {@link User} objects that have been cached at any point, mapped by their IDs","type":[[["UserStore","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":104,"file":"Client.js","path":"src/client"}},{"name":"guilds","description":"All of the guilds the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* guild the bot is a member of","type":[[["GuildStore","<"],["Snowflake",", "],["Guild",">"]]],"meta":{"line":111,"file":"Client.js","path":"src/client"}},{"name":"channels","description":"All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\nas long as sharding isn't being used, this will be *every* channel in *every* guild the bot\nis a member of. Note that DM channels will not be initially cached, and thus not be present\nin the store without their explicit fetching or use.","type":[[["ChannelStore","<"],["Snowflake",", "],["Channel",">"]]],"meta":{"line":120,"file":"Client.js","path":"src/client"}},{"name":"presence","description":"The presence of the Client","access":"private","type":[[["ClientPresence"]]],"meta":{"line":128,"file":"Client.js","path":"src/client"}},{"name":"token","description":"Authorization token for the logged in bot\n<warn>This should be kept private at all times.</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":137,"file":"Client.js","path":"src/client"}},{"name":"user","description":"User that the client is logged in as","nullable":true,"type":[[["ClientUser"]]],"meta":{"line":146,"file":"Client.js","path":"src/client"}},{"name":"readyAt","description":"Time at which the client was last regarded as being in the `READY` state\n(each time the client disconnects and successfully reconnects, this will be overwritten)","nullable":true,"type":[[["Date"]]],"meta":{"line":153,"file":"Client.js","path":"src/client"}},{"name":"emojis","description":"All custom emojis that the client has access to, mapped by their IDs","readonly":true,"type":[[["GuildEmojiStore","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":165,"file":"Client.js","path":"src/client"}},{"name":"readyTimestamp","description":"Timestamp of the time the client was last `READY` at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":178,"file":"Client.js","path":"src/client"}},{"name":"uptime","description":"How long it has been since the client last entered the `READY` state in milliseconds","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":187,"file":"Client.js","path":"src/client"}},{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"Intervals set by {@link BaseClient#setImmediate} that are still active","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"login","description":"Logs the client in, establishing a websocket connection to Discord.","examples":["client.login('my token');"],"params":[{"name":"token","description":"Token of the account to log in with","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Token of the account used"},"meta":{"line":198,"file":"Client.js","path":"src/client"}},{"name":"destroy","description":"Logs out, terminates the connection to Discord, and destroys the client.","returns":[[["void"]]],"meta":{"line":222,"file":"Client.js","path":"src/client"}},{"name":"fetchInvite","description":"Obtains an invite from Discord.","examples":["client.fetchInvite('https://discord.gg/bRCvFy9')\n  .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"invite","description":"Invite code or URL","type":[[["InviteResolvable"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":237,"file":"Client.js","path":"src/client"}},{"name":"fetchWebhook","description":"Obtains a webhook from Discord.","examples":["client.fetchWebhook('id', 'token')\n  .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token for the webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":253,"file":"Client.js","path":"src/client"}},{"name":"fetchVoiceRegions","description":"Obtains the available voice regions from Discord.","examples":["client.fetchVoiceRegions()\n  .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":265,"file":"Client.js","path":"src/client"}},{"name":"sweepMessages","description":"Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\nIf the message has been edited, the time of the edit is used rather than the time of the original message.","examples":["// Remove all messages older than 1800 seconds from the messages cache\nconst amount = client.sweepMessages(1800);\nconsole.log(`Successfully removed ${amount} messages from the cache.`);"],"params":[{"name":"lifetime","description":"Messages that are older than this (in seconds)\nwill be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}","optional":true,"default":"this.options.messageCacheLifetime","type":[[["number"]]]}],"returns":{"types":[[["number"]]],"description":"Amount of messages that were removed from the caches,\nor -1 if the message cache lifetime is unlimited"},"meta":{"line":285,"file":"Client.js","path":"src/client"}},{"name":"fetchApplication","description":"Obtains the OAuth Application of this bot from Discord.","returns":[[["Promise","<"],["ClientApplication",">"]]],"meta":{"line":317,"file":"Client.js","path":"src/client"}},{"name":"generateInvite","description":"Generates a link that can be used to invite the bot to a guild.","examples":["client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n  .then(link => console.log(`Generated bot invite link: ${link}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"Permissions to request","optional":true,"type":[[["PermissionResolvable"]]]}],"async":true,"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":331,"file":"Client.js","path":"src/client"}},{"name":"_eval","description":"Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\nwith the client as `this`.","access":"private","params":[{"name":"script","description":"Script to eval","type":[[["string"]]]}],"returns":[["*"]],"meta":{"line":356,"file":"Client.js","path":"src/client"}},{"name":"_validateOptions","description":"Validates the client options.","access":"private","params":[{"name":"options","description":"Options to validate","optional":true,"default":"this.options","type":[[["ClientOptions"]]]}],"meta":{"line":365,"file":"Client.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"Sets an immediate that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setImmediate","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Clears an immediate.","inherits":"BaseClient#clearImmediate","inherited":true,"params":[{"name":"immediate","description":"Immediate to cancel","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"events":[{"name":"channelCreate","description":"Emitted whenever a channel is created.","params":[{"name":"channel","description":"The channel that was created","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":12,"file":"ChannelCreate.js","path":"src/client/actions"}},{"name":"channelDelete","description":"Emitted whenever a channel is deleted.","params":[{"name":"channel","description":"The channel that was deleted","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":25,"file":"ChannelDelete.js","path":"src/client/actions"}},{"name":"guildBanRemove","description":"Emitted whenever a member is unbanned from a guild.","params":[{"name":"guild","description":"The guild that the unban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was unbanned","type":[[["User"]]]}],"meta":{"line":11,"file":"GuildBanRemove.js","path":"src/client/actions"}},{"name":"guildUnavailable","description":"Emitted whenever a guild becomes unavailable, likely due to a server outage.","params":[{"name":"guild","description":"The guild that has become unavailable","type":[[["Guild"]]]}],"meta":{"line":25,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"guildDelete","description":"Emitted whenever a guild kicks the client or the guild is deleted/left.","params":[{"name":"guild","description":"The guild that was deleted","type":[[["Guild"]]]}],"meta":{"line":46,"file":"GuildDelete.js","path":"src/client/actions"}},{"name":"emojiCreate","description":"Emitted whenever a custom emoji is created in a guild.","params":[{"name":"emoji","description":"The emoji that was created","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiCreate.js","path":"src/client/actions"}},{"name":"emojiDelete","description":"Emitted whenever a custom emoji is deleted in a guild.","params":[{"name":"emoji","description":"The emoji that was deleted","type":[[["GuildEmoji"]]]}],"meta":{"line":10,"file":"GuildEmojiDelete.js","path":"src/client/actions"}},{"name":"emojiUpdate","description":"Emitted whenever a custom emoji is updated in a guild.","params":[{"name":"oldEmoji","description":"The old emoji","type":[[["GuildEmoji"]]]},{"name":"newEmoji","description":"The new emoji","type":[[["GuildEmoji"]]]}],"meta":{"line":9,"file":"GuildEmojiUpdate.js","path":"src/client/actions"}},{"name":"guildIntegrationsUpdate","description":"Emitted whenever a guild integration is updated","params":[{"name":"guild","description":"The guild whose integrations were updated","type":[[["Guild"]]]}],"meta":{"line":10,"file":"GuildIntegrationsUpdate.js","path":"src/client/actions"}},{"name":"guildMemberRemove","description":"Emitted whenever a member leaves a guild, or is kicked.","params":[{"name":"member","description":"The member that has left/been kicked from the guild","type":[[["GuildMember"]]]}],"meta":{"line":17,"file":"GuildMemberRemove.js","path":"src/client/actions"}},{"name":"roleCreate","description":"Emitted whenever a role is created.","params":[{"name":"role","description":"The role that was created","type":[[["Role"]]]}],"meta":{"line":14,"file":"GuildRoleCreate.js","path":"src/client/actions"}},{"name":"roleDelete","description":"Emitted whenever a guild role is deleted.","params":[{"name":"role","description":"The role that was deleted","type":[[["Role"]]]}],"meta":{"line":17,"file":"GuildRoleDelete.js","path":"src/client/actions"}},{"name":"roleUpdate","description":"Emitted whenever a guild role is updated.","params":[{"name":"oldRole","description":"The role before the update","type":[[["Role"]]]},{"name":"newRole","description":"The role after the update","type":[[["Role"]]]}],"meta":{"line":17,"file":"GuildRoleUpdate.js","path":"src/client/actions"}},{"name":"guildUpdate","description":"Emitted whenever a guild is updated - e.g. name change.","params":[{"name":"oldGuild","description":"The guild before the update","type":[[["Guild"]]]},{"name":"newGuild","description":"The guild after the update","type":[[["Guild"]]]}],"meta":{"line":13,"file":"GuildUpdate.js","path":"src/client/actions"}},{"name":"message","description":"Emitted whenever a message is created.","params":[{"name":"message","description":"The created message","type":[[["Message"]]]}],"meta":{"line":26,"file":"MessageCreate.js","path":"src/client/actions"}},{"name":"messageDelete","description":"Emitted whenever a message is deleted.","params":[{"name":"message","description":"The deleted message","type":[[["Message"]]]}],"meta":{"line":16,"file":"MessageDelete.js","path":"src/client/actions"}},{"name":"messageDeleteBulk","description":"Emitted whenever messages are deleted in bulk.","params":[{"name":"messages","description":"The deleted messages, mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]]]}],"meta":{"line":27,"file":"MessageDeleteBulk.js","path":"src/client/actions"}},{"name":"messageReactionAdd","description":"Emitted whenever a reaction is added to a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that applied the guild or reaction emoji","type":[[["User"]]]}],"meta":{"line":35,"file":"MessageReactionAdd.js","path":"src/client/actions"}},{"name":"messageReactionRemove","description":"Emitted whenever a reaction is removed from a cached message.","params":[{"name":"messageReaction","description":"The reaction object","type":[[["MessageReaction"]]]},{"name":"user","description":"The user whose emoji or reaction emoji was removed","type":[[["User"]]]}],"meta":{"line":32,"file":"MessageReactionRemove.js","path":"src/client/actions"}},{"name":"messageReactionRemoveAll","description":"Emitted whenever all reactions are removed from a cached message.","params":[{"name":"message","description":"The message the reactions were removed from","type":[[["Message"]]]}],"meta":{"line":23,"file":"MessageReactionRemoveAll.js","path":"src/client/actions"}},{"name":"presenceUpdate","description":"Emitted whenever a guild member's presence (e.g. status, activity) is changed.","params":[{"name":"oldPresence","description":"The presence before the update, if one at all","nullable":true,"type":[[["Presence"]]]},{"name":"newPresence","description":"The presence after the update","type":[[["Presence"]]]}],"meta":{"line":33,"file":"PresenceUpdate.js","path":"src/client/actions"}},{"name":"userUpdate","description":"Emitted whenever a user's details (e.g. username) are changed.","params":[{"name":"oldUser","description":"The user before the update","type":[[["User"]]]},{"name":"newUser","description":"The user after the update","type":[[["User"]]]}],"meta":{"line":14,"file":"UserUpdate.js","path":"src/client/actions"}},{"name":"voiceStateUpdate","description":"Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.","params":[{"name":"oldState","description":"The voice state before the update","type":[[["VoiceState"]]]},{"name":"newState","description":"The voice state after the update","type":[[["VoiceState"]]]}],"meta":{"line":33,"file":"VoiceStateUpdate.js","path":"src/client/actions"}},{"name":"webhookUpdate","description":"Emitted whenever a guild text channel has its webhooks changed.","params":[{"name":"channel","description":"The channel that had a webhook update","type":[[["TextChannel"]]]}],"meta":{"line":10,"file":"WebhooksUpdate.js","path":"src/client/actions"}},{"name":"warn","description":"Emitted for general warnings.","params":[{"name":"info","description":"The warning","type":[[["string"]]]}],"meta":{"line":412,"file":"Client.js","path":"src/client"}},{"name":"debug","description":"Emitted for general debugging information.","params":[{"name":"info","description":"The debug information","type":[[["string"]]]}],"meta":{"line":418,"file":"Client.js","path":"src/client"}},{"name":"guildMemberSpeaking","description":"Emitted once a guild member changes speaking state.","params":[{"name":"member","description":"The member that started/stopped speaking","type":[[["GuildMember"]]]},{"name":"speaking","description":"The speaking state of the member","type":[[["Readonly","<"],["Speaking",">"]]]}],"meta":{"line":496,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channelPinsUpdate","description":"Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\nnot much information can be provided easily here - you need to manually check the pins yourself.","params":[{"name":"channel","description":"The channel that the pins update occurred in","type":[[["DMChannel"]],[["TextChannel"]]]},{"name":"time","description":"The time of the pins update","type":[[["Date"]]]}],"meta":{"line":13,"file":"CHANNEL_PINS_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"channelUpdate","description":"Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.","params":[{"name":"oldChannel","description":"The channel before the update","type":[[["DMChannel"]],[["GuildChannel"]]]},{"name":"newChannel","description":"The channel after the update","type":[[["DMChannel"]],[["GuildChannel"]]]}],"meta":{"line":8,"file":"CHANNEL_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"guildBanAdd","description":"Emitted whenever a member is banned from a guild.","params":[{"name":"guild","description":"The guild that the ban occurred in","type":[[["Guild"]]]},{"name":"user","description":"The user that was banned","type":[[["User"]]]}],"meta":{"line":9,"file":"GUILD_BAN_ADD.js","path":"src/client/websocket/handlers"}},{"name":"guildCreate","description":"Emitted whenever the client joins a guild.","params":[{"name":"guild","description":"The created guild","type":[[["Guild"]]]}],"meta":{"line":19,"file":"GUILD_CREATE.js","path":"src/client/websocket/handlers"}},{"name":"guildMemberAdd","description":"Emitted whenever a user joins a guild.","params":[{"name":"member","description":"The member that has joined a guild","type":[[["GuildMember"]]]}],"meta":{"line":11,"file":"GUILD_MEMBER_ADD.js","path":"src/client/websocket/handlers"}},{"name":"guildMemberUpdate","description":"Emitted whenever a guild member changes - i.e. new role, removed role, nickname.","params":[{"name":"oldMember","description":"The member before the update","type":[[["GuildMember"]]]},{"name":"newMember","description":"The member after the update","type":[[["GuildMember"]]]}],"meta":{"line":12,"file":"GUILD_MEMBER_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"guildMembersChunk","description":"Emitted whenever a chunk of guild members is received (all members come from the same guild).","params":[{"name":"members","description":"The members in the chunk","type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]]},{"name":"guild","description":"The guild related to the member chunk","type":[[["Guild"]]]}],"meta":{"line":12,"file":"GUILD_MEMBERS_CHUNK.js","path":"src/client/websocket/handlers"}},{"name":"messageUpdate","description":"Emitted whenever a message is updated - e.g. embed or content change.","params":[{"name":"oldMessage","description":"The message before the update","type":[[["Message"]]]},{"name":"newMessage","description":"The message after the update","type":[[["Message"]]]}],"meta":{"line":8,"file":"MESSAGE_UPDATE.js","path":"src/client/websocket/handlers"}},{"name":"shardResume","description":"Emitted when a shard resumes successfully.","params":[{"name":"id","description":"The shard ID that resumed","type":[[["number"]]]},{"name":"replayedEvents","description":"The amount of replayed events","type":[[["number"]]]}],"meta":{"line":7,"file":"RESUMED.js","path":"src/client/websocket/handlers"}},{"name":"typingStart","description":"Emitted whenever a user starts typing in a channel.","params":[{"name":"channel","description":"The channel the user started typing in","type":[[["Channel"]]]},{"name":"user","description":"The user that started typing","type":[[["User"]]]}],"meta":{"line":10,"file":"TYPING_START.js","path":"src/client/websocket/handlers"}},{"name":"shardReady","description":"Emitted when a shard turns ready.","params":[{"name":"id","description":"The shard ID that turned ready","type":[[["number"]]]}],"meta":{"line":194,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardDisconnect","description":"Emitted when a shard's WebSocket disconnects and will no longer reconnect.","params":[{"name":"event","description":"The WebSocket close event","type":[[["CloseEvent"]]]},{"name":"id","description":"The shard ID that disconnected","type":[[["number"]]]}],"meta":{"line":206,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardReconnecting","description":"Emitted when a shard is attempting to reconnect or re-identify.","params":[{"name":"id","description":"The shard ID that is attempting to reconnect","type":[[["number"]]]}],"meta":{"line":222,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"invalidated","description":"Emitted when the client's session becomes invalidated.\nYou are expected to handle closing the process gracefully and preventing a boot loop\nif you are listening to this event.","meta":{"line":307,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ready","description":"Emitted when the client becomes ready to start working.","meta":{"line":442,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardError","description":"Emitted whenever a shard's WebSocket encounters a connection error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]},{"name":"shardID","description":"The shard that encountered this error","type":[[["number"]]]}],"meta":{"line":297,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"rateLimit","description":"Emitted when the client hits a rate limit while making a request","params":[{"name":"rateLimitInfo","description":"Object containing the rate limit info","type":[[["Object"]]]},{"name":"rateLimitInfo.timeout","description":"Timeout in ms","type":[[["number"]]]},{"name":"rateLimitInfo.limit","description":"Number of requests that can be made to this endpoint","type":[[["number"]]]},{"name":"rateLimitInfo.method","description":"HTTP method used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.path","description":"Path used for request that triggered this event","type":[[["string"]]]},{"name":"rateLimitInfo.route","description":"Route used for request that triggered this event","type":[[["string"]]]}],"meta":{"line":71,"file":"RequestHandler.js","path":"src/rest"}},{"name":"error","description":"Emitted when the client encounters an error.","params":[{"name":"error","description":"The error encountered","type":[[["Error"]]]}],"meta":{"line":185,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":31,"file":"Client.js","path":"src/client"}},{"name":"ClientVoiceManager","description":"Manages voice connections for the client","props":[{"name":"client","description":"The client that instantiated this voice manager","readonly":true,"type":[[["Client"]]],"meta":{"line":13,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"connections","description":"A collection mapping connection IDs to the Connection objects","type":[[["Collection","<"],["Snowflake",", "],["VoiceConnection",">"]]],"meta":{"line":25,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"broadcasts","description":"Active voice broadcasts that have been created","type":[[["Array","<"],["VoiceBroadcast",">"]]],"meta":{"line":31,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"methods":[{"name":"createBroadcast","description":"Creates a voice broadcast.","returns":[[["VoiceBroadcast"]]],"meta":{"line":38,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"joinChannel","description":"Sets up a request to join a voice channel.","access":"private","params":[{"name":"channel","description":"The voice channel to join","type":[[["VoiceChannel"]]]}],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":69,"file":"ClientVoiceManager.js","path":"src/client/voice"}}],"meta":{"line":12,"file":"ClientVoiceManager.js","path":"src/client/voice"}},{"name":"BroadcastDispatcher","description":"The class that sends voice packet data to the voice connection.","extends":[[["StreamDispatcher"]]],"implements":[[["VolumeInterface"]]],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":44,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":56,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":63,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","readonly":true,"type":[[["boolean"]]],"meta":{"line":151,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused in milliseconds","readonly":true,"type":[[["number"]]],"meta":{"line":158,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","readonly":true,"type":[[["number"]]],"meta":{"line":184,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","readonly":true,"type":[[["number"]]],"meta":{"line":193,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":328,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', 48kbps will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":38,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pause","description":"Pauses playback","inherits":"StreamDispatcher#pause","inherited":true,"params":[{"name":"silence","description":"Whether to play silence while paused to prevent audio glitches","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":134,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","inherits":"StreamDispatcher#resume","inherited":true,"meta":{"line":165,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","inherits":"StreamDispatcher#setPLP","inherited":true,"params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":215,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","inherits":"StreamDispatcher#setFEC","inherited":true,"params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":226,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","inherits":"StreamDispatcher#setVolume","inherited":true,"implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","inherits":"StreamDispatcher#setVolumeDecibels","inherited":true,"implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","inherits":"StreamDispatcher#setVolumeLogarithmic","inherited":true,"implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":82,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":292,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":313,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeChange","description":"Emitted when the volume of this dispatcher changes.","params":[{"name":"oldVolume","description":"The old volume of this dispatcher","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this dispatcher","type":[[["number"]]]}],"meta":{"line":337,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":11,"file":"BroadcastDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"StreamDispatcher","description":"The class that sends voice packet data to the voice connection.\n```js\n// Obtained using:\nvoiceChannel.join().then(connection => {\n  // You can play a file or a stream here:\n  const dispatcher = connection.play('/home/hydrabolt/audio.mp3');\n});\n```","extends":[[["WritableStream"]]],"implements":[[["VolumeInterface"]]],"props":[{"name":"player","description":"The Audio Player that controls this dispatcher","type":[[["AudioPlayer"]]],"meta":{"line":44,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedSince","description":"The time that the stream was paused at (null if not paused)","nullable":true,"type":[[["number"]]],"meta":{"line":56,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"broadcast","description":"The broadcast controlling this dispatcher, if any","nullable":true,"type":[[["VoiceBroadcast"]]],"meta":{"line":63,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"paused","description":"Whether or not playback is paused","readonly":true,"type":[[["boolean"]]],"meta":{"line":151,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"pausedTime","description":"Total time that this dispatcher has been paused in milliseconds","readonly":true,"type":[[["number"]]],"meta":{"line":158,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"streamTime","description":"The time (in milliseconds) that the dispatcher has actually been playing audio for","readonly":true,"type":[[["number"]]],"meta":{"line":184,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"totalStreamTime","description":"The time (in milliseconds) that the dispatcher has been playing audio for, taking into account skips and pauses","readonly":true,"type":[[["number"]]],"meta":{"line":193,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"bitrateEditable","description":"Whether or not the Opus bitrate of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":328,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"pause","description":"Pauses playback","params":[{"name":"silence","description":"Whether to play silence while paused to prevent audio glitches","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":134,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"resume","description":"Resumes playback","meta":{"line":165,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setBitrate","description":"Set the bitrate of the current Opus encoder if using a compatible Opus stream.","params":[{"name":"value","description":"New bitrate, in kbps\nIf set to 'auto', the voice channel's bitrate will be used","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"true if the bitrate has been successfully changed."},"meta":{"line":203,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setPLP","description":"Sets the expected packet loss percentage if using a compatible Opus stream.","params":[{"name":"value","description":"between 0 and 1","type":[[["number"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":215,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setFEC","description":"Enables or disables forward error correction if using a compatible Opus stream.","params":[{"name":"enabled","description":"true to enable","type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]]],"description":"Returns true if it was successfully set."},"meta":{"line":226,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","implements":["VolumeInterface#setVolume"],"params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","implements":["VolumeInterface#setVolumeDecibels"],"params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","implements":["VolumeInterface#setVolumeLogarithmic"],"params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"error","description":"Emitted when the dispatcher encounters an error.","meta":{"line":82,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"start","description":"Emitted once the stream has started to play.","meta":{"line":106,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"debug","description":"Emitted whenever the dispatcher has debug information.","params":[{"name":"info","description":"The debug info","type":[[["string"]]]}],"meta":{"line":292,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"speaking","description":"Emitted when the dispatcher starts/stops speaking.","params":[{"name":"value","description":"Whether or not the dispatcher is speaking","type":[[["boolean"]]]}],"meta":{"line":313,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"volumeChange","description":"Emitted when the volume of this dispatcher changes.","params":[{"name":"oldVolume","description":"The old volume of this dispatcher","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this dispatcher","type":[[["number"]]]}],"meta":{"line":337,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}}],"meta":{"line":34,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"VoiceConnectionUDPClient","description":"Represents a UDP client for a Voice Connection.","extends":[[["EventEmitter"]]],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that this UDP client serves","type":[[["VoiceConnection"]]],"meta":{"line":21,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"socket","description":"The UDP socket","nullable":true,"type":[[["Socket"]]],"meta":{"line":27,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordAddress","description":"The address of the Discord voice server","nullable":true,"type":[[["string"]]],"meta":{"line":33,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localAddress","description":"The local IP address","nullable":true,"type":[[["string"]]],"meta":{"line":39,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"localPort","description":"The local port","nullable":true,"type":[[["string"]]],"meta":{"line":45,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"discordPort","description":"The port of the Discord voice server","readonly":true,"type":[[["number"]]],"meta":{"line":67,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"methods":[{"name":"send","description":"Send a packet to the UDP client.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":76,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}}],"meta":{"line":14,"file":"VoiceUDPClient.js","path":"src/client/voice/networking"}},{"name":"VoiceWebSocket","description":"Represents a Voice Connection's WebSocket.","extends":[[["EventEmitter"]]],"access":"private","props":[{"name":"connection","description":"The Voice Connection that this WebSocket serves","type":[[["VoiceConnection"]]],"meta":{"line":20,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"attempts","description":"How many connection attempts have been made","type":[[["number"]]],"meta":{"line":26,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"client","description":"The client of this voice WebSocket","readonly":true,"type":[[["Client"]]],"meta":{"line":37,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"ws","description":"The actual WebSocket used to connect to the Voice WebSocket Server.","type":[[["WebSocket"]]],"meta":{"line":77,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"methods":[{"name":"reset","description":"Resets the current WebSocket.","meta":{"line":50,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"connect","description":"Starts connecting to the Voice WebSocket Server.","meta":{"line":62,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"send","description":"Sends data to the WebSocket if it is open.","params":[{"name":"data","description":"The data to send to the WebSocket","type":[[["string"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":90,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendPacket","description":"JSON.stringify's a packet and then sends it to the WebSocket Server.","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":105,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onOpen","description":"Called whenever the WebSocket opens.","meta":{"line":117,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onMessage","description":"Called whenever a message is received from the WebSocket.","params":[{"name":"event","description":"The message event that was received","type":[[["MessageEvent"]]]}],"returns":[[["void"]]],"meta":{"line":137,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onClose","description":"Called whenever the connection to the WebSocket server is lost.","meta":{"line":148,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","params":[{"name":"error","description":"The error that occurred","type":[[["Error"]]]}],"meta":{"line":157,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"onPacket","description":"Called whenever a valid packet is received from the WebSocket.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":166,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"setHeartbeat","description":"Sets an interval at which to send a heartbeat packet to the WebSocket.","params":[{"name":"interval","description":"The interval at which to send a heartbeat packet","type":[[["number"]]]}],"meta":{"line":223,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"clearHeartbeat","description":"Clears a heartbeat interval, if one exists.","meta":{"line":243,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sendHeartbeat","description":"Sends a heartbeat packet.","meta":{"line":255,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"events":[{"name":"ready","description":"Emitted once the voice WebSocket receives the ready packet.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":173,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"sessionDescription","description":"Emitted once the Voice Websocket receives a description of this voice session.","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":183,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"speaking","description":"Emitted whenever a speaking packet is received.","params":[{"name":"data","type":[[["Object"]]]}],"meta":{"line":201,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"unknownPacket","description":"Emitted when an unhandled packet is received.","params":[{"name":"packet","type":[[["Object"]]]}],"meta":{"line":209,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"warn","description":"Emitted whenever the voice WebSocket encounters a non-fatal error.","params":[{"name":"warn","description":"The warning","type":[[["string"]]]}],"meta":{"line":229,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}}],"meta":{"line":14,"file":"VoiceWebSocket.js","path":"src/client/voice/networking"}},{"name":"AudioPlayer","description":"An Audio Player for a Voice Connection.","extends":[[["BasePlayer"]]],"access":"private","props":[{"name":"voiceConnection","description":"The voice connection that the player serves","type":[[["VoiceConnection"]]],"meta":{"line":17,"file":"AudioPlayer.js","path":"src/client/voice/player"}},{"name":"broadcast","description":"The broadcast that the player serves","type":[[["VoiceBroadcast"]]],"meta":{"line":18,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}}],"meta":{"line":12,"file":"BroadcastAudioPlayer.js","path":"src/client/voice/player"}},{"name":"BasePlayer","description":"An Audio Player for a Voice Connection.","extends":[[["EventEmitter"]]],"access":"private","meta":{"line":22,"file":"BasePlayer.js","path":"src/client/voice/player"}},{"name":"VoiceReceiver","description":"Receives audio packets from a voice connection.","methods":[{"name":"createStream","description":"Creates a new audio receiving stream. If a stream already exists for a user, then that stream will be returned\nrather than generating a new one.","params":[{"name":"user","description":"The user to start listening to.","type":[[["UserResolvable"]]]},{"name":"options","description":"Options.","type":[[["ReceiveStreamOptions"]]]}],"returns":[[["ReadableStream"]]],"meta":{"line":45,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"events":[{"name":"debug","description":"Emitted whenever there is a warning","params":[{"name":"error","description":"The error or message to debug","type":[[["Error"]],[["string"]]]}],"meta":{"line":20,"file":"Receiver.js","path":"src/client/voice/receiver"}}],"meta":{"line":16,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"PlayInterface","description":"An interface class to allow you to play audio over VoiceConnections and VoiceBroadcasts.","methods":[{"name":"play","description":"Play an audio resource.","examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":62,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"meta":{"line":38,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"VolumeInterface","description":"An interface class for volume transformation.","extends":[[["EventEmitter"]]],"props":[{"name":"volumeEditable","description":"Whether or not the volume of this stream is editable","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volume","description":"The current volume of the stream","readonly":true,"type":[[["number"]]],"meta":{"line":29,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeDecibels","description":"The current volume of the stream in decibels","readonly":true,"type":[[["number"]]],"meta":{"line":38,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"volumeLogarithmic","description":"The current volume of the stream from a logarithmic scale","readonly":true,"type":[[["number"]]],"meta":{"line":47,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"methods":[{"name":"setVolume","description":"Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.","params":[{"name":"volume","description":"The volume that you want to set","type":[[["number"]]]}],"meta":{"line":69,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeDecibels","description":"Sets the volume in decibels.","params":[{"name":"db","description":"The decibels","type":[[["number"]]]}],"meta":{"line":84,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"setVolumeLogarithmic","description":"Sets the volume so that a perceived value of 0.5 is half the perceived volume etc.","params":[{"name":"value","description":"The value for the volume","type":[[["number"]]]}],"meta":{"line":92,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"volumeChange","description":"Emitted when the volume of this interface changes.","params":[{"name":"oldVolume","description":"The old volume of this interface","type":[[["number"]]]},{"name":"newVolume","description":"The new volume of this interface","type":[[["number"]]]}],"meta":{"line":70,"file":"VolumeInterface.js","path":"src/client/voice/util"}}],"meta":{"line":10,"file":"VolumeInterface.js","path":"src/client/voice/util"}},{"name":"VoiceBroadcast","description":"A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n\nExample usage:\n```js\nconst broadcast = client.voice.createBroadcast();\nbroadcast.play('./music.mp3');\n// Play \"music.mp3\" in all voice connections that the client is in\nfor (const connection of client.voice.connections.values()) {\n  connection.play(broadcast);\n}\n```","implements":[[["PlayInterface"]]],"props":[{"name":"client","description":"The client that created the broadcast","type":[[["Client"]]],"meta":{"line":29,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"subscribers","description":"The subscribed StreamDispatchers of this broadcast","type":[[["Array","<"],["StreamDispatcher",">"]]],"meta":{"line":34,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current master dispatcher, if any. This dispatcher controls all that is played by subscribed dispatchers.","readonly":true,"nullable":true,"type":[[["BroadcastDispatcher"]]],"meta":{"line":43,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"methods":[{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nbroadcast.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nbroadcast.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { filter: 'audioonly' }));","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nbroadcast.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["BroadcastDispatcher"]]],"meta":{"line":62,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"end","description":"Ends the broadcast, unsubscribing all subscribed channels and deleting the broadcast","meta":{"line":68,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"events":[{"name":"subscribe","description":"Emitted whenever a stream dispatcher subscribes to the broadcast.","params":[{"name":"subscriber","description":"The subscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":78,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"unsubscribe","description":"Emitted whenever a stream dispatcher unsubscribes to the broadcast.","params":[{"name":"dispatcher","description":"The unsubscribed dispatcher","type":[[["StreamDispatcher"]]]}],"meta":{"line":95,"file":"VoiceBroadcast.js","path":"src/client/voice"}}],"meta":{"line":23,"file":"VoiceBroadcast.js","path":"src/client/voice"}},{"name":"VoiceConnection","description":"Represents a connection to a guild's voice server.\n```js\n// Obtained using:\nvoiceChannel.join()\n  .then(connection => {\n\n  });\n```","extends":[[["EventEmitter"]]],"implements":[[["PlayInterface"]]],"props":[{"name":"voiceManager","description":"The voice manager that instantiated this connection","type":[[["ClientVoiceManager"]]],"meta":{"line":49,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"channel","description":"The voice channel this connection is currently serving","type":[[["VoiceChannel"]]],"meta":{"line":55,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"status","description":"The current status of the voice connection","type":[[["VoiceStatus"]]],"meta":{"line":61,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Our current speaking state","type":[[["Readonly","<"],["Speaking",">"]]],"meta":{"line":67,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authentication","description":"The authentication data needed to connect to the voice server","access":"private","type":[[["Object"]]],"meta":{"line":74,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"player","description":"The audio player for this voice connection","type":[[["AudioPlayer"]]],"meta":{"line":80,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ssrcMap","description":"Map SSRC values to user IDs","access":"private","type":[[["Map","<"],["number",", "],["Snowflake",">"]]],"meta":{"line":107,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_speaking","description":"Tracks which users are talking","access":"private","type":[[["Map","<"],["Snowflake",", "],["Readonly","<"],["Speaking",">>"]]],"meta":{"line":114,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sockets","description":"Object that wraps contains the `ws` and `udp` sockets of this voice connection","access":"private","type":[[["Object"]]],"meta":{"line":121,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"receiver","description":"The voice receiver of this connection","type":[[["VoiceReceiver"]]],"meta":{"line":127,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"client","description":"The client that instantiated this connection","readonly":true,"type":[[["Client"]]],"meta":{"line":135,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"dispatcher","description":"The current stream dispatcher (if any)","readonly":true,"nullable":true,"type":[[["StreamDispatcher"]]],"meta":{"line":144,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"voice","description":"The voice state of this connection","type":[[["VoiceState"]]],"meta":{"line":173,"file":"VoiceConnection.js","path":"src/client/voice"}}],"methods":[{"name":"setSpeaking","description":"Sets whether the voice connection should display as \"speaking\", \"soundshare\" or \"none\".","access":"private","params":[{"name":"value","description":"The new speaking state","type":[[["BitFieldResolvable"]]]}],"meta":{"line":153,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"sendVoiceStateUpdate","description":"Sends a request to the main gateway to join a voice channel.","access":"private","params":[{"name":"options","description":"The options to provide","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":183,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setTokenAndEndpoint","description":"Set the token and endpoint required to connect to the voice servers.","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":206,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"setSessionID","description":"Sets the Session ID for the connection.","access":"private","params":[{"name":"sessionID","description":"The voice session ID","type":[[["string"]]]}],"meta":{"line":240,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"checkAuthenticated","description":"Checks whether the voice connection is authenticated.","access":"private","meta":{"line":265,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticateFailed","description":"Invoked when we fail to initiate a voice connection.","access":"private","params":[{"name":"reason","description":"The reason for failure","type":[[["string"]]]}],"meta":{"line":284,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"updateChannel","description":"Move to a different voice channel in the same guild.","access":"private","params":[{"name":"channel","description":"The channel to move to","type":[[["VoiceChannel"]]]}],"meta":{"line":310,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticate","description":"Attempts to authenticate to the voice server.","access":"private","meta":{"line":319,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnect","description":"Attempts to reconnect to the voice server (typically after a region change).","access":"private","params":[{"name":"token","description":"The voice token","type":[[["string"]]]},{"name":"endpoint","description":"The voice endpoint","type":[[["string"]]]}],"meta":{"line":331,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Disconnects the voice connection, causing a disconnect and closing event to be emitted.","meta":{"line":348,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"_disconnect","description":"Internally disconnects (doesn't send disconnect packet).","access":"private","meta":{"line":364,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"cleanup","description":"Cleans up after disconnect.","access":"private","meta":{"line":379,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"connect","description":"Connect the voice connection.","access":"private","meta":{"line":404,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onReady","description":"Invoked when the voice websocket is ready.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":435,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSessionDescription","description":"Invoked when a session description is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":452,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"onSpeaking","description":"Invoked when a speaking event is received.","access":"private","params":[{"name":"data","description":"The received data","type":[[["Object"]]]}],"meta":{"line":473,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"play","description":"Play an audio resource.","implements":["PlayInterface#play"],"examples":["// Play a local audio file\nconnection.play('/home/hydrabolt/audio.mp3', { volume: 0.5 });","// Play a ReadableStream\nconnection.play(ytdl('https://www.youtube.com/watch?v=ZlAU_w7-Xp8', { quality: 'highestaudio' }));","// Play a voice broadcast\nconst broadcast = client.createVoiceBroadcast();\nbroadcast.play('/home/hydrabolt/audio.mp3');\nconnection.play(broadcast);","// Using different protocols: https://ffmpeg.org/ffmpeg-protocols.html\nconnection.play('http://www.sample-videos.com/audio/mp3/wave.mp3');"],"params":[{"name":"resource","description":"The resource to play.","type":[[["VoiceBroadcast"]],[["ReadableStream"]],[["string"]]]},{"name":"options","description":"The options to play.","optional":true,"type":[[["StreamOptions"]]]}],"returns":[[["StreamDispatcher"]]],"meta":{"line":62,"file":"PlayInterface.js","path":"src/client/voice/util"}}],"events":[{"name":"debug","description":"Debug info from the connection.","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":83,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"warn","description":"Warning info from the connection.","params":[{"name":"warning","description":"The warning","type":[[["string"]],[["Error"]]]}],"meta":{"line":92,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"newSession","description":"Emitted when a new session ID is received.","meta":{"line":252,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"authenticated","description":"Emitted when we successfully initiate a voice connection.","meta":{"line":270,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"failed","description":"Emitted when we fail to initiate a voice connection.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":288,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"error","description":"Emitted whenever the connection encounters an error.","params":[{"name":"error","description":"The encountered error","type":[[["Error"]]]}],"meta":{"line":295,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"reconnecting","description":"Emitted when the voice connection is reconnecting (typically after a region change).","meta":{"line":337,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"disconnect","description":"Emitted when the voice connection disconnects.","meta":{"line":367,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"ready","description":"Emitted once the connection is ready, when a promise to join a voice channel resolves,\nthe connection will already be ready.","meta":{"line":459,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"speaking","description":"Emitted whenever a user changes speaking state.","params":[{"name":"user","description":"The user that has changed speaking state","type":[[["User"]]]},{"name":"speaking","description":"The speaking state of the user","type":[[["Readonly","<"],["Speaking",">"]]]}],"meta":{"line":480,"file":"VoiceConnection.js","path":"src/client/voice"}}],"meta":{"line":42,"file":"VoiceConnection.js","path":"src/client/voice"}},{"name":"WebhookClient","description":"The webhook client.","extends":[[["BaseClient"]]],"implements":[[["Webhook"]]],"construct":{"name":"WebhookClient","params":[{"name":"id","description":"ID of the webhook","type":[[["Snowflake"]]]},{"name":"token","description":"Token of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for the client","optional":true,"type":[[["ClientOptions"]]]}]},"props":[{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":46,"file":"Webhook.js","path":"src/structures"}},{"name":"_timeouts","description":"Timeouts set by {@link BaseClient#setTimeout} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":22,"file":"BaseClient.js","path":"src/client"}},{"name":"_intervals","description":"Intervals set by {@link BaseClient#setInterval} that are still active","access":"private","type":[[["Set","<"],["Timeout",">"]]],"meta":{"line":29,"file":"BaseClient.js","path":"src/client"}},{"name":"_immediates","description":"Intervals set by {@link BaseClient#setImmediate} that are still active","access":"private","type":[[["Set","<"],["Immediate",">"]]],"meta":{"line":36,"file":"BaseClient.js","path":"src/client"}},{"name":"options","description":"The options the client was instantiated with","type":[[["ClientOptions"]]],"meta":{"line":42,"file":"BaseClient.js","path":"src/client"}},{"name":"rest","description":"The REST manager of the client","access":"private","type":[[["RESTManager"]]],"meta":{"line":49,"file":"BaseClient.js","path":"src/client"}},{"name":"api","description":"API shortcut","access":"private","readonly":true,"type":[[["Object"]]],"meta":{"line":58,"file":"BaseClient.js","path":"src/client"}}],"methods":[{"name":"destroy","description":"Destroys all assets used by the base client.","inherits":"BaseClient#destroy","inherited":true,"meta":{"line":65,"file":"BaseClient.js","path":"src/client"}},{"name":"setTimeout","description":"Sets a timeout that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setTimeout","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait before executing (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":81,"file":"BaseClient.js","path":"src/client"}},{"name":"clearTimeout","description":"Clears a timeout.","inherits":"BaseClient#clearTimeout","inherited":true,"params":[{"name":"timeout","description":"Timeout to cancel","type":[[["Timeout"]]]}],"meta":{"line":94,"file":"BaseClient.js","path":"src/client"}},{"name":"setInterval","description":"Sets an interval that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setInterval","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"delay","description":"Time to wait between executions (in milliseconds)","type":[[["number"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Timeout"]]],"meta":{"line":106,"file":"BaseClient.js","path":"src/client"}},{"name":"clearInterval","description":"Clears an interval.","inherits":"BaseClient#clearInterval","inherited":true,"params":[{"name":"interval","description":"Interval to cancel","type":[[["Timeout"]]]}],"meta":{"line":116,"file":"BaseClient.js","path":"src/client"}},{"name":"setImmediate","description":"Sets an immediate that will be automatically cancelled if the client is destroyed.","inherits":"BaseClient#setImmediate","inherited":true,"params":[{"name":"fn","description":"Function to execute","type":[[["function"]]]},{"name":"args","description":"Arguments for the function","variable":true,"type":[["*"]]}],"returns":[[["Immediate"]]],"meta":{"line":127,"file":"BaseClient.js","path":"src/client"}},{"name":"clearImmediate","description":"Clears an immediate.","inherits":"BaseClient#clearImmediate","inherited":true,"params":[{"name":"immediate","description":"Immediate to cancel","type":[[["Immediate"]]]}],"meta":{"line":137,"file":"BaseClient.js","path":"src/client"}}],"meta":{"line":21,"file":"WebhookClient.js","path":"src/client"}},{"name":"WebSocketManager","description":"The WebSocket manager for this client.\n<info>This class forwards raw dispatch events,\nread more about it here {@link https://discordapp.com/developers/docs/topics/gateway}</info>","extends":[[["EventEmitter"]]],"props":[{"name":"client","description":"The client that instantiated this WebSocketManager","readonly":true,"type":[[["Client"]]],"meta":{"line":33,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"gateway","description":"The gateway this manager uses","nullable":true,"type":[[["string"]]],"meta":{"line":45,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"totalShards","description":"The amount of shards this manager handles","access":"private","type":[[["number"]],[["string"]]],"meta":{"line":52,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shards","description":"A collection of all shards this manager handles","type":[[["Collection","<"],["number",", "],["WebSocketShard",">"]]],"meta":{"line":58,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"shardQueue","description":"An array of shards to be connected or that need to reconnect","access":"private","type":[[["Set","<"],["WebSocketShard",">"]]],"meta":{"line":60,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"packetQueue","description":"An array of queued events before this WebSocketManager became ready","access":"private","type":[[["Array","<"],["object",">"]]],"meta":{"line":68,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"status","description":"The current status of this WebSocketManager","type":[[["number"]]],"meta":{"line":80,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroyed","description":"If this manager was destroyed. It will prevent shards from reconnecting","access":"private","type":[[["boolean"]]],"meta":{"line":87,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnecting","description":"If this manager is currently reconnecting one or multiple shards","access":"private","type":[[["boolean"]]],"meta":{"line":94,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"sessionStartLimit","description":"The current session limit of the client","access":"private","nullable":true,"type":[[["Object"]]],"props":[{"name":"total","description":"Total number of identifies available","type":[[["number"]]]},{"name":"remaining","description":"Number of identifies remaining","type":[[["number"]]]},{"name":"reset_after","description":"Number of milliseconds after which the limit resets","type":[[["number"]]]}],"meta":{"line":104,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"ping","description":"The average ping of all WebSocketShards","readonly":true,"type":[[["number"]]],"meta":{"line":112,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"methods":[{"name":"debug","description":"Emits a debug message.","access":"private","params":[{"name":"message","description":"The debug message","type":[[["string"]]]},{"name":"shard","description":"The shard that emitted this message, if any","optional":true,"nullable":true,"type":[[["WebSocketShard"]]]}],"meta":{"line":123,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"connect","description":"Connects this manager to the gateway.","access":"private","async":true,"meta":{"line":131,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"createShards","description":"Handles the creation of a shard.","access":"private","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":184,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"reconnect","description":"Handles reconnects for this manager.","access":"private","async":true,"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":291,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"broadcast","description":"Broadcasts a packet to every shard this manager handles.","access":"private","params":[{"name":"packet","description":"The packet to send","type":[[["Object"]]]}],"meta":{"line":330,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroys this manager and all its shards.","access":"private","meta":{"line":338,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"_handleSessionLimit","description":"Handles the timeout required if we cannot identify anymore.","access":"private","params":[{"name":"remaining","description":"The amount of remaining identify sessions that can be done today","optional":true,"type":[[["number"]]]},{"name":"resetAfter","description":"The amount of time in which the identify counter resets","optional":true,"type":[[["number"]]]}],"async":true,"meta":{"line":352,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"handlePacket","description":"Processes a packet and queues it if this WebSocketManager is not ready.","access":"private","params":[{"name":"packet","description":"The packet to be handled","optional":true,"type":[[["Object"]]]},{"name":"shard","description":"The shard that will handle this packet","optional":true,"type":[[["WebSocketShard"]]]}],"returns":[[["boolean"]]],"meta":{"line":375,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"checkReady","description":"Checks whether the client is ready to be marked as ready.","access":"private","returns":[[["boolean"]]],"meta":{"line":402,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"triggerReady","description":"Causes the client to be marked as ready and emits the ready event.","access":"private","meta":{"line":432,"file":"WebSocketManager.js","path":"src/client/websocket"}}],"meta":{"line":30,"file":"WebSocketManager.js","path":"src/client/websocket"}},{"name":"WebSocketShard","description":"Represents a Shard's WebSocket connection","props":[{"name":"manager","description":"The WebSocketManager of the shard","type":[[["WebSocketManager"]]],"meta":{"line":37,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"id","description":"The ID of the shard","type":[[["number"]]],"meta":{"line":43,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"status","description":"The current status of the shard","type":[[["Status"]]],"meta":{"line":49,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sequence","description":"The current sequence of the shard","access":"private","type":[[["number"]]],"meta":{"line":56,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"closeSequence","description":"The sequence of the shard after close","access":"private","type":[[["number"]]],"meta":{"line":63,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sessionID","description":"The current session ID of the shard","access":"private","type":[[["string"]]],"meta":{"line":70,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"pings","description":"The previous 3 heartbeat pings of the shard (most recent first)","type":[[["Array","<"],["number",">"]]],"meta":{"line":76,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"lastPingTimestamp","description":"The last time a ping was sent (a timestamp)","access":"private","type":[[["number"]]],"meta":{"line":83,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"lastHeartbeatAcked","description":"If we received a heartbeat ack back. Used to identify zombie connections","access":"private","type":[[["boolean"]]],"meta":{"line":90,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ping","description":"Average heartbeat ping of the websocket, obtained by averaging the WebSocketShard#pings property","readonly":true,"type":[[["number"]]],"meta":{"line":146,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"methods":[{"name":"debug","description":"Emits a debug event.","access":"private","params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"meta":{"line":156,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"connect","description":"Connects the shard to the gateway.","access":"private","returns":{"types":[[["Promise","<"],["void",">"]]],"description":"A promise that will resolve if the shard turns ready successfully,\nor reject if we couldn't connect"},"meta":{"line":166,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onOpen","description":"Called whenever a connection is opened to the gateway.","access":"private","meta":{"line":243,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onMessage","description":"Called whenever a message is received.","access":"private","params":[{"name":"event","description":"Event received","type":[[["MessageEvent"]]]}],"meta":{"line":253,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onError","description":"Called whenever an error occurs with the WebSocket.","access":"private","params":[{"name":"event","description":"The error that occurred","type":[[["ErrorEvent"]],[["Object"]]]}],"meta":{"line":287,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onClose","description":"Called whenever a connection to the gateway is closed.","access":"private","params":[{"name":"event","description":"Close event that was received","type":[[["CloseEvent"]]]}],"meta":{"line":326,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"onPacket","description":"Called whenever a packet is received.","access":"private","params":[{"name":"packet","description":"The received packet","type":[[["Object"]]]}],"meta":{"line":354,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"setHelloTimeout","description":"Sets the HELLO packet timeout.","access":"private","params":[{"name":"time","description":"If set to -1, it will clear the hello timeout timeout","optional":true,"type":[[["number"]]]}],"meta":{"line":432,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"setHeartbeatTimer","description":"Sets the heartbeat timer for this shard.","access":"private","params":[{"name":"time","description":"If -1, clears the interval, any other number sets an interval","type":[[["number"]]]}],"meta":{"line":453,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"sendHeartbeat","description":"Sends a heartbeat to the WebSocket.\nIf this shard didn't receive a heartbeat last time, it will destroy it and reconnect","access":"private","meta":{"line":471,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ackHeartbeat","description":"Acknowledges a heartbeat.","access":"private","meta":{"line":487,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identify","description":"Identifies the client on the connection.","access":"private","returns":[[["void"]]],"meta":{"line":500,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identifyNew","description":"Identifies as a new connection on the gateway.","access":"private","meta":{"line":508,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"identifyResume","description":"Resumes a session on the gateway.","access":"private","meta":{"line":530,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"send","description":"Adds a packet to the queue to be sent to the gateway.\n<warn>If you use this method, make sure you understand that you need to provide\na full [Payload](https://discordapp.com/developers/docs/topics/gateway#commands-and-events-gateway-commands).\nDo not use this method if you don't know what you're doing.</warn>","params":[{"name":"data","description":"The full packet to send","type":[[["Object"]]]},{"name":"important","description":"If this packet should be added first in queue","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":556,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"_send","description":"Sends data, bypassing the queue.","access":"private","params":[{"name":"data","description":"Packet to send","type":[[["Object"]]]}],"returns":[[["void"]]],"meta":{"line":567,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"processQueue","description":"Processes the current WebSocket queue.","access":"private","returns":[[["void"]]],"meta":{"line":583,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"destroy","description":"Destroys this shard and closes its WebSocket connection.","access":"private","params":[{"name":"closeCode","description":"The close code to use","optional":true,"default":1000,"type":[[["number"]]]}],"meta":{"line":605,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"events":[{"name":"close","description":"Emitted when a shard's WebSocket closes.","params":[{"name":"event","description":"The received event","type":[[["CloseEvent"]]]}],"meta":{"line":340,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ready","description":"Emitted when the shard becomes ready","meta":{"line":362,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"resumed","description":"Emitted when the shard resumes successfully","meta":{"line":375,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"destroyed","description":"Emitted when a shard is destroyed, but no WebSocket connection was present.","meta":{"line":612,"file":"WebSocketShard.js","path":"src/client/websocket"}}],"meta":{"line":30,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"DiscordAPIError","description":"Represents an error from the Discord API.","extends":[[["Error"]]],"props":[{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":18,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":24,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned by Discord","type":[[["number"]]],"meta":{"line":30,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"httpStatus","description":"The HTTP status code","type":[[["number"]]],"meta":{"line":36,"file":"DiscordAPIError.js","path":"src/rest"}}],"methods":[{"name":"flattenErrors","description":"Flattens an errors object returned from the API into an array.","scope":"static","access":"private","params":[{"name":"obj","description":"Discord errors object","type":[[["Object"]]]},{"name":"key","description":"Used internally to determine key names of nested fields","optional":true,"type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":46,"file":"DiscordAPIError.js","path":"src/rest"}}],"meta":{"line":8,"file":"DiscordAPIError.js","path":"src/rest"}},{"name":"HTTPError","description":"Represents a HTTP error from a request.","extends":[[["Error"]]],"props":[{"name":"name","description":"The name of the error","type":[[["string"]]],"meta":{"line":15,"file":"HTTPError.js","path":"src/rest"}},{"name":"code","description":"HTTP error code returned from the request","type":[[["number"]]],"meta":{"line":21,"file":"HTTPError.js","path":"src/rest"}},{"name":"method","description":"The HTTP method used for the request","type":[[["string"]]],"meta":{"line":27,"file":"HTTPError.js","path":"src/rest"}},{"name":"path","description":"The path of the request relative to the HTTP endpoint","type":[[["string"]]],"meta":{"line":33,"file":"HTTPError.js","path":"src/rest"}}],"meta":{"line":8,"file":"HTTPError.js","path":"src/rest"}},{"name":"Shard","description":"A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\nan instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\nspawn a new one to replace it as necessary.","extends":[[["EventEmitter"]]],"construct":{"name":"Shard","params":[{"name":"manager","description":"Manager that is spawning this shard","type":[[["ShardingManager"]]]},{"name":"id","description":"ID of this shard","type":[[["number"]]]}]},"props":[{"name":"manager","description":"Manager that created the shard","type":[[["ShardingManager"]]],"meta":{"line":31,"file":"Shard.js","path":"src/sharding"}},{"name":"id","description":"ID of the shard in the manager","type":[[["number"]]],"meta":{"line":37,"file":"Shard.js","path":"src/sharding"}},{"name":"args","description":"Arguments for the shard's process (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":43,"file":"Shard.js","path":"src/sharding"}},{"name":"execArgv","description":"Arguments for the shard's process executable (only when {@link ShardingManager#mode} is `process`)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":49,"file":"Shard.js","path":"src/sharding"}},{"name":"env","description":"Environment variables for the shard's process, or workerData for the shard's worker","type":[[["Object"]]],"meta":{"line":55,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Whether the shard's {@link Client} is ready","type":[[["boolean"]]],"meta":{"line":66,"file":"Shard.js","path":"src/sharding"}},{"name":"process","description":"Process of the shard (if {@link ShardingManager#mode} is `process`)","nullable":true,"type":[[["ChildProcess"]]],"meta":{"line":72,"file":"Shard.js","path":"src/sharding"}},{"name":"worker","description":"Worker of the shard (if {@link ShardingManager#mode} is `worker`)","nullable":true,"type":[[["Worker"]]],"meta":{"line":78,"file":"Shard.js","path":"src/sharding"}},{"name":"_evals","description":"Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":85,"file":"Shard.js","path":"src/sharding"}},{"name":"_fetches","description":"Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with","access":"private","type":[[["Map","<"],["string",", "],["Promise",">"]]],"meta":{"line":92,"file":"Shard.js","path":"src/sharding"}},{"name":"_exitListener","description":"Listener function for the {@link ChildProcess}' `exit` event","access":"private","type":[[["function"]]],"meta":{"line":99,"file":"Shard.js","path":"src/sharding"}}],"methods":[{"name":"spawn","description":"Forks a child process or creates a worker thread for the shard.\n<warn>You should not need to call this manually.</warn>","params":[{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":109,"file":"Shard.js","path":"src/sharding"}},{"name":"kill","description":"Immediately kills the shard's process/worker and does not restart it.","meta":{"line":145,"file":"Shard.js","path":"src/sharding"}},{"name":"respawn","description":"Kills and restarts the shard's process/worker.","params":[{"name":"delay","description":"How long to wait between killing the process/worker and restarting it (in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ChildProcess",">"]]],"meta":{"line":164,"file":"Shard.js","path":"src/sharding"}},{"name":"send","description":"Sends a message to the shard's process/worker.","params":[{"name":"message","description":"Message to send to the shard","type":[["*"]]}],"returns":[[["Promise","<"],["Shard",">"]]],"meta":{"line":175,"file":"Shard.js","path":"src/sharding"}},{"name":"fetchClientValue","description":"Fetches a client property value of the shard.","examples":["shard.fetchClientValue('guilds.size')\n  .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":197,"file":"Shard.js","path":"src/sharding"}},{"name":"eval","description":"Evaluates a script or function on the shard, in the context of the {@link Client}.","params":[{"name":"script","description":"JavaScript to run on the shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Result of the script execution"},"meta":{"line":227,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles a message received from the child process/worker.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"meta":{"line":258,"file":"Shard.js","path":"src/sharding"}},{"name":"_handleExit","description":"Handles the shard's process/worker exiting.","access":"private","params":[{"name":"respawn","description":"Whether to spawn the shard again","optional":true,"default":"this.manager.respawn","type":[[["boolean"]]]}],"meta":{"line":334,"file":"Shard.js","path":"src/sharding"}}],"events":[{"name":"spawn","description":"Emitted upon the creation of the shard's child process/worker.","params":[{"name":"process","description":"Child process/worker that was created","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":125,"file":"Shard.js","path":"src/sharding"}},{"name":"ready","description":"Emitted upon the shard's {@link Client#ready} event.","meta":{"line":263,"file":"Shard.js","path":"src/sharding"}},{"name":"disconnect","description":"Emitted upon the shard's {@link Client#disconnect} event.","meta":{"line":274,"file":"Shard.js","path":"src/sharding"}},{"name":"reconnecting","description":"Emitted upon the shard's {@link Client#reconnecting} event.","meta":{"line":285,"file":"Shard.js","path":"src/sharding"}},{"name":"message","description":"Emitted upon receiving a message from the child process/worker.","params":[{"name":"message","description":"Message that was received","type":[["*"]]}],"meta":{"line":321,"file":"Shard.js","path":"src/sharding"}},{"name":"death","description":"Emitted upon the shard's child process/worker exiting.","params":[{"name":"process","description":"Child process/worker that exited","type":[[["ChildProcess"]],[["Worker"]]]}],"meta":{"line":335,"file":"Shard.js","path":"src/sharding"}}],"meta":{"line":21,"file":"Shard.js","path":"src/sharding"}},{"name":"ShardClientUtil","description":"Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\nUtilises IPC to send and receive data to/from the master process and other shards.","construct":{"name":"ShardClientUtil","params":[{"name":"client","description":"Client of the current shard","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}]},"props":[{"name":"client","description":"Client for the shard","type":[[["Client"]]],"meta":{"line":20,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]],"meta":{"line":26,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"parentPort","description":"Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)","nullable":true,"type":[[["MessagePort"]]],"meta":{"line":32,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ids","description":"Array of shard IDs of this client","readonly":true,"type":[[["Array","<"],["number",">"]]],"meta":{"line":53,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"count","description":"Total number of shards","readonly":true,"type":[[["number"]]],"meta":{"line":62,"file":"ShardClientUtil.js","path":"src/sharding"}}],"methods":[{"name":"send","description":"Sends a message to the master process.","params":[{"name":"message","description":"Message to send","type":[["*"]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":71,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","see":["{@link ShardingManager#fetchClientValues}"],"examples":["client.shard.fetchClientValues('guilds.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":94,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script or function on all shards, in the context of the {@link Clients}.","see":["{@link ShardingManager#broadcastEval}"],"examples":["client.shard.broadcastEval('this.guilds.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]],[["function"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":122,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"respawnAll","description":"Requests a respawn of all shards.","see":["{@link ShardingManager#respawnAll}"],"params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process/worker and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["void",">"]]],"description":"Resolves upon the message being sent"},"meta":{"line":151,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_handleMessage","description":"Handles an IPC message.","access":"private","params":[{"name":"message","description":"Message received","type":[["*"]]}],"async":true,"meta":{"line":160,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"_respond","description":"Sends a message to the master process, emitting an error from the client upon failure.","access":"private","params":[{"name":"type","description":"Type of response to send","type":[[["string"]]]},{"name":"message","description":"Message to send","type":[["*"]]}],"meta":{"line":182,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"singleton","description":"Creates/gets the singleton of this class.","scope":"static","params":[{"name":"client","description":"The client to use","type":[[["Client"]]]},{"name":"mode","description":"Mode the shard was spawned with","type":[[["ShardingManagerMode"]]]}],"returns":[[["ShardClientUtil"]]],"meta":{"line":200,"file":"ShardClientUtil.js","path":"src/sharding"}}],"meta":{"line":15,"file":"ShardClientUtil.js","path":"src/sharding"}},{"name":"ShardingManager","description":"This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\nIt works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\ncontaining its own instance of your bot's {@link Client}. They all have a line of communication with the master\nprocess, and there are several useful methods that utilise it in order to simplify tasks that are normally difficult\nwith sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\npath to your main bot script to launch for each one.","extends":[[["EventEmitter"]]],"construct":{"name":"ShardingManager","params":[{"name":"file","description":"Path to your shard script file","type":[[["string"]]]},{"name":"options","description":"Options for the sharding manager","optional":true,"type":[[["Object"]]]},{"name":"options.totalShards","description":"Number of total shards of all shard managers or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["number"]]]},{"name":"options.shardList","description":"List of shards to spawn or \"auto\"","optional":true,"default":"'auto'","type":[[["string"]],[["Array","<"],["number",">"]]]},{"name":"options.mode","description":"Which mode to use for shards","optional":true,"default":"'process'","type":[[["ShardingManagerMode"]]]},{"name":"options.respawn","description":"Whether shards should automatically respawn upon exiting","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.shardArgs","description":"Arguments to pass to the shard script when spawning\n(only available when using the `process` mode)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.execArgv","description":"Arguments to pass to the shard script executable when spawning\n(only available when using the `process` mode)","optional":true,"default":"[]","type":[[["Array","<"],["string",">"]]]},{"name":"options.token","description":"Token to use for automatic shard count and passing to shards","optional":true,"type":[[["string"]]]}]},"props":[{"name":"file","description":"Path to the shard script file","type":[[["string"]]],"meta":{"line":57,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardList","description":"List of shards this sharding manager spawns","type":[[["string"]],[["Array","<"],["number",">"]]],"meta":{"line":67,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"totalShards","description":"Amount of shards that all sharding managers spawn in total","type":[[["number"]]],"meta":{"line":84,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"mode","description":"Mode for shards to spawn with","type":[[["ShardingManagerMode"]]],"meta":{"line":99,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawn","description":"Whether shards should automatically respawn upon exiting","type":[[["boolean"]]],"meta":{"line":108,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shardArgs","description":"An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":114,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"execArgv","description":"An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)","type":[[["Array","<"],["string",">"]]],"meta":{"line":120,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"token","description":"Token to use for obtaining the automatic shard count, and passing to shards","nullable":true,"type":[[["string"]]],"meta":{"line":126,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"shards","description":"A collection of shards that this manager has spawned","type":[[["Collection","<"],["number",", "],["Shard",">"]]],"meta":{"line":132,"file":"ShardingManager.js","path":"src/sharding"}}],"methods":[{"name":"createShard","description":"Spawns a single shard.","params":[{"name":"id","description":"ID of the shard to spawn -\n**This is usually not necessary to manually specify.**","optional":true,"default":"this.shards.size","type":[[["number"]]]}],"returns":[[["Shard"]]],"meta":{"line":145,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"spawn","description":"Spawns multiple shards.","params":[{"name":"amount","description":"Number of shards to spawn","optional":true,"default":"this.totalShards","type":[[["number"]],[["string"]]]},{"name":"delay","description":"How long to wait in between spawning each shard (in milliseconds)","optional":true,"default":5500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait until the {@link Client} has become ready\nbefore resolving. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["number",", "],["Shard",">>"]]],"meta":{"line":165,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcast","description":"Sends a message to all shards.","params":[{"name":"message","description":"Message to be sent to the shards","type":[["*"]]}],"returns":[[["Promise","<"],["Array","<"],["Shard",">>"]]],"meta":{"line":210,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"broadcastEval","description":"Evaluates a script on all shards, in the context of the {@link Client}s.","params":[{"name":"script","description":"JavaScript to run on each shard","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["*",">>"]]],"description":"Results of the script execution"},"meta":{"line":221,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"fetchClientValues","description":"Fetches a client property value of each shard.","examples":["manager.fetchClientValues('guilds.size')\n  .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n  .catch(console.error);"],"params":[{"name":"prop","description":"Name of the client property to get, using periods for nesting","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["*",">>"]]],"meta":{"line":236,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"respawnAll","description":"Kills all running shards and respawns them.","params":[{"name":"shardDelay","description":"How long to wait between shards (in milliseconds)","optional":true,"default":5000,"type":[[["number"]]]},{"name":"respawnDelay","description":"How long to wait between killing a shard's process and restarting it\n(in milliseconds)","optional":true,"default":500,"type":[[["number"]]]},{"name":"spawnTimeout","description":"The amount in milliseconds to wait for a shard to become ready before\ncontinuing to another. (-1 or Infinity for no wait)","optional":true,"default":30000,"type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Shard",">>"]]],"meta":{"line":253,"file":"ShardingManager.js","path":"src/sharding"}}],"events":[{"name":"shardCreate","description":"Emitted upon creating a shard.","params":[{"name":"shard","description":"Shard that was created","type":[[["Shard"]]]}],"meta":{"line":148,"file":"ShardingManager.js","path":"src/sharding"}}],"meta":{"line":42,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"ChannelStore","description":"Stores channels.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a ChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":88,"file":"ChannelStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a ChannelResolvable to a channel ID string.","params":[{"name":"channel","description":"The channel resolvable to resolve","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":97,"file":"ChannelStore.js","path":"src/stores"}},{"name":"fetch","description":"Obtains a channel from Discord, or the channel cache if it's already available.","examples":["// Fetch a channel by its id\nclient.channels.fetch('222109930545610754')\n  .then(channel => console.log(channel.name))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID of the channel","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new channel object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":117,"file":"ChannelStore.js","path":"src/stores"}}],"meta":{"line":15,"file":"ChannelStore.js","path":"src/stores"}},{"name":"DataStore","description":"Manages the creation, retrieval and deletion of a specific data model.","extends":[[["Collection"]]],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":36,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"DataStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"DataStore.js","path":"src/stores"}},{"name":"GuildChannelStore","description":"Stores guild channels.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a GuildChannelResolvable to a Channel object.","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Channel"]]],"nullable":true},"meta":{"line":32,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildChannelResolvable to a channel ID string.","params":[{"name":"channel","description":"The GuildChannel resolvable to resolve","type":[[["GuildChannelResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":41,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"create","description":"Creates a new channel in the guild.","examples":["// Create a new text channel\nguild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n  .then(console.log)\n  .catch(console.error);","// Create a new channel with permission overwrites\nguild.channels.create('new-voice', {\n  type: 'voice',\n  permissionOverwrites: [\n     {\n       id: message.author.id,\n       deny: ['VIEW_CHANNEL'],\n    },\n  ],\n})"],"params":[{"name":"name","description":"The name of the new channel","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.type","description":"The type of the new channel, either `text`, `voice`, or `category`","optional":true,"default":"'text'","type":[[["string"]]]},{"name":"options.topic","description":"The topic for the new channel","optional":true,"type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw","optional":true,"type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.position","description":"Position of the new channel","optional":true,"type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"The ratelimit per user for the channel","optional":true,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for creating the channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":83,"file":"GuildChannelStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"GuildEmojiRoleStore","description":"Stores emoji roles","extends":[[["Collection"]]],"props":[{"name":"_filtered","description":"The filtered collection of roles of the guild emoji","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":25,"file":"GuildEmojiRoleStore.js","path":"src/stores"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the list of roles that can use this emoji.","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":34,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a role (or multiple roles) from the list of roles that can use this emoji.","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":53,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"set","description":"Sets the role(s) that can use this emoji.","examples":["// Set the emoji's roles to a single role\nguildEmoji.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all roles from an emoji\nguildEmoji.roles.set([])\n   .then(console.log)\n   .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":82,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"_patch","description":"Patches the roles for this store","access":"private","params":[{"name":"roles","description":"The new roles","type":[[["Array","<"],["Snowflake",">"]]]}],"meta":{"line":97,"file":"GuildEmojiRoleStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"GuildEmojiRoleStore.js","path":"src/stores"}},{"name":"GuildEmojiStore","description":"Stores guild emojis.","extends":[[["DataStore"]]],"methods":[{"name":"create","description":"Creates a new custom emoji in the guild.","examples":["// Create a new emoji from a url\nguild.emojis.create('https://i.imgur.com/w3duR07.png', 'rip')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);","// Create a new emoji from a file on your computer\nguild.emojis.create('./memes/banana.png', 'banana')\n  .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n  .catch(console.error);"],"params":[{"name":"attachment","description":"The image for the emoji","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"name","description":"The name for the emoji","type":[[["string"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.roles","description":"Roles to limit the emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.reason","description":"Reason for creating the emoji","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Emoji",">"]]],"description":"The created emoji"},"meta":{"line":43,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves an EmojiResolvable to an Emoji object.","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["GuildEmoji"]]],"nullable":true},"meta":{"line":78,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves an EmojiResolvable to an Emoji ID string.","params":[{"name":"emoji","description":"The Emoji resolvable to identify","type":[[["EmojiResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":88,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"resolveIdentifier","description":"Resolves an EmojiResolvable to an emoji identifier.","params":[{"name":"emoji","description":"The emoji resolvable to resolve","type":[[["EmojiIdentifierResolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":105,"file":"GuildEmojiStore.js","path":"src/stores"}}],"meta":{"line":15,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"GuildMemberRoleStore","description":"Stores member roles","extends":[[["Collection"]]],"props":[{"name":"_filtered","description":"The filtered collection of roles of the member","access":"private","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":25,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"hoist","description":"The role of the member used to hoist them in a separate category in the users list","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":35,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"color","description":"The role of the member used to set their color","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":46,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"highest","description":"The role of the member with the highest position","readonly":true,"type":[[["Role"]]],"meta":{"line":57,"file":"GuildMemberRoleStore.js","path":"src/stores"}}],"methods":[{"name":"add","description":"Adds a role (or multiple roles) to the member.","params":[{"name":"roleOrRoles","description":"The role or roles to add","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for adding the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":67,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a role (or multiple roles) from the member.","params":[{"name":"roleOrRoles","description":"The role or roles to remove","type":[[["RoleResolvable"]],[["Array","<"],["RoleResolvable",">"]],[["Collection","<"],["Snowflake",", "],["Role",">"]]]},{"name":"reason","description":"Reason for removing the role(s)","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":98,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"set","description":"Sets the roles applied to the member.","examples":["// Set the member's roles to a single role\nguildMember.roles.set(['391156570408615936'])\n  .then(console.log)\n  .catch(console.error);","// Remove all the roles from a member\nguildMember.roles.set([])\n  .then(member => console.log(`Member roles is now of ${member.roles.size} size`))\n  .catch(console.error);"],"params":[{"name":"roles","description":"The roles or role IDs to apply","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"reason","description":"Reason for applying the roles","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":140,"file":"GuildMemberRoleStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"GuildMemberRoleStore.js","path":"src/stores"}},{"name":"GuildMemberStore","description":"Stores guild members.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a GuildMemberResolvable to a GuildMember object.","params":[{"name":"member","description":"The user that is part of the guild","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":35,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildMemberResolvable to an member ID string.","params":[{"name":"member","description":"The user that is part of the guild","type":[[["GuildMemberResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":48,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"fetch","description":"Fetches member(s) from Discord, even if they're offline.","examples":["// Fetch all members from a guild\nguild.members.fetch()\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member\nguild.members.fetch('66564597481480192')\n  .then(console.log)\n  .catch(console.error);","// Fetch a single member without caching\nguild.members.fetch({ user, cache: false })\n  .then(console.log)\n  .catch(console.error);","// Fetch by query\nguild.members.fetch({ query: 'hydra', limit: 1 })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"If a UserResolvable, the user to fetch.\nIf undefined, fetches all members.\nIf a query, it limits the results to users with similar usernames.","optional":true,"type":[[["UserResolvable"]],[["FetchMemberOptions"]],[["FetchMembersOptions"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["GuildMember",">>"]]],"meta":{"line":96,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"prune","description":"Prunes members from the guild based on how long they have been inactive.\n<info>It's recommended to set options.count to `false` for large guilds.</info>","examples":["// See how many members will be pruned\nguild.members.prune({ dry: true })\n  .then(pruned => console.log(`This will prune ${pruned} people!`))\n  .catch(console.error);","// Actually prune the members\nguild.members.prune({ days: 1, reason: 'too many people!' })\n  .then(pruned => console.log(`I just pruned ${pruned} people!`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Prune options","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of inactivity required to kick","optional":true,"default":7,"type":[[["number"]]]},{"name":"options.dry","description":"Get number of users that will be kicked, without actually kicking them","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.count","description":"Whether or not to return the number of users that have been kicked.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for this prune","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["number","|"],["null",")>"]]],"description":"The number of members that were/will be kicked"},"meta":{"line":127,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"ban","description":"Bans a user from the guild.","examples":["// Ban a user by ID (or with a user/guild member object)\nguild.members.ban('84484653687267328')\n  .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to ban","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<("],["GuildMember","|"],["User","|"],["Snowflake",")>"]]],"description":"Result object will be resolved as specifically as possible.\nIf the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\nbe resolved, the user ID will be the result."},"meta":{"line":151,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"unban","description":"Unbans a user from the guild.","examples":["// Unban a user by ID (or with a user/guild member object)\nguild.members.unban('84484653687267328')\n  .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n  .catch(console.error);"],"params":[{"name":"user","description":"The user to unban","type":[[["UserResolvable"]]]},{"name":"reason","description":"Reason for unbanning user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":178,"file":"GuildMemberStore.js","path":"src/stores"}}],"meta":{"line":14,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"GuildStore","description":"Stores guilds.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a GuildResolvable to a Guild object.","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Guild"]]],"nullable":true},"meta":{"line":24,"file":"GuildStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a GuildResolvable to a Guild ID string.","params":[{"name":"guild","description":"The guild resolvable to identify","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":33,"file":"GuildStore.js","path":"src/stores"}},{"name":"create","description":"Creates a guild.\n<warn>This is only available to bots in fewer than 10 guilds.</warn>","params":[{"name":"name","description":"The name of the guild","type":[[["string"]]]},{"name":"options","description":"Options for the creating","optional":true,"type":[[["Object"]]]},{"name":"options.region","description":"The region for the server, defaults to the closest one available","optional":true,"type":[[["string"]]]},{"name":"options.icon","description":"The icon for the guild","optional":true,"default":null,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"returns":{"types":[[["Promise","<"],["Guild",">"]]],"description":"The guild that was created"},"meta":{"line":51,"file":"GuildStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"GuildStore.js","path":"src/stores"}},{"name":"MessageStore","description":"Stores messages for text-based channels.","extends":[[["DataStore"]]],"methods":[{"name":"fetch","description":"Gets a message, or messages, from this channel.\n<info>The returned Collection does not contain reaction users of the messages if they were not cached.\nThose need to be fetched separately in such a case.</info>","examples":["// Get message\nchannel.messages.fetch('99539446449315840')\n  .then(message => console.log(message.content))\n  .catch(console.error);","// Get messages\nchannel.messages.fetch({ limit: 10 })\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);","// Get messages and filter by user ID\nchannel.messages.fetch()\n  .then(messages => console.log(`${messages.filter(m => m.author.id === '84484653687267328').size} messages`))\n  .catch(console.error);"],"params":[{"name":"message","description":"The ID of the message to fetch, or query parameters.","optional":true,"type":[[["Snowflake"]],[["ChannelLogsQueryOptions"]]]},{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Message",">"]],[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":61,"file":"MessageStore.js","path":"src/stores"}},{"name":"fetchPinned","description":"Fetches the pinned messages of this channel and returns a collection of them.\n<info>The returned Collection does not contain any reaction data of the messages.\nThose need to be fetched separately.</info>","examples":["// Get pinned messages\nchannel.fetchPinned()\n  .then(messages => console.log(`Received ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"cache","description":"Whether to cache the message(s)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":77,"file":"MessageStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a MessageResolvable to a Message object.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Message"]]],"nullable":true},"meta":{"line":92,"file":"MessageStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a MessageResolvable to a Message ID string.","params":[{"name":"message","description":"The message resolvable to resolve","type":[[["MessageResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":101,"file":"MessageStore.js","path":"src/stores"}},{"name":"remove","description":"Deletes a message, even if it's not cached.","params":[{"name":"message","description":"The message to delete","type":[[["MessageResolvable"]]]},{"name":"reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"async":true,"meta":{"line":115,"file":"MessageStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"MessageStore.js","path":"src/stores"}},{"name":"PresenceStore","description":"Stores presences.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a PresenceResolvable to a Presence object.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Presence"]]],"nullable":true},"meta":{"line":33,"file":"PresenceStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a PresenceResolvable to a Presence ID string.","params":[{"name":"presence","description":"The presence resolvable to resolve","type":[[["PresenceResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":45,"file":"PresenceStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"PresenceStore.js","path":"src/stores"}},{"name":"ReactionStore","description":"Stores reactions.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a MessageReactionResolvable to a MessageReaction object.","params":[{"name":"reaction","description":"The MessageReaction to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["MessageReaction"]]],"nullable":true},"meta":{"line":27,"file":"ReactionStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a MessageReactionResolvable to a MessageReaction ID string.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["MessageReactionResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":36,"file":"ReactionStore.js","path":"src/stores"}},{"name":"removeAll","description":"Removes all reactions from a message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":49,"file":"ReactionStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"ReactionStore.js","path":"src/stores"}},{"name":"ReactionUserStore","description":"A data store to store User models who reacted to a MessageReaction.","extends":[[["DataStore"]]],"methods":[{"name":"fetch","description":"Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.","params":[{"name":"options","description":"Options for fetching the users","optional":true,"type":[[["Object"]]]},{"name":"options.limit","description":"The maximum amount of users to fetch, defaults to 100","optional":true,"default":100,"type":[[["number"]]]},{"name":"options.before","description":"Limit fetching users to those with an id lower than the supplied id","optional":true,"type":[[["Snowflake"]]]},{"name":"options.after","description":"Limit fetching users to those with an id greater than the supplied id","optional":true,"type":[[["Snowflake"]]]}],"async":true,"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["User",">>"]]],"meta":{"line":25,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"remove","description":"Removes a user from this reaction.","params":[{"name":"user","description":"The user to remove the reaction of","optional":true,"default":"this.reaction.message.client.user","type":[[["UserResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":44,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a data entry to a data Object.","inherits":"DataStore#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":36,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","inherits":"DataStore#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"DataStore.js","path":"src/stores"}}],"meta":{"line":12,"file":"ReactionUserStore.js","path":"src/stores"}},{"name":"RoleStore","description":"Stores roles.","extends":[[["DataStore"]]],"props":[{"name":"everyone","description":"The `@everyone` role of the guild","readonly":true,"nullable":true,"type":[[["Role"]]],"meta":{"line":118,"file":"RoleStore.js","path":"src/stores"}},{"name":"highest","description":"The role with the highest position in the store","readonly":true,"type":[[["Role"]]],"meta":{"line":127,"file":"RoleStore.js","path":"src/stores"}}],"methods":[{"name":"fetch","description":"Obtains one or more roles from Discord, or the role cache if they're already available.","examples":["// Fetch all roles from the guild\nmessage.guild.roles.fetch()\n  .then(roles => console.log(`There are ${roles.size} roles.`))\n  .catch(console.error);","// Fetch a single role\nmessage.guild.roles.fetch('222078108977594368')\n  .then(role => console.log(`The role color is: ${role.color}`))\n  .catch(console.error);"],"params":[{"name":"id","description":"ID or IDs of the role(s)","optional":true,"type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new roles objects if it weren't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<("],["Role","|"],["Array","<"],["Role",">)>"]]],"meta":{"line":38,"file":"RoleStore.js","path":"src/stores"}},{"name":"resolve","description":"Resolves a RoleResolvable to a Role object.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Role"]]],"nullable":true},"meta":{"line":57,"file":"RoleStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a RoleResolvable to a role ID string.","params":[{"name":"role","description":"The role resolvable to resolve","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":66,"file":"RoleStore.js","path":"src/stores"}},{"name":"create","description":"Creates a new role in the guild with given information.\n<warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>","examples":["// Create a new role\nguild.roles.create()\n  .then(console.log)\n  .catch(console.error);","// Create a new role with data and a reason\nguild.roles.create({\n  data: {\n    name: 'Super Cool People',\n    color: 'BLUE',\n  },\n  reason: 'we needed a role for Super Cool People',\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.data","description":"The data to create the role with","optional":true,"type":[[["RoleData"]]]},{"name":"options.reason","description":"Reason for creating this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":99,"file":"RoleStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"RoleStore.js","path":"src/stores"}},{"name":"UserStore","description":"A data store to store User models.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a UserResolvable to a User object.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["User"]]],"nullable":true},"meta":{"line":31,"file":"UserStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a UserResolvable to a user ID string.","params":[{"name":"user","description":"The UserResolvable to identify","type":[[["UserResolvable"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":42,"file":"UserStore.js","path":"src/stores"}},{"name":"fetch","description":"Obtains a user from Discord, or the user cache if it's already available.","params":[{"name":"id","description":"ID of the user","type":[[["Snowflake"]]]},{"name":"cache","description":"Whether to cache the new user object if it isn't already","optional":true,"default":true,"type":[[["boolean"]]]}],"async":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":54,"file":"UserStore.js","path":"src/stores"}}],"meta":{"line":13,"file":"UserStore.js","path":"src/stores"}},{"name":"VoiceStateStore","description":"Stores voice states.","extends":[[["DataStore"]]],"methods":[{"name":"resolve","description":"Resolves a data entry to a data Object.","inherits":"DataStore#resolve","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Object"]]]}],"returns":{"types":[[["Object"]]],"description":"An instance from this DataStore","nullable":true},"meta":{"line":36,"file":"DataStore.js","path":"src/stores"}},{"name":"resolveID","description":"Resolves a data entry to a instance ID.","inherits":"DataStore#resolveID","inherited":true,"params":[{"name":"idOrInstance","description":"The id or instance of something in this DataStore","type":[[["string"]],[["Instance"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":47,"file":"DataStore.js","path":"src/stores"}}],"meta":{"line":11,"file":"VoiceStateStore.js","path":"src/stores"}},{"name":"APIMessage","description":"Represents a message to be sent to the API.","construct":{"name":"APIMessage","params":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]]},{"name":"options","description":"Options passed in from send","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]}]},"props":[{"name":"target","description":"The target for this message to be sent to","type":[[["MessageTarget"]]],"meta":{"line":23,"file":"APIMessage.js","path":"src/structures"}},{"name":"options","description":"Options passed in from send","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":29,"file":"APIMessage.js","path":"src/structures"}},{"name":"data","description":"Data sendable to the API","nullable":true,"type":[[["Object"]]],"meta":{"line":35,"file":"APIMessage.js","path":"src/structures"}},{"name":"files","description":"Files sendable to the API","nullable":true,"type":[[["Array","<"],["Object",">"]]],"meta":{"line":41,"file":"APIMessage.js","path":"src/structures"}},{"name":"isWebhook","description":"Whether or not the target is a webhook","readonly":true,"type":[[["boolean"]]],"meta":{"line":49,"file":"APIMessage.js","path":"src/structures"}},{"name":"isUser","description":"Whether or not the target is a user","readonly":true,"type":[[["boolean"]]],"meta":{"line":60,"file":"APIMessage.js","path":"src/structures"}}],"methods":[{"name":"makeContent","description":"Makes the content of this message.","returns":{"types":[[["string"]],[["Array","<"],["string",">"]]],"nullable":true},"meta":{"line":70,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveData","description":"Resolves data.","returns":[[["APIMessage"]]],"meta":{"line":124,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveFiles","description":"Resolves files.","async":true,"returns":[[["Promise","<"],["APIMessage",">"]]],"meta":{"line":168,"file":"APIMessage.js","path":"src/structures"}},{"name":"split","description":"Converts this APIMessage into an array of APIMessages for each split content","returns":[[["Array","<"],["APIMessage",">"]]],"meta":{"line":198,"file":"APIMessage.js","path":"src/structures"}},{"name":"resolveFile","description":"Resolves a single file into an object sendable to the API.","scope":"static","params":[{"name":"fileLike","description":"Something that could be resolved to a file","type":[[["BufferResolvable"]],[["Stream"]],[["FileOptions"]],[["MessageAttachment"]]]}],"async":true,"returns":[[["Object"]]],"meta":{"line":230,"file":"APIMessage.js","path":"src/structures"}},{"name":"partitionMessageAdditions","description":"Partitions embeds and attachments.","scope":"static","params":[{"name":"items","description":"Items to partition","type":[[["Array","<("],["MessageEmbed","|"],["MessageAttachment",")>"]]]}],"returns":[[["Array","<"],["Array","<"],["MessageEmbed",">, "],["Array","<"],["MessageAttachment",">>"]]],"meta":{"line":266,"file":"APIMessage.js","path":"src/structures"}},{"name":"transformOptions","description":"Transforms the user-level arguments into a final options object. Passing a transformed options object alone into\nthis method will keep it the same, allowing for the reuse of the final options object.","scope":"static","params":[{"name":"content","description":"Content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add onto transformed options","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]},{"name":"isWebhook","description":"Whether or not to use WebhookMessageOptions as the result","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":289,"file":"APIMessage.js","path":"src/structures"}},{"name":"create","description":"Creates an `APIMessage` from user-level arguments.","scope":"static","params":[{"name":"target","description":"Target to send to","type":[[["MessageTarget"]]]},{"name":"content","description":"Content to send","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options to use","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]],[["MessageAdditions"]]]},{"name":"extra","description":"Extra options to add onto transformed options","optional":true,"default":"{}","type":[[["MessageOptions"]],[["WebhookMessageOptions"]]]}],"returns":[[["MessageOptions"]],[["WebhookMessageOptions"]]],"meta":{"line":324,"file":"APIMessage.js","path":"src/structures"}}],"meta":{"line":18,"file":"APIMessage.js","path":"src/structures"}},{"name":"Base","description":"Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).","props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"meta":{"line":9,"file":"Base.js","path":"src/structures"}},{"name":"CategoryChannel","description":"Represents a guild category channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"children","description":"Channels that are a part of this category","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":15,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":38,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":44,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":56,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":69,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":78,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":94,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":520,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":529,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":540,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":104,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":144,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":170,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":202,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":220,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":243,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":259,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":308,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":354,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":389,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":406,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":434,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":446,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":496,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":557,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"CategoryChannel.js","path":"src/structures"}},{"name":"Channel","description":"Represents any channel on Discord.","extends":[[["Base"]]],"props":[{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":82,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":12,"file":"Channel.js","path":"src/structures"}},{"name":"ClientApplication","description":"Represents a Client OAuth2 Application.","extends":[[["Base"]]],"props":[{"name":"id","description":"The ID of the app","type":[[["Snowflake"]]],"meta":{"line":25,"file":"ClientApplication.js","path":"src/structures"}},{"name":"name","description":"The name of the app","type":[[["string"]]],"meta":{"line":31,"file":"ClientApplication.js","path":"src/structures"}},{"name":"description","description":"The app's description","type":[[["string"]]],"meta":{"line":37,"file":"ClientApplication.js","path":"src/structures"}},{"name":"icon","description":"The app's icon hash","type":[[["string"]]],"meta":{"line":43,"file":"ClientApplication.js","path":"src/structures"}},{"name":"cover","description":"The app's cover image","nullable":true,"type":[[["string"]]],"meta":{"line":49,"file":"ClientApplication.js","path":"src/structures"}},{"name":"rpcOrigins","description":"The app's RPC origins, if enabled","type":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botRequireCodeGrant","description":"If this app's bot requires a code grant when using the OAuth2 flow","nullable":true,"type":[[["boolean"]]],"meta":{"line":61,"file":"ClientApplication.js","path":"src/structures"}},{"name":"botPublic","description":"If this app's bot is public","nullable":true,"type":[[["boolean"]]],"meta":{"line":67,"file":"ClientApplication.js","path":"src/structures"}},{"name":"owner","description":"The owner of this OAuth application","type":[[["User"]],[["Team"]]],"meta":{"line":73,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the app was created at","readonly":true,"type":[[["number"]]],"meta":{"line":85,"file":"ClientApplication.js","path":"src/structures"}},{"name":"createdAt","description":"The time the app was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":94,"file":"ClientApplication.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the application's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":103,"file":"ClientApplication.js","path":"src/structures"}},{"name":"coverImage","description":"A link to this application's cover image.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the cover image","nullable":true},"meta":{"line":113,"file":"ClientApplication.js","path":"src/structures"}},{"name":"fetchAssets","description":"Gets the clients rich presence assets.","returns":[[["Promise","<"],["Array","<"],["ClientAsset",">>"]]],"meta":{"line":132,"file":"ClientApplication.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the application's name instead of the\nClientApplication object.","examples":["// Logs: Application name: My App\nconsole.log(`Application name: ${application}`);"],"returns":[[["string"]]],"meta":{"line":149,"file":"ClientApplication.js","path":"src/structures"}}],"meta":{"line":15,"file":"ClientApplication.js","path":"src/structures"}},{"name":"ClientPresence","construct":{"name":"ClientPresence","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the client presence","optional":true,"default":"{}","type":[[["Object"]]]}]},"meta":{"line":13,"file":"ClientPresence.js","path":"src/structures"}},{"name":"ClientUser","description":"Represents the logged in client's Discord user.","extends":[[["User"]]],"props":[{"name":"verified","description":"Whether or not this account has been verified","type":[[["boolean"]]],"meta":{"line":23,"file":"ClientUser.js","path":"src/structures"}},{"name":"mfaEnabled","description":"If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account","nullable":true,"type":[[["boolean"]]],"meta":{"line":29,"file":"ClientUser.js","path":"src/structures"}},{"name":"presence","description":"ClientUser's presence","readonly":true,"type":[[["Presence"]]],"meta":{"line":39,"file":"ClientUser.js","path":"src/structures"}},{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":28,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":39,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":46,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"User.js","path":"src/structures"}},{"name":"locale","description":"The locale of the user's client (ISO 639-1)","nullable":true,"type":[[["string"]]],"meta":{"line":62,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":79,"file":"User.js","path":"src/structures"}},{"name":"partial","description":"Whether this User is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":87,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":96,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":114,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":146,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":165,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":204,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setUsername","description":"Sets the username of the logged in client.\n<info>Changing usernames in Discord is heavily rate limited, with only 2 requests\nevery hour. Use this sparingly!</info>","examples":["// Set username\nclient.user.setUsername('discordjs')\n  .then(user => console.log(`My new username is ${user.username}`))\n  .catch(console.error);"],"params":[{"name":"username","description":"The new username","type":[[["string"]]]}],"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":65,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAvatar","description":"Sets the avatar of the logged in client.","examples":["// Set avatar\nclient.user.setAvatar('./avatar.png')\n  .then(user => console.log(`New avatar set!`))\n  .catch(console.error);"],"params":[{"name":"avatar","description":"The new avatar","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[["Promise","<"],["ClientUser",">"]]],"meta":{"line":79,"file":"ClientUser.js","path":"src/structures"}},{"name":"setPresence","description":"Sets the full presence of the client user.","examples":["// Set the client user's presence\nclient.user.setPresence({ activity: { name: 'with discord.js' }, status: 'idle' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"Data for the presence","type":[[["PresenceData"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":107,"file":"ClientUser.js","path":"src/structures"}},{"name":"setStatus","description":"Sets the status of the client user.","examples":["// Set the client user's status\nclient.user.setStatus('idle')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"status","description":"Status to change to","type":[[["PresenceStatusData"]]]},{"name":"shardID","description":"Shard ID(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":131,"file":"ClientUser.js","path":"src/structures"}},{"name":"setActivity","description":"Sets the activity the client user is playing.","examples":["// Set the client user's activity\nclient.user.setActivity('discord.js', { type: 'WATCHING' })\n  .then(presence => console.log(`Activity set to ${presence.activity.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"Activity being played, or options for setting the activity","optional":true,"type":[[["string"]],[["ActivityOptions"]]]},{"name":"options","description":"Options for setting the activity","optional":true,"type":[[["ActivityOptions"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":155,"file":"ClientUser.js","path":"src/structures"}},{"name":"setAFK","description":"Sets/removes the AFK flag for the client user.","params":[{"name":"afk","description":"Whether or not the user is AFK","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["Presence",">"]]],"meta":{"line":167,"file":"ClientUser.js","path":"src/structures"}},{"name":"avatarURL","description":"A link to the user's avatar.","inherits":"User#avatarURL","inherited":true,"params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":136,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","inherits":"User#displayAvatarURL","inherited":true,"params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[["string"]]],"meta":{"line":156,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","inherits":"User#typingIn","inherited":true,"params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","inherits":"User#typingSinceIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":184,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","inherits":"User#typingDurationIn","inherited":true,"params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":194,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","inherits":"User#createDM","inherited":true,"async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":212,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","inherits":"User#deleteDM","inherited":true,"async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":225,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","inherits":"User#equals","inherited":true,"params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":238,"file":"User.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this user.","inherits":"User#fetch","inherited":true,"returns":[[["Promise","<"],["User",">"]]],"meta":{"line":252,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","inherits":"User#toString","inherited":true,"examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":263,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"User#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":11,"file":"ClientUser.js","path":"src/structures"}},{"name":"DMChannel","description":"Represents a direct message channel between two users.","extends":[[["Channel"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"DMChannel","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the DM channel","type":[[["Object"]]]}]},"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":25,"file":"DMChannel.js","path":"src/structures"}},{"name":"recipient","description":"The recipient on the other end of the DM","type":[[["User"]]],"meta":{"line":37,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message in the channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":44,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":50,"file":"DMChannel.js","path":"src/structures"}},{"name":"partial","description":"Whether this DMChannel is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":58,"file":"DMChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the recipient's mention instead of the\nDMChannel object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":70,"file":"DMChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes this channel.","inherits":"Channel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete()\n  .then(console.log)\n  .catch(console.error);"],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":82,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":17,"file":"DMChannel.js","path":"src/structures"}},{"name":"Emoji","description":"Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.","extends":[[["Base"]]],"props":[{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":18,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":24,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":12,"file":"Emoji.js","path":"src/structures"}},{"name":"Guild","description":"Represents a guild (or a server) on Discord.\n<info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\ncheck this with `guild.available`.</info>","extends":[[["Base"]]],"construct":{"name":"Guild","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild","type":[[["Object"]]]}]},"props":[{"name":"members","description":"A collection of members that are in this guild. The key is the member's ID, the value is the member","type":[[["GuildMemberStore","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":40,"file":"Guild.js","path":"src/structures"}},{"name":"channels","description":"A collection of channels that are in this guild. The key is the channel's ID, the value is the channel","type":[[["GuildChannelStore","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":46,"file":"Guild.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles that are in this guild. The key is the role's ID, the value is the role","type":[[["RoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":52,"file":"Guild.js","path":"src/structures"}},{"name":"presences","description":"A collection of presences in this guild","type":[[["PresenceStore","<"],["Snowflake",", "],["Presence",">"]]],"meta":{"line":58,"file":"Guild.js","path":"src/structures"}},{"name":"voiceStates","description":"A collection of voice states in this guild","type":[[["VoiceStateStore","<"],["Snowflake",", "],["VoiceState",">"]]],"meta":{"line":64,"file":"Guild.js","path":"src/structures"}},{"name":"deleted","description":"Whether the bot has been removed from the guild","type":[[["boolean"]]],"meta":{"line":70,"file":"Guild.js","path":"src/structures"}},{"name":"available","description":"Whether the guild is available to access. If it is not available, it indicates a server outage","type":[[["boolean"]]],"meta":{"line":78,"file":"Guild.js","path":"src/structures"}},{"name":"id","description":"The Unique ID of the guild, useful for comparisons","type":[[["Snowflake"]]],"meta":{"line":84,"file":"Guild.js","path":"src/structures"}},{"name":"shardID","description":"The id of the shard this Guild belongs to.","type":[[["number"]]],"meta":{"line":94,"file":"Guild.js","path":"src/structures"}},{"name":"shard","description":"The Shard this Guild belongs to.","readonly":true,"type":[[["WebSocketShard"]]],"meta":{"line":102,"file":"Guild.js","path":"src/structures"}},{"name":"name","description":"The name of the guild","type":[[["string"]]],"meta":{"line":117,"file":"Guild.js","path":"src/structures"}},{"name":"icon","description":"The hash of the guild icon","nullable":true,"type":[[["string"]]],"meta":{"line":123,"file":"Guild.js","path":"src/structures"}},{"name":"splash","description":"The hash of the guild splash image (VIP only)","nullable":true,"type":[[["string"]]],"meta":{"line":129,"file":"Guild.js","path":"src/structures"}},{"name":"region","description":"The region the guild is located in","type":[[["string"]]],"meta":{"line":135,"file":"Guild.js","path":"src/structures"}},{"name":"memberCount","description":"The full amount of members in this guild","type":[[["number"]]],"meta":{"line":141,"file":"Guild.js","path":"src/structures"}},{"name":"large","description":"Whether the guild is \"large\" (has more than 250 members)","type":[[["boolean"]]],"meta":{"line":147,"file":"Guild.js","path":"src/structures"}},{"name":"features","description":"An array of guild features partnered guilds have enabled","type":[[["Array","<"],["Features",">"]]],"meta":{"line":170,"file":"Guild.js","path":"src/structures"}},{"name":"applicationID","description":"The ID of the application that created this guild (if applicable)","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":176,"file":"Guild.js","path":"src/structures"}},{"name":"afkTimeout","description":"The time in seconds before a user is counted as \"away from keyboard\"","nullable":true,"type":[[["number"]]],"meta":{"line":182,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannelID","description":"The ID of the voice channel where AFK members are moved","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":188,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannelID","description":"The ID of the system channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":194,"file":"Guild.js","path":"src/structures"}},{"name":"embedEnabled","description":"Whether embedded images are enabled on this guild","type":[[["boolean"]]],"meta":{"line":200,"file":"Guild.js","path":"src/structures"}},{"name":"premiumTier","description":"The premium tier on this guild","type":[[["PremiumTier"]]],"meta":{"line":215,"file":"Guild.js","path":"src/structures"}},{"name":"premiumSubscriptionCount","description":"The total number of users currently boosting this server","nullable":true,"type":[[["number"]]],"meta":{"line":217,"file":"Guild.js","path":"src/structures"}},{"name":"widgetEnabled","description":"Whether widget images are enabled on this guild","nullable":true,"type":[[["boolean"]]],"meta":{"line":226,"file":"Guild.js","path":"src/structures"}},{"name":"widgetChannelID","description":"The widget channel ID, if enabled","nullable":true,"type":[[["string"]]],"meta":{"line":233,"file":"Guild.js","path":"src/structures"}},{"name":"embedChannelID","description":"The embed channel ID, if enabled","nullable":true,"type":[[["string"]]],"meta":{"line":240,"file":"Guild.js","path":"src/structures"}},{"name":"verificationLevel","description":"The verification level of the guild","type":[[["number"]]],"meta":{"line":251,"file":"Guild.js","path":"src/structures"}},{"name":"explicitContentFilter","description":"The explicit content filter level of the guild","type":[[["number"]]],"meta":{"line":257,"file":"Guild.js","path":"src/structures"}},{"name":"mfaLevel","description":"The required MFA level for the guild","type":[[["number"]]],"meta":{"line":263,"file":"Guild.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the client user joined the guild at","type":[[["number"]]],"meta":{"line":269,"file":"Guild.js","path":"src/structures"}},{"name":"defaultMessageNotifications","description":"The value set for the guild's default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]],"meta":{"line":275,"file":"Guild.js","path":"src/structures"}},{"name":"maximumMembers","description":"The maximum amount of members the guild can have\n<info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>","nullable":true,"type":[[["number"]]],"meta":{"line":278,"file":"Guild.js","path":"src/structures"}},{"name":"maximumPresences","description":"The maximum amount of presences the guild can have\n<info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>","nullable":true,"type":[[["number"]]],"meta":{"line":286,"file":"Guild.js","path":"src/structures"}},{"name":"vanityURLCode","description":"The vanity URL code of the guild, if any","nullable":true,"type":[[["string"]]],"meta":{"line":298,"file":"Guild.js","path":"src/structures"}},{"name":"description","description":"The description of the guild, if any","nullable":true,"type":[[["string"]]],"meta":{"line":304,"file":"Guild.js","path":"src/structures"}},{"name":"banner","description":"The hash of the guild banner","nullable":true,"type":[[["string"]]],"meta":{"line":310,"file":"Guild.js","path":"src/structures"}},{"name":"ownerID","description":"The user ID of this guild's owner","type":[[["Snowflake"]]],"meta":{"line":338,"file":"Guild.js","path":"src/structures"}},{"name":"emojis","description":"A collection of emojis that are in this guild. The key is the emoji's ID, the value is the emoji.","type":[[["GuildEmojiStore","<"],["Snowflake",", "],["GuildEmoji",">"]]],"meta":{"line":359,"file":"Guild.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the guild was created at","readonly":true,"type":[[["number"]]],"meta":{"line":384,"file":"Guild.js","path":"src/structures"}},{"name":"createdAt","description":"The time the guild was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":393,"file":"Guild.js","path":"src/structures"}},{"name":"joinedAt","description":"The time the client user joined the guild","readonly":true,"type":[[["Date"]]],"meta":{"line":402,"file":"Guild.js","path":"src/structures"}},{"name":"partnered","description":"If this guild is partnered","readonly":true,"type":[[["boolean"]]],"meta":{"line":411,"file":"Guild.js","path":"src/structures"}},{"name":"verified","description":"If this guild is verified","readonly":true,"type":[[["boolean"]]],"meta":{"line":420,"file":"Guild.js","path":"src/structures"}},{"name":"nameAcronym","description":"The acronym that shows up in place of a guild icon.","readonly":true,"type":[[["string"]]],"meta":{"line":439,"file":"Guild.js","path":"src/structures"}},{"name":"owner","description":"The owner of the guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":458,"file":"Guild.js","path":"src/structures"}},{"name":"afkChannel","description":"AFK voice channel for this guild","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":469,"file":"Guild.js","path":"src/structures"}},{"name":"systemChannel","description":"System channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":478,"file":"Guild.js","path":"src/structures"}},{"name":"widgetChannel","description":"Widget channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":487,"file":"Guild.js","path":"src/structures"}},{"name":"embedChannel","description":"Embed channel for this guild","readonly":true,"nullable":true,"type":[[["TextChannel"]]],"meta":{"line":496,"file":"Guild.js","path":"src/structures"}},{"name":"me","description":"The client user as a GuildMember of this guild","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":505,"file":"Guild.js","path":"src/structures"}},{"name":"voice","description":"The voice state for the client user of this guild, if any","readonly":true,"nullable":true,"type":[[["VoiceState"]]],"meta":{"line":516,"file":"Guild.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"_patch","description":"Sets up the guild.","access":"private","params":[{"name":"data","description":"The raw data of the guild","type":[["*"]]}],"meta":{"line":112,"file":"Guild.js","path":"src/structures"}},{"name":"bannerURL","description":"The URL to this guild's banner.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":374,"file":"Guild.js","path":"src/structures"}},{"name":"iconURL","description":"The URL to this guild's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":429,"file":"Guild.js","path":"src/structures"}},{"name":"splashURL","description":"The URL to this guild's splash.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":448,"file":"Guild.js","path":"src/structures"}},{"name":"member","description":"Returns the GuildMember form of a User object, if the user is present in the guild.","examples":["// Get the guild member of a user\nconst member = guild.member(message.author);"],"params":[{"name":"user","description":"The user that you want to obtain the GuildMember of","type":[[["UserResolvable"]]]}],"returns":{"types":[[["GuildMember"]]],"nullable":true},"meta":{"line":528,"file":"Guild.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this guild.","returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":536,"file":"Guild.js","path":"src/structures"}},{"name":"fetchBans","description":"Fetches a collection of banned users in this guild.","returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["BanInfo",">>"]]],"meta":{"line":554,"file":"Guild.js","path":"src/structures"}},{"name":"fetchIntegrations","description":"Fetches a collection of integrations to this guild.\nResolves with a collection mapping integrations by their ids.","examples":["// Fetch integrations\nguild.fetchIntegrations()\n  .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Integration",">>"]]],"meta":{"line":576,"file":"Guild.js","path":"src/structures"}},{"name":"createIntegration","description":"Creates an integration by attaching an integration object","params":[{"name":"data","description":"The data for the integration","type":[[["IntegrationData"]]]},{"name":"reason","description":"Reason for creating the integration","type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":597,"file":"Guild.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild.\nResolves with a collection mapping invites by their codes.","examples":["// Fetch invites\nguild.fetchInvites()\n  .then(invites => console.log(`Fetched ${invites.size} invites`))\n  .catch(console.error);","// Fetch invite creator by their id\nguild.fetchInvites()\n .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":617,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVanityCode","description":"Fetches the vanity url invite code to this guild.\nResolves with a string matching the vanity url invite code, not the full url.","examples":["// Fetch invites\nguild.fetchVanityCode()\n  .then(code => {\n    console.log(`Vanity URL: https://discord.gg/${code}`);\n  })\n  .catch(console.error);"],"returns":[[["Promise","<"],["string",">"]]],"meta":{"line":641,"file":"Guild.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the guild.","examples":["// Fetch webhooks\nguild.fetchWebhooks()\n  .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":658,"file":"Guild.js","path":"src/structures"}},{"name":"fetchVoiceRegions","description":"Fetches available voice regions.","returns":[[["Promise","<"],["Collection","<"],["string",", "],["VoiceRegion",">>"]]],"meta":{"line":670,"file":"Guild.js","path":"src/structures"}},{"name":"fetchEmbed","description":"Fetches the guild embed.","examples":["// Fetches the guild embed\nguild.fetchEmbed()\n  .then(embed => console.log(`The embed is ${embed.enabled ? 'enabled' : 'disabled'}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["GuildEmbedData",">"]]],"meta":{"line":694,"file":"Guild.js","path":"src/structures"}},{"name":"fetchAuditLogs","description":"Fetches audit logs for this guild.","examples":["// Output audit log entries\nguild.fetchAuditLogs()\n  .then(audit => console.log(audit.entries.first()))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for fetching audit logs","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.before","description":"Limit to entries from before specified entry","optional":true,"type":[[["Snowflake"]],[["GuildAuditLogsEntry"]]]},{"name":"options.limit","description":"Limit number of entries","optional":true,"type":[[["number"]]]},{"name":"options.user","description":"Only show entries involving this user","optional":true,"type":[[["UserResolvable"]]]},{"name":"options.type","description":"Only show entries involving this action type","optional":true,"type":[[["AuditLogAction"]],[["number"]]]}],"returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":715,"file":"Guild.js","path":"src/structures"}},{"name":"addMember","description":"Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.","params":[{"name":"user","description":"User to add to the guild","type":[[["UserResolvable"]]]},{"name":"options","description":"Options for the addition","type":[[["Object"]]]},{"name":"options.accessToken","description":"An OAuth2 access token for the user with the `guilds.join` scope granted to the\nbot's application","type":[[["string"]]]},{"name":"options.nick","description":"Nickname to give the member (requires `MANAGE_NICKNAMES`)","optional":true,"type":[[["string"]]]},{"name":"options.roles","description":"Roles to add to the member\n(requires `MANAGE_ROLES`)","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"options.mute","description":"Whether the member should be muted (requires `MUTE_MEMBERS`)","optional":true,"type":[[["boolean"]]]},{"name":"options.deaf","description":"Whether the member should be deafened (requires `DEAFEN_MEMBERS`)","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":741,"file":"Guild.js","path":"src/structures"}},{"name":"edit","description":"Updates the guild with new information - e.g. a new name.","examples":["// Set the guild name and region\nguild.edit({\n  name: 'Discord Guild',\n  region: 'london',\n})\n  .then(updated => console.log(`New guild name ${updated} in region ${updated.region}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The data to update the guild with","type":[[["GuildEditData"]]]},{"name":"reason","description":"Reason for editing this guild","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":792,"file":"Guild.js","path":"src/structures"}},{"name":"setExplicitContentFilter","description":"Edits the level of the explicit content filter.","params":[{"name":"explicitContentFilter","description":"The new level of the explicit content filter","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the level of the guild's explicit content filter","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":826,"file":"Guild.js","path":"src/structures"}},{"name":"setDefaultMessageNotifications","description":"Edits the setting of the default message notifications of the guild.","params":[{"name":"defaultMessageNotifications","description":"The new setting for the default message notifications","type":[[["DefaultMessageNotifications"]],[["number"]]]},{"name":"reason","description":"Reason for changing the setting of the default message notifications","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":837,"file":"Guild.js","path":"src/structures"}},{"name":"setName","description":"Edits the name of the guild.","examples":["// Edit the guild name\nguild.setName('Discord Guild')\n .then(updated => console.log(`Updated guild name to ${guild}`))\n .catch(console.error);"],"params":[{"name":"name","description":"The new name of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":853,"file":"Guild.js","path":"src/structures"}},{"name":"setRegion","description":"Edits the region of the guild.","examples":["// Edit the guild region\nguild.setRegion('london')\n .then(updated => console.log(`Updated guild region to ${updated.region}`))\n .catch(console.error);"],"params":[{"name":"region","description":"The new region of the guild","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild's region","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":868,"file":"Guild.js","path":"src/structures"}},{"name":"setVerificationLevel","description":"Edits the verification level of the guild.","examples":["// Edit the guild verification level\nguild.setVerificationLevel(1)\n .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n .catch(console.error);"],"params":[{"name":"verificationLevel","description":"The new verification level of the guild","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's verification level","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":883,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKChannel","description":"Edits the AFK channel of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKChannel(channel)\n .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n .catch(console.error);"],"params":[{"name":"afkChannel","description":"The new AFK channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's AFK channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":898,"file":"Guild.js","path":"src/structures"}},{"name":"setSystemChannel","description":"Edits the system channel of the guild.","examples":["// Edit the guild system channel\nguild.setSystemChannel(channel)\n .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n .catch(console.error);"],"params":[{"name":"systemChannel","description":"The new system channel","type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's system channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":913,"file":"Guild.js","path":"src/structures"}},{"name":"setAFKTimeout","description":"Edits the AFK timeout of the guild.","examples":["// Edit the guild AFK channel\nguild.setAFKTimeout(60)\n .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n .catch(console.error);"],"params":[{"name":"afkTimeout","description":"The time in seconds that a user must be idle to be considered AFK","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the guild's AFK timeout","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":928,"file":"Guild.js","path":"src/structures"}},{"name":"setIcon","description":"Sets a new guild icon.","examples":["// Edit the guild icon\nguild.setIcon('./icon.png')\n .then(updated => console.log('Updated the guild icon'))\n .catch(console.error);"],"params":[{"name":"icon","description":"The new icon of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's icon","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":943,"file":"Guild.js","path":"src/structures"}},{"name":"setOwner","description":"Sets a new owner of the guild.","examples":["// Edit the guild owner\nguild.setOwner(guild.members.first())\n .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n .catch(console.error);"],"params":[{"name":"owner","description":"The new owner of the guild","type":[[["GuildMemberResolvable"]]]},{"name":"reason","description":"Reason for setting the new owner","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":958,"file":"Guild.js","path":"src/structures"}},{"name":"setSplash","description":"Sets a new guild splash screen.","examples":["// Edit the guild splash\nguild.setSplash('./splash.png')\n .then(updated => console.log('Updated the guild splash'))\n .catch(console.error);"],"params":[{"name":"splash","description":"The new splash screen of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's splash screen","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":973,"file":"Guild.js","path":"src/structures"}},{"name":"setBanner","description":"Sets a new guild banner.","examples":["guild.setBanner('./banner.png')\n .then(updated => console.log('Updated the guild banner'))\n .catch(console.error);"],"params":[{"name":"banner","description":"The new banner of the guild","type":[[["Base64Resolvable"]],[["BufferResolvable"]]]},{"name":"reason","description":"Reason for changing the guild's banner","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":987,"file":"Guild.js","path":"src/structures"}},{"name":"setChannelPositions","description":"Batch-updates the guild's channels' positions.","examples":["guild.setChannelPositions([{ channel: channelID, position: newChannelIndex }])\n  .then(guild => console.log(`Updated channel positions for ${guild}`))\n  .catch(console.error);"],"params":[{"name":"channelPositions","description":"Channel positions to update","type":[[["Array","<"],["ChannelPosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1007,"file":"Guild.js","path":"src/structures"}},{"name":"setRolePositions","description":"Batch-updates the guild's role positions","examples":["guild.setRolePositions([{ role: roleID, position: updatedRoleIndex }])\n .then(guild => console.log(`Role permissions updated for ${guild}`))\n .catch(console.error);"],"params":[{"name":"rolePositions","description":"Role positions to update","type":[[["Array","<"],["GuildRolePosition",">"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1037,"file":"Guild.js","path":"src/structures"}},{"name":"setEmbed","description":"Edits the guild's embed.","params":[{"name":"embed","description":"The embed for the guild","type":[[["GuildEmbedData"]]]},{"name":"reason","description":"Reason for changing the guild's embed","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1061,"file":"Guild.js","path":"src/structures"}},{"name":"leave","description":"Leaves the guild.","examples":["// Leave a guild\nguild.leave()\n  .then(g => console.log(`Left the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1080,"file":"Guild.js","path":"src/structures"}},{"name":"delete","description":"Deletes the guild.","examples":["// Delete a guild\nguild.delete()\n  .then(g => console.log(`Deleted the guild ${g}`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":1095,"file":"Guild.js","path":"src/structures"}},{"name":"equals","description":"Whether this guild equals another guild. It compares all properties, so for most operations\nit is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"guild","description":"The guild to compare with","type":[[["Guild"]]]}],"returns":[[["boolean"]]],"meta":{"line":1107,"file":"Guild.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the guild's name instead of the Guild object.","examples":["// Logs: Hello from My Guild!\nconsole.log(`Hello from ${guild}!`);"],"returns":[[["string"]]],"meta":{"line":1145,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedRoles","description":"Creates a collection of this guild's roles, sorted by their position and IDs.","access":"private","returns":[[["Collection","<"],["Role",">"]]],"meta":{"line":1168,"file":"Guild.js","path":"src/structures"}},{"name":"_sortedChannels","description":"Creates a collection of this guild's or a specific category's channels, sorted by their position and IDs.","access":"private","params":[{"name":"channel","description":"Category to get the channels of","optional":true,"type":[[["GuildChannel"]]]}],"returns":[[["Collection","<"],["GuildChannel",">"]]],"meta":{"line":1178,"file":"Guild.js","path":"src/structures"}}],"meta":{"line":33,"file":"Guild.js","path":"src/structures"}},{"name":"GuildAuditLogs","description":"Audit logs entries are held in this class.","props":[{"name":"webhooks","description":"Cached webhooks","access":"private","type":[[["Collection","<"],["Snowflake",", "],["Webhook",">"]]],"meta":{"line":119,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"entries","description":"The entries for this guild's audit logs","type":[[["Collection","<"],["Snowflake",", "],["GuildAuditLogsEntry",">"]]],"meta":{"line":130,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Targets","description":"Key mirror of all available audit log targets.","scope":"static","type":[[["AuditLogTargetType"]]],"meta":{"line":22,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"Actions","description":"All available actions keyed under their names to their numeric values.","scope":"static","type":[[["AuditLogAction"]]],"meta":{"line":72,"file":"GuildAuditLogs.js","path":"src/structures"}}],"methods":[{"name":"build","description":"Handles possible promises for entry targets.","scope":"static","returns":[[["Promise","<"],["GuildAuditLogs",">"]]],"meta":{"line":141,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"targetType","description":"Finds the target type from the entry action.","scope":"static","params":[{"name":"target","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogTargetType"]]],"meta":{"line":164,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"Finds the action type from the entry action.","scope":"static","params":[{"name":"action","description":"The action target","type":[[["AuditLogAction"]]]}],"returns":[[["AuditLogActionType"]]],"meta":{"line":190,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":112,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildAuditLogsEntry","description":"Audit logs entry.","props":[{"name":"targetType","description":"The target type of this entry","type":[[["AuditLogTargetType"]]],"meta":{"line":244,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"actionType","description":"The action type of this entry","type":[[["AuditLogActionType"]]],"meta":{"line":250,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"action","description":"Specific action type of this entry in its string presentation","type":[[["AuditLogAction"]]],"meta":{"line":256,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"reason","description":"The reason of this entry","nullable":true,"type":[[["string"]]],"meta":{"line":262,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"executor","description":"The user that executed this entry","type":[[["User"]]],"meta":{"line":268,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"changes","description":"Specific property changes","type":[[["Array","<"],["AuditLogChange",">"]]],"meta":{"line":284,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"id","description":"The ID of this entry","type":[[["Snowflake"]]],"meta":{"line":290,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"extra","description":"Any extra data from the entry","type":[[["Object"]],[["Role"]],[["GuildMember"]]],"meta":{"line":296,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"target","description":"The target of this entry","type":[[["AuditLogEntryTarget"]]],"meta":{"line":330,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp this entry was created at","readonly":true,"type":[[["number"]]],"meta":{"line":378,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"createdAt","description":"The time this entry was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":387,"file":"GuildAuditLogs.js","path":"src/structures"}}],"meta":{"line":238,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"GuildChannel","description":"Represents a guild channel (i.g. a {@link TextChannel}, {@link VoiceChannel} or {@link CategoryChannel}).","extends":[[["Channel"]]],"construct":{"name":"GuildChannel","params":[{"name":"guild","description":"The guild the guild channel is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the guild channel","type":[[["Object"]]]}]},"props":[{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":38,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":44,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":56,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":69,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":78,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":94,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":520,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":529,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":540,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":104,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":144,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":170,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":202,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":220,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":243,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":259,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":308,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":354,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":389,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":406,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":434,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":446,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":496,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":557,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":21,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmoji","description":"Represents a custom emoji.","extends":[[["Emoji"]]],"construct":{"name":"GuildEmoji","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild emoji","type":[[["Object"]]]},{"name":"guild","description":"The guild the guild emoji is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild this emoji is part of","type":[[["Guild"]]],"meta":{"line":25,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"requiresColons","description":"Whether or not this emoji requires colons surrounding it","type":[[["boolean"]]],"meta":{"line":34,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"managed","description":"Whether this emoji is managed by an external service","type":[[["boolean"]]],"meta":{"line":41,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"available","description":"Whether this emoji is available","type":[[["boolean"]]],"meta":{"line":48,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"deletable","description":"Whether the emoji is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":69,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles this emoji is active for (empty if all), mapped by role ID","readonly":true,"type":[[["GuildEmojiRoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":80,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":18,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":24,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"fetchAuthor","description":"Fetches the author for this emoji","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":88,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"edit","description":"Edits the emoji.","examples":["// Edit an emoji\nemoji.edit({ name: 'newemoji' })\n  .then(e => console.log(`Edited emoji ${e}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the emoji","type":[[["GuildEmojiEditData"]]]},{"name":"reason","description":"Reason for editing this emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":119,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of the emoji.","params":[{"name":"name","description":"The new name for the emoji","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the emoji's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":139,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"delete","description":"Deletes the emoji.","params":[{"name":"reason","description":"Reason for deleting the emoji","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildEmoji",">"]]],"meta":{"line":148,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"equals","description":"Whether this emoji is the same as another one.","params":[{"name":"other","description":"The emoji to compare it to","type":[[["GuildEmoji"]],[["Object"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the emoji is equal to the given emoji or not"},"meta":{"line":158,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":18,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMember","description":"Represents a member of a guild on Discord.","extends":[[["Base"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"GuildMember","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the guild member","type":[[["Object"]]]},{"name":"guild","description":"The guild the member is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild that this member is part of","type":[[["Guild"]]],"meta":{"line":30,"file":"GuildMember.js","path":"src/structures"}},{"name":"user","description":"The user that this guild member instance represents","type":[[["User"]]],"meta":{"line":32,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedTimestamp","description":"The timestamp the member joined the guild at","nullable":true,"type":[[["number"]]],"meta":{"line":43,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":49,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the member in their guild, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":55,"file":"GuildMember.js","path":"src/structures"}},{"name":"premiumSinceTimestamp","description":"The timestamp of when the member used their Nitro boost on the guild, if it was used","nullable":true,"type":[[["number"]]],"meta":{"line":61,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleted","description":"Whether the member has been removed from the guild","type":[[["boolean"]]],"meta":{"line":67,"file":"GuildMember.js","path":"src/structures"}},{"name":"nickname","description":"The nickname of this member, if they have one","nullable":true,"type":[[["string"]]],"meta":{"line":74,"file":"GuildMember.js","path":"src/structures"}},{"name":"partial","description":"Whether this GuildMember is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":99,"file":"GuildMember.js","path":"src/structures"}},{"name":"roles","description":"A collection of roles that are applied to this member, mapped by the role ID","readonly":true,"type":[[["GuildMemberRoleStore","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":108,"file":"GuildMember.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the member in their guild, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":117,"file":"GuildMember.js","path":"src/structures"}},{"name":"voice","description":"The voice state of this member","readonly":true,"type":[[["VoiceState"]]],"meta":{"line":127,"file":"GuildMember.js","path":"src/structures"}},{"name":"joinedAt","description":"The time this member joined the guild","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":136,"file":"GuildMember.js","path":"src/structures"}},{"name":"premiumSince","description":"The time of when the member used their Nitro boost on the guild, if it was used","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":145,"file":"GuildMember.js","path":"src/structures"}},{"name":"presence","description":"The presence of this guild member","readonly":true,"type":[[["Presence"]]],"meta":{"line":154,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayColor","description":"The displayed color of this member in base 10","readonly":true,"type":[[["number"]]],"meta":{"line":168,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayHexColor","description":"The displayed color of this member in hexadecimal","readonly":true,"type":[[["string"]]],"meta":{"line":178,"file":"GuildMember.js","path":"src/structures"}},{"name":"id","description":"The ID of this member","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":188,"file":"GuildMember.js","path":"src/structures"}},{"name":"displayName","description":"The nickname of this member, or their username if they don't have one","readonly":true,"type":[[["string"]]],"meta":{"line":197,"file":"GuildMember.js","path":"src/structures"}},{"name":"permissions","description":"The overall set of permissions for this member, taking only roles into account","readonly":true,"type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":206,"file":"GuildMember.js","path":"src/structures"}},{"name":"manageable","description":"Whether this member is manageable in terms of role hierarchy by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":216,"file":"GuildMember.js","path":"src/structures"}},{"name":"kickable","description":"Whether this member is kickable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":228,"file":"GuildMember.js","path":"src/structures"}},{"name":"bannable","description":"Whether this member is bannable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":237,"file":"GuildMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsIn","description":"Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\ntaking into account roles and permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":247,"file":"GuildMember.js","path":"src/structures"}},{"name":"hasPermission","description":"Checks if any of this member's roles have a permission.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.checkOwner","description":"Whether to allow being the guild's owner to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":261,"file":"GuildMember.js","path":"src/structures"}},{"name":"edit","description":"Edits this member.","params":[{"name":"data","description":"The data to edit the member with","type":[[["GuildMemberEditData"]]]},{"name":"reason","description":"Reason for editing this user","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":283,"file":"GuildMember.js","path":"src/structures"}},{"name":"setNickname","description":"Sets the nickname for this member.","params":[{"name":"nick","description":"The nickname for the guild member","type":[[["string"]]]},{"name":"reason","description":"Reason for setting the nickname","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":318,"file":"GuildMember.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":326,"file":"GuildMember.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes any DMs with this member.","returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":334,"file":"GuildMember.js","path":"src/structures"}},{"name":"kick","description":"Kicks this member from the guild.","params":[{"name":"reason","description":"Reason for kicking user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":343,"file":"GuildMember.js","path":"src/structures"}},{"name":"ban","description":"Bans this guild member.","examples":["// ban a guild member\nguildMember.ban({ days: 7, reason: 'They deserved it' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the ban","optional":true,"type":[[["Object"]]]},{"name":"options.days","description":"Number of days of messages to delete","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for banning","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":360,"file":"GuildMember.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this GuildMember.","returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":368,"file":"GuildMember.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${member}!`);"],"returns":[[["string"]]],"meta":{"line":379,"file":"GuildMember.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":23,"file":"GuildMember.js","path":"src/structures"}},{"name":"Integration","description":"Represents a guild integration.","props":[{"name":"guild","description":"The guild this integration belongs to","type":[[["Guild"]]],"meta":{"line":23,"file":"Integration.js","path":"src/structures"}},{"name":"id","description":"The integration id","type":[[["Snowflake"]]],"meta":{"line":29,"file":"Integration.js","path":"src/structures"}},{"name":"name","description":"The integration name","type":[[["string"]]],"meta":{"line":35,"file":"Integration.js","path":"src/structures"}},{"name":"type","description":"The integration type (twitch, youtube, etc)","type":[[["string"]]],"meta":{"line":41,"file":"Integration.js","path":"src/structures"}},{"name":"enabled","description":"Whether this integration is enabled","type":[[["boolean"]]],"meta":{"line":47,"file":"Integration.js","path":"src/structures"}},{"name":"syncing","description":"Whether this integration is syncing","type":[[["boolean"]]],"meta":{"line":53,"file":"Integration.js","path":"src/structures"}},{"name":"role","description":"The role that this integration uses for subscribers","type":[[["Role"]]],"meta":{"line":59,"file":"Integration.js","path":"src/structures"}},{"name":"user","description":"The user for this integration","type":[[["User"]]],"meta":{"line":65,"file":"Integration.js","path":"src/structures"}},{"name":"account","description":"The account integration information","type":[[["IntegrationAccount"]]],"meta":{"line":71,"file":"Integration.js","path":"src/structures"}},{"name":"syncedAt","description":"The last time this integration was last synced","type":[[["number"]]],"meta":{"line":77,"file":"Integration.js","path":"src/structures"}},{"name":"expireBehavior","description":"The behavior of expiring subscribers","type":[[["number"]]],"meta":{"line":86,"file":"Integration.js","path":"src/structures"}},{"name":"expireGracePeriod","description":"The grace period before expiring subscribers","type":[[["number"]]],"meta":{"line":92,"file":"Integration.js","path":"src/structures"}}],"methods":[{"name":"sync","description":"Sync this integration","returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":99,"file":"Integration.js","path":"src/structures"}},{"name":"edit","description":"Edits this integration.","params":[{"name":"data","description":"The data to edit this integration with","type":[[["IntegrationEditData"]]]},{"name":"reason","description":"Reason for editing this integration","type":[[["string"]]]}],"returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":122,"file":"Integration.js","path":"src/structures"}},{"name":"delete","description":"Deletes this integration.","params":[{"name":"reason","description":"Reason for deleting this integration","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Integration",">"]]],"meta":{"line":144,"file":"Integration.js","path":"src/structures"}}],"meta":{"line":16,"file":"Integration.js","path":"src/structures"}},{"name":"Collector","description":"Abstract class for defining a new Collector.","abstract":true,"props":[{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collect","description":"Handles incoming events from the `handleCollect` function. Returns null if the event should not\nbe collected, or returns an object describing the data that should be stored.","see":["Collector#handleCollect"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[[["Object"]]],"description":"Data to insert into collection, if any","nullable":true},"meta":{"line":243,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Handles incoming events from the `handleDispose`. Returns null if the event should not\nbe disposed, or returns the key that should be removed.","see":["Collector#handleDispose"],"abstract":true,"params":[{"name":"args","description":"Any args the event listener emits","variable":true,"type":[["*"]]}],"returns":{"types":[["*"]],"description":"Key to remove from the collection, if any","nullable":true},"meta":{"line":253,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","abstract":true,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":260,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever an element is collected.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":95,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"dispose","description":"Emitted whenever an element is disposed of.","params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":122,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":28,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"TextBasedChannel","description":"Interface for classes that have text-channel-like features.","props":[{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"methods":[{"name":"send","description":"Sends a message to this channel.","examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":14,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"Invite","description":"Represents an invitation to a guild channel.\n<warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>","extends":[[["Base"]]],"props":[{"name":"guild","description":"The guild the invite is for","nullable":true,"type":[[["Guild"]]],"meta":{"line":23,"file":"Invite.js","path":"src/structures"}},{"name":"code","description":"The code for this invite","type":[[["string"]]],"meta":{"line":29,"file":"Invite.js","path":"src/structures"}},{"name":"presenceCount","description":"The approximate number of online members of the guild this invite is for","nullable":true,"type":[[["number"]]],"meta":{"line":35,"file":"Invite.js","path":"src/structures"}},{"name":"memberCount","description":"The approximate total number of members of the guild this invite is for","nullable":true,"type":[[["number"]]],"meta":{"line":41,"file":"Invite.js","path":"src/structures"}},{"name":"temporary","description":"Whether or not this invite is temporary","nullable":true,"type":[[["boolean"]]],"meta":{"line":47,"file":"Invite.js","path":"src/structures"}},{"name":"maxAge","description":"The maximum age of the invite, in seconds, 0 if never expires","nullable":true,"type":[[["number"]]],"meta":{"line":53,"file":"Invite.js","path":"src/structures"}},{"name":"uses","description":"How many times this invite has been used","nullable":true,"type":[[["number"]]],"meta":{"line":59,"file":"Invite.js","path":"src/structures"}},{"name":"maxUses","description":"The maximum uses of this invite","nullable":true,"type":[[["number"]]],"meta":{"line":65,"file":"Invite.js","path":"src/structures"}},{"name":"inviter","description":"The user who created this invite","nullable":true,"type":[[["User"]]],"meta":{"line":71,"file":"Invite.js","path":"src/structures"}},{"name":"targetUser","description":"The target user for this invite","nullable":true,"type":[[["User"]]],"meta":{"line":77,"file":"Invite.js","path":"src/structures"}},{"name":"targetUserType","description":"The target user type","nullable":true,"type":[[["TargetUser"]]],"meta":{"line":89,"file":"Invite.js","path":"src/structures"}},{"name":"channel","description":"The channel the invite is for","type":[[["Channel"]]],"meta":{"line":95,"file":"Invite.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the invite was created at","nullable":true,"type":[[["number"]]],"meta":{"line":101,"file":"Invite.js","path":"src/structures"}},{"name":"createdAt","description":"The time the invite was created at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":109,"file":"Invite.js","path":"src/structures"}},{"name":"deletable","description":"Whether the invite is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":118,"file":"Invite.js","path":"src/structures"}},{"name":"expiresTimestamp","description":"The timestamp the invite will expire at","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":131,"file":"Invite.js","path":"src/structures"}},{"name":"expiresAt","description":"The time the invite will expire at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":140,"file":"Invite.js","path":"src/structures"}},{"name":"url","description":"The URL to the invite","readonly":true,"type":[[["string"]]],"meta":{"line":150,"file":"Invite.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this invite.","params":[{"name":"reason","description":"Reason for deleting this invite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":159,"file":"Invite.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the invite's URL instead of the object.","examples":["// Logs: Invite: https://discord.gg/A1b2C3\nconsole.log(`Invite: ${invite}`);"],"returns":[[["string"]]],"meta":{"line":170,"file":"Invite.js","path":"src/structures"}}],"meta":{"line":13,"file":"Invite.js","path":"src/structures"}},{"name":"Message","description":"Represents a message on Discord.","extends":[[["Base"]]],"construct":{"name":"Message","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the message","type":[[["Object"]]]},{"name":"channel","description":"The channel the message was sent in","type":[[["TextChannel"]],[["DMChannel"]]]}]},"props":[{"name":"channel","description":"The channel that the message was sent in","type":[[["TextChannel"]],[["DMChannel"]]],"meta":{"line":35,"file":"Message.js","path":"src/structures"}},{"name":"deleted","description":"Whether this message has been deleted","type":[[["boolean"]]],"meta":{"line":41,"file":"Message.js","path":"src/structures"}},{"name":"id","description":"The ID of the message","type":[[["Snowflake"]]],"meta":{"line":51,"file":"Message.js","path":"src/structures"}},{"name":"type","description":"The type of the message","type":[[["MessageType"]]],"meta":{"line":57,"file":"Message.js","path":"src/structures"}},{"name":"content","description":"The content of the message","type":[[["string"]]],"meta":{"line":63,"file":"Message.js","path":"src/structures"}},{"name":"author","description":"The author of the message","nullable":true,"type":[[["User"]]],"meta":{"line":69,"file":"Message.js","path":"src/structures"}},{"name":"pinned","description":"Whether or not this message is pinned","type":[[["boolean"]]],"meta":{"line":75,"file":"Message.js","path":"src/structures"}},{"name":"tts","description":"Whether or not the message was Text-To-Speech","type":[[["boolean"]]],"meta":{"line":81,"file":"Message.js","path":"src/structures"}},{"name":"nonce","description":"A random number or string used for checking message delivery\n<warn>This is only received after the message was sent successfully, and\nlost if re-fetched</warn>","nullable":true,"type":[[["string"]]],"meta":{"line":89,"file":"Message.js","path":"src/structures"}},{"name":"system","description":"Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)","type":[[["boolean"]]],"meta":{"line":95,"file":"Message.js","path":"src/structures"}},{"name":"embeds","description":"A list of embeds in the message - e.g. YouTube Player","type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":101,"file":"Message.js","path":"src/structures"}},{"name":"attachments","description":"A collection of attachments in the message - e.g. Pictures - mapped by their ID","type":[[["Collection","<"],["Snowflake",", "],["MessageAttachment",">"]]],"meta":{"line":107,"file":"Message.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the message was sent at","type":[[["number"]]],"meta":{"line":120,"file":"Message.js","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp the message was last edited at (if applicable)","nullable":true,"type":[[["number"]]],"meta":{"line":126,"file":"Message.js","path":"src/structures"}},{"name":"reactions","description":"A collection of reactions to this message, mapped by the reaction ID","type":[[["ReactionStore","<"],["Snowflake",", "],["MessageReaction",">"]]],"meta":{"line":132,"file":"Message.js","path":"src/structures"}},{"name":"mentions","description":"All valid mentions that the message contains","type":[[["MessageMentions"]]],"meta":{"line":143,"file":"Message.js","path":"src/structures"}},{"name":"webhookID","description":"ID of the webhook that sent the message, if applicable","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":149,"file":"Message.js","path":"src/structures"}},{"name":"application","description":"Supplemental application information for group activities","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":155,"file":"Message.js","path":"src/structures"}},{"name":"activity","description":"Group activity","nullable":true,"type":[[["MessageActivity"]]],"meta":{"line":161,"file":"Message.js","path":"src/structures"}},{"name":"_edits","description":"The previous versions of the message, sorted with the most recent first","access":"private","type":[[["Array","<"],["Message",">"]]],"meta":{"line":171,"file":"Message.js","path":"src/structures"}},{"name":"flags","description":"Flags that are applied to the message","type":[[["Readonly","<"],["MessageFlags",">"]]],"meta":{"line":183,"file":"Message.js","path":"src/structures"}},{"name":"reference","description":"Message reference data","nullable":true,"type":[[["MessageReference"]]],"meta":{"line":197,"file":"Message.js","path":"src/structures"}},{"name":"partial","description":"Whether or not this message is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":209,"file":"Message.js","path":"src/structures"}},{"name":"member","description":"Represents the author of the message as a guild member.\nOnly available if the message comes from a guild where the author is still a member","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":257,"file":"Message.js","path":"src/structures"}},{"name":"createdAt","description":"The time the message was sent at","readonly":true,"type":[[["Date"]]],"meta":{"line":266,"file":"Message.js","path":"src/structures"}},{"name":"editedAt","description":"The time the message was last edited at (if applicable)","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":275,"file":"Message.js","path":"src/structures"}},{"name":"guild","description":"The guild the message was sent in (if in a guild channel)","readonly":true,"nullable":true,"type":[[["Guild"]]],"meta":{"line":284,"file":"Message.js","path":"src/structures"}},{"name":"url","description":"The url to jump to this message","readonly":true,"type":[[["string"]]],"meta":{"line":293,"file":"Message.js","path":"src/structures"}},{"name":"cleanContent","description":"The message contents with all mentions replaced by the equivalent text.\nIf mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.","readonly":true,"type":[[["string"]]],"meta":{"line":303,"file":"Message.js","path":"src/structures"}},{"name":"edits","description":"An array of cached versions of the message, including the current version\nSorted from latest (first) to oldest (last)","readonly":true,"type":[[["Array","<"],["Message",">"]]],"meta":{"line":358,"file":"Message.js","path":"src/structures"}},{"name":"editable","description":"Whether the message is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":369,"file":"Message.js","path":"src/structures"}},{"name":"deletable","description":"Whether the message is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":378,"file":"Message.js","path":"src/structures"}},{"name":"pinnable","description":"Whether the message is pinnable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":389,"file":"Message.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"patch","description":"Updates the message.","access":"private","params":[{"name":"data","description":"Raw Discord message update data","type":[[["Object"]]]}],"meta":{"line":218,"file":"Message.js","path":"src/structures"}},{"name":"createReactionCollector","description":"Creates a reaction collector.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID';\nconst collector = message.createReactionCollector(filter, { time: 15000 });\ncollector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to apply","type":[[["CollectorFilter"]]]},{"name":"options","description":"Options to send to the collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}],"returns":[[["ReactionCollector"]]],"meta":{"line":319,"file":"Message.js","path":"src/structures"}},{"name":"awaitReactions","description":"Similar to createReactionCollector but in promise form.\nResolves with a collection of reactions that pass the specified filter.","examples":["// Create a reaction collector\nconst filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\nmessage.awaitReactions(filter, { time: 15000 })\n  .then(collected => console.log(`Collected ${collected.size} reactions`))\n  .catch(console.error);"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitReactionsOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["string",", "],["MessageReaction",">>"]]],"meta":{"line":342,"file":"Message.js","path":"src/structures"}},{"name":"edit","description":"Edits the content of the message.","examples":["// Update the content of a message\nmessage.edit('This is my new content!')\n  .then(msg => console.log(`Updated the content of a message to ${msg.content}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The new content for the message","optional":true,"type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"type":[[["MessageEditOptions"]],[["MessageEmbed"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":413,"file":"Message.js","path":"src/structures"}},{"name":"pin","description":"Pins this message to the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":430,"file":"Message.js","path":"src/structures"}},{"name":"unpin","description":"Unpins this message from the channel's pinned messages.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":439,"file":"Message.js","path":"src/structures"}},{"name":"react","description":"Adds a reaction to the message.","examples":["// React to a message with a unicode emoji\nmessage.react('🤔')\n  .then(console.log)\n  .catch(console.error);","// React to a message with a custom emoji\nmessage.react(message.guild.emojis.get('123456789012345678'))\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"emoji","description":"The emoji to react with","type":[[["EmojiIdentifierResolvable"]]]}],"returns":[[["Promise","<"],["MessageReaction",">"]]],"meta":{"line":459,"file":"Message.js","path":"src/structures"}},{"name":"delete","description":"Deletes the message.","examples":["// Delete a message\nmessage.delete()\n  .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.reason","description":"Reason for deleting this message, if it does not belong to the client user","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":485,"file":"Message.js","path":"src/structures"}},{"name":"reply","description":"Replies to the message.","examples":["// Reply to a message\nmessage.reply('Hey, I\\'m a reply!')\n  .then(() => console.log(`Sent a reply to ${message.author.username}`))\n  .catch(console.error);"],"params":[{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":508,"file":"Message.js","path":"src/structures"}},{"name":"fetch","description":"Fetch this message.","returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":519,"file":"Message.js","path":"src/structures"}},{"name":"fetchWebhook","description":"Fetches the webhook used to create this message.","returns":[[["Promise","<?"],["Webhook",">"]]],"meta":{"line":527,"file":"Message.js","path":"src/structures"}},{"name":"equals","description":"Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\nwithout checking all the properties, use `message.id === message2.id`, which is much more efficient. This\nmethod allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.","params":[{"name":"message","description":"The message to compare it to","type":[[["Message"]]]},{"name":"rawData","description":"Raw data passed through the WebSocket about this message","type":[[["Object"]]]}],"returns":[[["boolean"]]],"meta":{"line":540,"file":"Message.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically concatenates the message's content instead of the object.","examples":["// Logs: Message: This is a message!\nconsole.log(`Message: ${message}`);"],"returns":[[["string"]]],"meta":{"line":569,"file":"Message.js","path":"src/structures"}}],"meta":{"line":28,"file":"Message.js","path":"src/structures"}},{"name":"MessageAttachment","description":"Represents an attachment in a message.","construct":{"name":"MessageAttachment","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"default":null,"type":[[["string"]]]},{"name":"data","description":"Extra data","optional":true,"type":[[["Object"]]]}]},"props":[{"name":"name","description":"The name of this attachment","nullable":true,"type":[[["string"]]],"meta":{"line":20,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"id","description":"The ID of this attachment","type":[[["Snowflake"]]],"meta":{"line":51,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"size","description":"The size of this attachment in bytes","type":[[["number"]]],"meta":{"line":57,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"url","description":"The URL to this attachment","type":[[["string"]]],"meta":{"line":63,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"proxyURL","description":"The Proxy URL to this attachment","type":[[["string"]]],"meta":{"line":69,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"height","description":"The height of this attachment (if an image or video)","nullable":true,"type":[[["number"]]],"meta":{"line":75,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"width","description":"The width of this attachment (if an image or video)","nullable":true,"type":[[["number"]]],"meta":{"line":81,"file":"MessageAttachment.js","path":"src/structures"}}],"methods":[{"name":"setFile","description":"Sets the file of this attachment.","params":[{"name":"attachment","description":"The file","type":[[["BufferResolvable"]],[["Stream"]]]},{"name":"name","description":"The name of the file, if any","optional":true,"default":null,"type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":30,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"setName","description":"Sets the name of this attachment.","params":[{"name":"name","description":"The name of the file","type":[[["string"]]]}],"returns":{"types":[[["MessageAttachment"]]],"description":"This attachment"},"meta":{"line":41,"file":"MessageAttachment.js","path":"src/structures"}}],"meta":{"line":14,"file":"MessageAttachment.js","path":"src/structures"}},{"name":"MessageCollector","description":"Collects messages on a channel.","extends":[[["Collector"]]],"construct":{"name":"MessageCollector","params":[{"name":"channel","description":"The channel","type":[[["TextChannel"]],[["DMChannel"]]]},{"name":"filter","description":"The filter to be applied to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to be applied to this collector","type":[[["MessageCollectorOptions"]]]}]},"props":[{"name":"channel","description":"The channel","type":[[["TextBasedChannel"]]],"meta":{"line":30,"file":"MessageCollector.js","path":"src/structures"}},{"name":"received","description":"Total number of messages that were received in the channel during message collection","type":[[["number"]]],"meta":{"line":36,"file":"MessageCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles a message for possible collection.","access":"private","params":[{"name":"message","description":"The message that could be collected","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":61,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a message for possible disposal.","params":[{"name":"message","description":"The message that could be disposed of","type":[[["Message"]]]}],"returns":{"types":[[["Snowflake"]]],"nullable":true},"meta":{"line":77,"file":"MessageCollector.js","path":"src/structures"}},{"name":"endReason","description":"Checks after un/collection to see if the collector is done.","access":"private","returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":91,"file":"MessageCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}}],"events":[{"name":"collect","description":"Emitted whenever a message is collected.","params":[{"name":"message","description":"The message that was collected","type":[[["Message"]]]}],"meta":{"line":62,"file":"MessageCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a message is disposed of.","params":[{"name":"message","description":"The message that was disposed of","type":[[["Message"]]]}],"meta":{"line":78,"file":"MessageCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":23,"file":"MessageCollector.js","path":"src/structures"}},{"name":"MessageEmbed","description":"Represents an embed in a message (image/video preview, rich embed, etc.)","props":[{"name":"type","description":"The type of this embed, either:\n* `image` - an image embed\n* `video` - a video embed\n* `gifv` - a gifv embed\n* `link` - a link embed\n* `rich` - a rich embed","type":[[["string"]]],"meta":{"line":24,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"title","description":"The title of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":30,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"description","description":"The description of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":36,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"url","description":"The URL of this embed","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"color","description":"The color of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":48,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of this embed","nullable":true,"type":[[["number"]]],"meta":{"line":54,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"fields","description":"The fields of this embed","type":[[["Array","<"],["EmbedField",">"]]],"meta":{"line":67,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"thumbnail","description":"The thumbnail of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL for this thumbnail","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this thumbnail","type":[[["string"]]]},{"name":"height","description":"Height of this thumbnail","type":[[["number"]]]},{"name":"width","description":"Width of this thumbnail","type":[[["number"]]]}],"meta":{"line":77,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"image","description":"The image of this embed, if there is one","nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL for this image","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this image","type":[[["string"]]]},{"name":"height","description":"Height of this image","type":[[["number"]]]},{"name":"width","description":"Width of this image","type":[[["number"]]]}],"meta":{"line":92,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"video","description":"The video of this embed (if there is one)","readonly":true,"nullable":true,"type":[[["Object"]]],"props":[{"name":"url","description":"URL of this video","type":[[["string"]]]},{"name":"proxyURL","description":"ProxyURL for this video","type":[[["string"]]]},{"name":"height","description":"Height of this video","type":[[["number"]]]},{"name":"width","description":"Width of this video","type":[[["number"]]]}],"meta":{"line":108,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"author","description":"The author of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"name","description":"The name of this author","type":[[["string"]]]},{"name":"url","description":"URL of this author","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this author","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this author","type":[[["string"]]]}],"meta":{"line":123,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"provider","description":"The provider of this embed (if there is one)","nullable":true,"type":[[["Object"]]],"props":[{"name":"name","description":"The name of this provider","type":[[["string"]]]},{"name":"url","description":"URL of this provider","type":[[["string"]]]}],"meta":{"line":136,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"footer","description":"The footer of this embed","nullable":true,"type":[[["Object"]]],"props":[{"name":"text","description":"The text of this footer","type":[[["string"]]]},{"name":"iconURL","description":"URL of the icon for this footer","type":[[["string"]]]},{"name":"proxyIconURL","description":"Proxied URL of the icon for this footer","type":[[["string"]]]}],"meta":{"line":145,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"files","description":"The files of this embed","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]],"meta":{"line":155,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"createdAt","description":"The date this embed was created at","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":166,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the embed color, with a leading hash","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":175,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"length","description":"The accumulated length for the embed title, description, fields and footer text","readonly":true,"type":[[["number"]]],"meta":{"line":184,"file":"MessageEmbed.js","path":"src/structures"}}],"methods":[{"name":"addField","description":"Adds a field to the embed (max 25).","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":200,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"addBlankField","description":"Convenience function for `<MessageEmbed>.addField('\\u200B', '\\u200B', inline)`.","params":[{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":210,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"spliceField","description":"Removes, replaces, and inserts fields in the embed (max 25).","params":[{"name":"index","description":"The index to start at","type":[[["number"]]]},{"name":"deleteCount","description":"The number of fields to remove","type":[[["number"]]]},{"name":"name","description":"The name of the field","optional":true,"type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","optional":true,"type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":223,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"attachFiles","description":"Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\nsetting an embed image or author/footer icons. Multiple files can be attached.","params":[{"name":"files","description":"Files to attach","type":[[["Array","<("],["FileOptions","|"],["string","|"],["MessageAttachment",")>"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":238,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setAuthor","description":"Sets the author of this embed.","params":[{"name":"name","description":"The name of the author","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the author","optional":true,"type":[[["string"]]]},{"name":"url","description":"The URL of the author","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":250,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setColor","description":"Sets the color of this embed.","params":[{"name":"color","description":"The color of the embed","type":[[["ColorResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":260,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setDescription","description":"Sets the description of this embed.","params":[{"name":"description","description":"The description","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":270,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setFooter","description":"Sets the footer of this embed.","params":[{"name":"text","description":"The text of the footer","type":[[["StringResolvable"]]]},{"name":"iconURL","description":"The icon URL of the footer","optional":true,"type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":282,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setImage","description":"Sets the image of this embed.","params":[{"name":"url","description":"The URL of the image","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":293,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setThumbnail","description":"Sets the thumbnail of this embed.","params":[{"name":"url","description":"The URL of the thumbnail","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":303,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTimestamp","description":"Sets the timestamp of this embed.","params":[{"name":"timestamp","description":"The timestamp or date","optional":true,"default":"Date.now()","type":[[["Date"]],[["number"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":313,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setTitle","description":"Sets the title of this embed.","params":[{"name":"title","description":"The title","type":[[["StringResolvable"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":324,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"setURL","description":"Sets the URL of this embed.","params":[{"name":"url","description":"The URL","type":[[["string"]]]}],"returns":[[["MessageEmbed"]]],"meta":{"line":335,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"_apiTransform","description":"Transforms the embed object to be processed.","access":"private","returns":{"types":[[["Object"]]],"description":"The raw data of this embed"},"meta":{"line":349,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"checkField","description":"Checks for valid field input and resolves strings","scope":"static","params":[{"name":"name","description":"The name of the field","type":[[["StringResolvable"]]]},{"name":"value","description":"The value of the field","type":[[["StringResolvable"]]]},{"name":"inline","description":"Set the field to display inline","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["EmbedField"]]],"meta":{"line":379,"file":"MessageEmbed.js","path":"src/structures"}}],"meta":{"line":10,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"MessageMentions","description":"Keeps track of mentions in a {@link Message}.","props":[{"name":"everyone","description":"Whether `@everyone` or `@here` were mentioned","type":[[["boolean"]]],"meta":{"line":39,"file":"MessageMentions.js","path":"src/structures"}},{"name":"users","description":"Any users that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":47,"file":"MessageMentions.js","path":"src/structures"}},{"name":"roles","description":"Any roles that were mentioned","type":[[["Collection","<"],["Snowflake",", "],["Role",">"]]],"meta":{"line":65,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_members","description":"Cached members for {@link MessageMention#members}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":82,"file":"MessageMentions.js","path":"src/structures"}},{"name":"_channels","description":"Cached channels for {@link MessageMention#channels}","access":"private","nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":89,"file":"MessageMentions.js","path":"src/structures"}},{"name":"crosspostedChannels","description":"A collection of crossposted channels","type":[[["Collection","<"],["Snowflake",", "],["CrosspostedChannel",">"]]],"meta":{"line":106,"file":"MessageMentions.js","path":"src/structures"}},{"name":"members","description":"Any members that were mentioned (only in {@link TextChannel}s)","readonly":true,"nullable":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":130,"file":"MessageMentions.js","path":"src/structures"}},{"name":"channels","description":"Any channels that were mentioned","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildChannel",">"]]],"meta":{"line":146,"file":"MessageMentions.js","path":"src/structures"}},{"name":"EVERYONE_PATTERN","description":"Regular expression that globally matches `@everyone` and `@here`","scope":"static","type":[[["RegExp"]]],"meta":{"line":193,"file":"MessageMentions.js","path":"src/structures"}},{"name":"USERS_PATTERN","description":"Regular expression that globally matches user mentions like `<@81440962496172032>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":199,"file":"MessageMentions.js","path":"src/structures"}},{"name":"ROLES_PATTERN","description":"Regular expression that globally matches role mentions like `<@&297577916114403338>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":205,"file":"MessageMentions.js","path":"src/structures"}},{"name":"CHANNELS_PATTERN","description":"Regular expression that globally matches channel mentions like `<#222079895583457280>`","scope":"static","type":[[["RegExp"]]],"meta":{"line":211,"file":"MessageMentions.js","path":"src/structures"}}],"methods":[{"name":"has","description":"Checks if a user, guild member, role, or channel is mentioned.\nTakes into account user mentions, role mentions, and @everyone/@here mentions.","params":[{"name":"data","description":"User/GuildMember/Role/Channel to check","type":[[["UserResolvable"]],[["GuildMember"]],[["Role"]],[["GuildChannel"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.ignoreDirect","description":"Whether to ignore direct mentions to the item","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreRoles","description":"Whether to ignore role mentions to a guild member","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.ignoreEveryone","description":"Whether to ignore everyone/here mentions","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":167,"file":"MessageMentions.js","path":"src/structures"}}],"meta":{"line":12,"file":"MessageMentions.js","path":"src/structures"}},{"name":"MessageReaction","description":"Represents a reaction to a message.","construct":{"name":"MessageReaction","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the message reaction","type":[[["Object"]]]},{"name":"message","description":"The message the reaction refers to","type":[[["Message"]]]}]},"props":[{"name":"message","description":"The message that this reaction refers to","type":[[["Message"]]],"meta":{"line":22,"file":"MessageReaction.js","path":"src/structures"}},{"name":"me","description":"Whether the client has given this reaction","type":[[["boolean"]]],"meta":{"line":28,"file":"MessageReaction.js","path":"src/structures"}},{"name":"count","description":"The number of people that have given the same reaction","type":[[["number"]]],"meta":{"line":34,"file":"MessageReaction.js","path":"src/structures"}},{"name":"users","description":"The users that have given this reaction, mapped by their ID","type":[[["ReactionUserStore","<"],["Snowflake",", "],["User",">"]]],"meta":{"line":40,"file":"MessageReaction.js","path":"src/structures"}},{"name":"emoji","description":"The emoji of this reaction, either an GuildEmoji object for known custom emojis, or a ReactionEmoji\nobject which has fewer properties. Whatever the prototype of the emoji, it will still have\n`name`, `id`, `identifier` and `toString()`","readonly":true,"type":[[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":52,"file":"MessageReaction.js","path":"src/structures"}}],"meta":{"line":17,"file":"MessageReaction.js","path":"src/structures"}},{"name":"NewsChannel","description":"Represents a guild news channel on Discord.","extends":[[["TextChannel"]]],"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":26,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":44,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":56,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":38,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":44,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":56,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":69,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":78,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":94,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":520,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":529,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":540,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","inherits":"TextChannel#setRateLimitPerUser","inherited":true,"params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":73,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","inherits":"TextChannel#setNSFW","inherited":true,"params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":83,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","inherits":"TextChannel#fetchWebhooks","inherited":true,"examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":96,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","inherits":"TextChannel#createWebhook","inherited":true,"examples":["// Create a webhook for the current channel\nchannel.createWebhook('Snek', {\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":120,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","inherits":"TextChannel#send","inherited":true,"implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","inherits":"TextChannel#startTyping","inherited":true,"implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","inherits":"TextChannel#stopTyping","inherited":true,"implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","inherits":"TextChannel#createMessageCollector","inherited":true,"implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","inherits":"TextChannel#awaitMessages","inherited":true,"implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","inherits":"TextChannel#bulkDelete","inherited":true,"implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":104,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":144,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":170,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":202,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":220,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":243,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":259,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":308,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":354,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":389,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":406,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":434,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":446,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":496,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":557,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"NewsChannel.js","path":"src/structures"}},{"name":"PermissionOverwrites","description":"Represents a permission overwrite for a role or member in a guild channel.","props":[{"name":"channel","description":"The GuildChannel this overwrite is for","readonly":true,"type":[[["GuildChannel"]]],"meta":{"line":13,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"id","description":"The ID of this overwrite, either a user ID or a role ID","type":[[["Snowflake"]]],"meta":{"line":29,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"type","description":"The type of this overwrite","type":[[["OverwriteType"]]],"meta":{"line":42,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"deny","description":"The permissions that are denied for the user or role.","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":48,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"allow","description":"The permissions that are allowed for the user or role.","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":54,"file":"PermissionOverwrites.js","path":"src/structures"}}],"methods":[{"name":"update","description":"Updates this permissionOverwrites.","examples":["// Update permission overwrites\npermissionOverwrites.update({\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":70,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"delete","description":"Deletes this Permission Overwrite.","params":[{"name":"reason","description":"Reason for deleting this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["PermissionOverwrites",">"]]],"meta":{"line":83,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"resolveOverwriteOptions","description":"Deletes this Permission Overwrite.","scope":"static","params":[{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"initialPermissions","description":"The initial permissions","type":[[["Object"]]]},{"name":"initialPermissions.allow","description":"Initial allowed permissions","type":[[["PermissionResolvable"]]]},{"name":"initialPermissions.deny","description":"Initial denied permissions","type":[[["PermissionResolvable"]]]}],"returns":[[["ResolvedOverwriteOptions"]]],"meta":{"line":119,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"resolve","description":"Resolves an overwrite into {@link RawOverwriteData}.","scope":"static","params":[{"name":"overwrite","description":"The overwrite-like data to resolve","type":[[["OverwriteResolvable"]]]},{"name":"guild","description":"The guild to resolve from","type":[[["Guild"]]]}],"returns":[[["RawOverwriteData"]]],"meta":{"line":168,"file":"PermissionOverwrites.js","path":"src/structures"}}],"meta":{"line":12,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"Presence","description":"Represents a user's presence.","construct":{"name":"Presence","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the presence","optional":true,"default":"{}","type":[[["Object"]]]}]},"props":[{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":40,"file":"Presence.js","path":"src/structures"}},{"name":"userID","description":"The user ID of this presence","type":[[["Snowflake"]]],"meta":{"line":51,"file":"Presence.js","path":"src/structures"}},{"name":"guild","description":"The guild of this presence","nullable":true,"type":[[["Guild"]]],"meta":{"line":57,"file":"Presence.js","path":"src/structures"}},{"name":"user","description":"The user of this presence","readonly":true,"nullable":true,"type":[[["User"]]],"meta":{"line":67,"file":"Presence.js","path":"src/structures"}},{"name":"member","description":"The member of this presence","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":76,"file":"Presence.js","path":"src/structures"}},{"name":"status","description":"The status of this presence","type":[[["PresenceStatus"]]],"meta":{"line":85,"file":"Presence.js","path":"src/structures"}},{"name":"activity","description":"The activity of this presence","nullable":true,"type":[[["Activity"]]],"meta":{"line":92,"file":"Presence.js","path":"src/structures"}},{"name":"clientStatus","description":"The devices this presence is on","nullable":true,"type":[[["Object"]]],"props":[{"name":"web","description":"The current presence in the web application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"mobile","description":"The current presence in the mobile application","nullable":true,"type":[[["ClientPresenceStatus"]]]},{"name":"desktop","description":"The current presence in the desktop application","nullable":true,"type":[[["ClientPresenceStatus"]]]}],"meta":{"line":101,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this presence is equal to another.","params":[{"name":"presence","description":"The presence to compare with","type":[[["Presence"]]]}],"returns":[[["boolean"]]],"meta":{"line":117,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":39,"file":"Presence.js","path":"src/structures"}},{"name":"Activity","description":"Represents an activity that is part of a user's presence.","props":[{"name":"name","description":"The name of the activity being played","type":[[["string"]]],"meta":{"line":144,"file":"Presence.js","path":"src/structures"}},{"name":"type","description":"The type of the activity status","type":[[["ActivityType"]]],"meta":{"line":150,"file":"Presence.js","path":"src/structures"}},{"name":"url","description":"If the activity is being streamed, a link to the stream","nullable":true,"type":[[["string"]]],"meta":{"line":156,"file":"Presence.js","path":"src/structures"}},{"name":"details","description":"Details about the activity","nullable":true,"type":[[["string"]]],"meta":{"line":162,"file":"Presence.js","path":"src/structures"}},{"name":"state","description":"State of the activity","nullable":true,"type":[[["string"]]],"meta":{"line":168,"file":"Presence.js","path":"src/structures"}},{"name":"applicationID","description":"Application ID associated with this activity","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":174,"file":"Presence.js","path":"src/structures"}},{"name":"timestamps","description":"Timestamps for the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"start","description":"When the activity started","nullable":true,"type":[[["Date"]]]},{"name":"end","description":"When the activity will end","nullable":true,"type":[[["Date"]]]}],"meta":{"line":182,"file":"Presence.js","path":"src/structures"}},{"name":"party","description":"Party of the activity","nullable":true,"type":[[["Object"]]],"props":[{"name":"id","description":"ID of the party","nullable":true,"type":[[["string"]]]},{"name":"size","description":"Size of the party as `[current, max]`","type":[[["Array","<"],["number",">"]]]}],"meta":{"line":193,"file":"Presence.js","path":"src/structures"}},{"name":"assets","description":"Assets for rich presence","nullable":true,"type":[[["RichPresenceAssets"]]],"meta":{"line":199,"file":"Presence.js","path":"src/structures"}},{"name":"flags","description":"Flags that describe the activity","type":[[["Readonly","<"],["ActivityFlags",">"]]],"meta":{"line":207,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"equals","description":"Whether this activity is equal to another activity.","params":[{"name":"activity","description":"The activity to compare with","type":[[["Activity"]]]}],"returns":[[["boolean"]]],"meta":{"line":215,"file":"Presence.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the activities' name instead of the Activity object.","returns":[[["string"]]],"meta":{"line":228,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":137,"file":"Presence.js","path":"src/structures"}},{"name":"RichPresenceAssets","description":"Assets for a rich presence","props":[{"name":"largeText","description":"Hover text for the large image","nullable":true,"type":[[["string"]]],"meta":{"line":248,"file":"Presence.js","path":"src/structures"}},{"name":"smallText","description":"Hover text for the small image","nullable":true,"type":[[["string"]]],"meta":{"line":254,"file":"Presence.js","path":"src/structures"}},{"name":"largeImage","description":"ID of the large image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":260,"file":"Presence.js","path":"src/structures"}},{"name":"smallImage","description":"ID of the small image asset","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":266,"file":"Presence.js","path":"src/structures"}}],"methods":[{"name":"smallImageURL","description":"Gets the URL of the small image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The small image URL","nullable":true},"meta":{"line":276,"file":"Presence.js","path":"src/structures"}},{"name":"largeImageURL","description":"Gets the URL of the large image asset","params":[{"name":"options","description":"Options for the image url","optional":true,"type":[[["Object"]]]},{"name":"options.format","description":"Format of the image","optional":true,"type":[[["string"]]]},{"name":"options.size","description":"Size of the image","optional":true,"type":[[["number"]]]}],"returns":{"types":[[["string"]]],"description":"The large image URL","nullable":true},"meta":{"line":289,"file":"Presence.js","path":"src/structures"}}],"meta":{"line":241,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollector","description":"Collects reactions on messages.","extends":[[["Collector"]]],"construct":{"name":"ReactionCollector","params":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]]},{"name":"filter","description":"The filter to apply to this collector","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to apply to this collector","optional":true,"default":"{}","type":[[["ReactionCollectorOptions"]]]}]},"props":[{"name":"message","description":"The message upon which to collect reactions","type":[[["Message"]]],"meta":{"line":31,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"users","description":"The users which have reacted to this message","type":[[["Collection"]]],"meta":{"line":37,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"total","description":"The total number of reactions collected","type":[[["number"]]],"meta":{"line":43,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this Collector","readonly":true,"type":[[["Client"]]],"meta":{"line":31,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"filter","description":"The filter applied to this collector","type":[[["CollectorFilter"]]],"meta":{"line":43,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"options","description":"The options of this collector","type":[[["CollectorOptions"]]],"meta":{"line":49,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"collected","description":"The items collected by this collector","type":[[["Collection"]]],"meta":{"line":55,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"ended","description":"Whether this collector has finished collecting","type":[[["boolean"]]],"meta":{"line":61,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_timeout","description":"Timeout for cleanup","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":68,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"_idletimeout","description":"Timeout for cleanup due to inactivity","access":"private","nullable":true,"type":[[["Timeout"]]],"meta":{"line":75,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"next","description":"Returns a promise that resolves with the next collected element;\nrejects with collected elements if the collector finishes without receiving a next element","readonly":true,"type":[[["Promise"]]],"meta":{"line":137,"file":"Collector.js","path":"src/structures/interfaces"}}],"methods":[{"name":"collect","description":"Handles an incoming reaction for possible collection.","access":"private","params":[{"name":"reaction","description":"The reaction to possibly collect","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":76,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Handles a reaction deletion for possible disposal.","params":[{"name":"reaction","description":"The reaction to possibly dispose of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":93,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"empty","description":"Empties this reaction collector.","meta":{"line":120,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"handleCollect","description":"Call this to handle an event as a collectable element. Accepts any event data as parameters.","inherits":"Collector#handleCollect","inherited":true,"emits":["Collector#event:collect"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":89,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"handleDispose","description":"Call this to remove an element from the collection. Accepts any event data as parameters.","inherits":"Collector#handleDispose","inherited":true,"emits":["Collector#event:dispose"],"params":[{"name":"args","description":"The arguments emitted by the listener","variable":true,"type":[["*"]]}],"meta":{"line":115,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"stop","description":"Stops this collector and emits the `end` event.","inherits":"Collector#stop","inherited":true,"emits":["Collector#event:end"],"params":[{"name":"reason","description":"The reason this collector is ending","optional":true,"default":"'user'","type":[[["string"]]]}],"meta":{"line":169,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"checkEnd","description":"Checks whether the collector should end, and if so, ends it.","inherits":"Collector#checkEnd","inherited":true,"meta":{"line":194,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"endReason","description":"The reason this collector has ended or will end with.","inherits":"Collector#endReason","inherited":true,"abstract":false,"returns":{"types":[[["string"]]],"description":"Reason to end the collector, if any","nullable":true},"meta":{"line":260,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"key","description":"Gets the collector key for a reaction.","scope":"static","params":[{"name":"reaction","description":"The message reaction to get the key for","type":[[["MessageReaction"]]]}],"returns":[[["Snowflake"]],[["string"]]],"meta":{"line":139,"file":"ReactionCollector.js","path":"src/structures"}}],"events":[{"name":"collect","description":"Emitted whenever a reaction is collected.","params":[{"name":"reaction","description":"The reaction that was collected","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that added the reaction","type":[[["User"]]]}],"meta":{"line":77,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"dispose","description":"Emitted whenever a reaction is disposed of.","params":[{"name":"reaction","description":"The reaction that was disposed of","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":94,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"remove","description":"Emitted whenever a reaction is removed from a message. Will emit on all reaction removals,\nas opposed to {@link Collector#dispose} which will only be emitted when the entire reaction\nis removed.","params":[{"name":"reaction","description":"The reaction that was removed","type":[[["MessageReaction"]]]},{"name":"user","description":"The user that removed the reaction","type":[[["User"]]]}],"meta":{"line":102,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"end","description":"Emitted when the collector is finished collecting.","params":[{"name":"collected","description":"The elements collected by the collector","type":[[["Collection"]]]},{"name":"reason","description":"The reason the collector ended","type":[[["string"]]]}],"meta":{"line":182,"file":"Collector.js","path":"src/structures/interfaces"}}],"meta":{"line":24,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"ReactionEmoji","description":"Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\nwill use this class opposed to the Emoji class when the client doesn't know enough\ninformation about them.","extends":[[["Emoji"]]],"props":[{"name":"reaction","description":"The message reaction this emoji refers to","type":[[["MessageReaction"]]],"meta":{"line":19,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"animated","description":"Whether this emoji is animated","type":[[["boolean"]]],"meta":{"line":18,"file":"Emoji.js","path":"src/structures"}},{"name":"name","description":"The name of this emoji","type":[[["string"]]],"meta":{"line":24,"file":"Emoji.js","path":"src/structures"}},{"name":"id","description":"The ID of this emoji","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":30,"file":"Emoji.js","path":"src/structures"}},{"name":"deleted","description":"Whether this emoji has been deleted","type":[[["boolean"]]],"meta":{"line":36,"file":"Emoji.js","path":"src/structures"}},{"name":"identifier","description":"The identifier of this emoji, used for message reactions","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"Emoji.js","path":"src/structures"}},{"name":"url","description":"The URL to the emoji file if its a custom emoji","readonly":true,"nullable":true,"type":[[["string"]]],"meta":{"line":54,"file":"Emoji.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["number"]]],"meta":{"line":64,"file":"Emoji.js","path":"src/structures"}},{"name":"createdAt","description":"The time the emoji was created at, or null if unicode","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":74,"file":"Emoji.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\ninstead of the Emoji object.","inherits":"Emoji#toString","inherited":true,"examples":["// Send a custom emoji from a guild:\nconst emoji = guild.emojis.first();\nmsg.reply(`Hello! ${emoji}`);","// Send the emoji used in a reaction to the channel the reaction is part of\nreaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);"],"returns":[[["string"]]],"meta":{"line":91,"file":"Emoji.js","path":"src/structures"}}],"meta":{"line":13,"file":"ReactionEmoji.js","path":"src/structures"}},{"name":"Role","description":"Represents a role on Discord.","extends":[[["Base"]]],"construct":{"name":"Role","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the role","type":[[["Object"]]]},{"name":"guild","description":"The guild the role is part of","type":[[["Guild"]]]}]},"props":[{"name":"guild","description":"The guild that the role belongs to","type":[[["Guild"]]],"meta":{"line":26,"file":"Role.js","path":"src/structures"}},{"name":"id","description":"The ID of the role (unique to the guild it is part of)","type":[[["Snowflake"]]],"meta":{"line":36,"file":"Role.js","path":"src/structures"}},{"name":"name","description":"The name of the role","type":[[["string"]]],"meta":{"line":42,"file":"Role.js","path":"src/structures"}},{"name":"color","description":"The base 10 color of the role","type":[[["number"]]],"meta":{"line":48,"file":"Role.js","path":"src/structures"}},{"name":"hoist","description":"If true, users that are part of this role will appear in a separate category in the users list","type":[[["boolean"]]],"meta":{"line":54,"file":"Role.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the role from the API","type":[[["number"]]],"meta":{"line":60,"file":"Role.js","path":"src/structures"}},{"name":"permissions","description":"The permissions of the role","type":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":66,"file":"Role.js","path":"src/structures"}},{"name":"managed","description":"Whether or not the role is managed by an external service","type":[[["boolean"]]],"meta":{"line":72,"file":"Role.js","path":"src/structures"}},{"name":"mentionable","description":"Whether or not the role can be mentioned by anyone","type":[[["boolean"]]],"meta":{"line":78,"file":"Role.js","path":"src/structures"}},{"name":"deleted","description":"Whether the role has been deleted","type":[[["boolean"]]],"meta":{"line":84,"file":"Role.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the role was created at","readonly":true,"type":[[["number"]]],"meta":{"line":92,"file":"Role.js","path":"src/structures"}},{"name":"createdAt","description":"The time the role was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":101,"file":"Role.js","path":"src/structures"}},{"name":"hexColor","description":"The hexadecimal version of the role color, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":110,"file":"Role.js","path":"src/structures"}},{"name":"members","description":"The cached guild members that have this role","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":119,"file":"Role.js","path":"src/structures"}},{"name":"editable","description":"Whether the role is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":128,"file":"Role.js","path":"src/structures"}},{"name":"position","description":"The position of the role in the role manager","readonly":true,"type":[[["number"]]],"meta":{"line":140,"file":"Role.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"comparePositionTo","description":"Compares this role's position to another role's.","params":[{"name":"role","description":"Role to compare to this one","type":[[["RoleResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if this role's position is lower (other role's is higher),\npositive number if this one is higher (other's is lower), 0 if equal"},"meta":{"line":151,"file":"Role.js","path":"src/structures"}},{"name":"edit","description":"Edits the role.","examples":["// Edit a role\nrole.edit({ name: 'new role' })\n  .then(updated => console.log(`Edited role ${updated.name} name to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the role","type":[[["RoleData"]]]},{"name":"reason","description":"Reason for editing this role","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":179,"file":"Role.js","path":"src/structures"}},{"name":"permissionsIn","description":"Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\ntaking into account permission overwrites.","params":[{"name":"channel","description":"The guild channel to use as context","type":[[["ChannelResolvable"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":215,"file":"Role.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the role.","examples":["// Set the name of the role\nrole.setName('new role')\n  .then(updated => console.log(`Edited name of role ${role.name} to ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name of the role","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the role's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":232,"file":"Role.js","path":"src/structures"}},{"name":"setColor","description":"Sets a new color for the role.","examples":["// Set the color of a role\nrole.setColor('#FF0000')\n  .then(updated => console.log(`Set color of role to ${updated.color}`))\n  .catch(console.error);"],"params":[{"name":"color","description":"The color of the role","type":[[["ColorResolvable"]]]},{"name":"reason","description":"Reason for changing the role's color","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":247,"file":"Role.js","path":"src/structures"}},{"name":"setHoist","description":"Sets whether or not the role should be hoisted.","examples":["// Set the hoist of the role\nrole.setHoist(true)\n  .then(r => console.log(`Role hoisted: ${r.hoist}`))\n  .catch(console.error);"],"params":[{"name":"hoist","description":"Whether or not to hoist the role","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not the role should be hoisted","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":262,"file":"Role.js","path":"src/structures"}},{"name":"setPermissions","description":"Sets the permissions of the role.","examples":["// Set the permissions of the role\nrole.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);","// Remove all permissions from a role\nrole.setPermissions(0)\n  .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n  .catch(console.error);"],"params":[{"name":"permissions","description":"The permissions of the role","type":[[["PermissionResolvable"]]]},{"name":"reason","description":"Reason for changing the role's permissions","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":282,"file":"Role.js","path":"src/structures"}},{"name":"setMentionable","description":"Sets whether this role is mentionable.","examples":["// Make the role mentionable\nrole.setMentionable(true)\n  .then(updated => console.log(`Role updated ${updated.name}`))\n  .catch(console.error);"],"params":[{"name":"mentionable","description":"Whether this role should be mentionable","type":[[["boolean"]]]},{"name":"reason","description":"Reason for setting whether or not this role should be mentionable","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":297,"file":"Role.js","path":"src/structures"}},{"name":"setPosition","description":"Sets the position of the role.","examples":["// Set the position of the role\nrole.setPosition(1)\n  .then(updated => console.log(`Role position: ${updated.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The position of the role","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":314,"file":"Role.js","path":"src/structures"}},{"name":"delete","description":"Deletes the role.","examples":["// Delete a role\nrole.delete('The role needed to go')\n  .then(deleted => console.log(`Deleted role ${deleted.name}`))\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this role","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Role",">"]]],"meta":{"line":336,"file":"Role.js","path":"src/structures"}},{"name":"equals","description":"Whether this role equals another role. It compares all properties, so for most operations\nit is advisable to just compare `role.id === role2.id` as it is much faster and is often\nwhat most users need.","params":[{"name":"role","description":"Role to compare with","type":[[["Role"]]]}],"returns":[[["boolean"]]],"meta":{"line":351,"file":"Role.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the role's mention instead of the Role object.","examples":["// Logs: Role: <@&123456789012345678>\nconsole.log(`Role: ${role}`);"],"returns":[[["string"]]],"meta":{"line":369,"file":"Role.js","path":"src/structures"}},{"name":"comparePositions","description":"Compares the positions of two roles.","scope":"static","params":[{"name":"role1","description":"First role to compare","type":[[["Role"]]]},{"name":"role2","description":"Second role to compare","type":[[["Role"]]]}],"returns":{"types":[[["number"]]],"description":"Negative number if the first role's position is lower (second role's is higher),\npositive number if the first's is higher (second's is lower), 0 if equal"},"meta":{"line":385,"file":"Role.js","path":"src/structures"}}],"meta":{"line":19,"file":"Role.js","path":"src/structures"}},{"name":"StoreChannel","description":"Represents a guild store channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"StoreChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":38,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":44,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":56,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":69,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":78,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":94,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":520,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":529,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":540,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":104,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":144,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":170,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":202,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":220,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":243,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":259,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":308,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":354,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":389,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":406,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":434,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":446,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":496,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":557,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":9,"file":"StoreChannel.js","path":"src/structures"}},{"name":"Team","description":"Represents a Client OAuth2 Application Team.","extends":[[["Base"]]],"props":[{"name":"id","description":"The ID of the Team","type":[[["Snowflake"]]],"meta":{"line":23,"file":"Team.js","path":"src/structures"}},{"name":"name","description":"The name of the Team","type":[[["string"]]],"meta":{"line":29,"file":"Team.js","path":"src/structures"}},{"name":"icon","description":"The Team's icon hash","nullable":true,"type":[[["string"]]],"meta":{"line":35,"file":"Team.js","path":"src/structures"}},{"name":"ownerID","description":"The Team's owner id","nullable":true,"type":[[["string"]]],"meta":{"line":41,"file":"Team.js","path":"src/structures"}},{"name":"members","description":"The Team's members","type":[[["Collection","<"],["Snowflake",", "],["TeamMember",">"]]],"meta":{"line":47,"file":"Team.js","path":"src/structures"}},{"name":"owner","description":"The owner of this team","readonly":true,"nullable":true,"type":[[["TeamMember"]]],"meta":{"line":60,"file":"Team.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the team was created at","readonly":true,"type":[[["number"]]],"meta":{"line":69,"file":"Team.js","path":"src/structures"}},{"name":"createdAt","description":"The time the team was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":78,"file":"Team.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"iconURL","description":"A link to the teams's icon.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"description":"URL to the icon","nullable":true},"meta":{"line":87,"file":"Team.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the Team's name instead of the\nTeam object.","examples":["// Logs: Team name: My Team\nconsole.log(`Team name: ${team}`);"],"returns":[[["string"]]],"meta":{"line":100,"file":"Team.js","path":"src/structures"}}],"meta":{"line":13,"file":"Team.js","path":"src/structures"}},{"name":"TeamMember","description":"Represents a Client OAuth2 Application Team Member.","extends":[[["Base"]]],"props":[{"name":"team","description":"The Team this member is part of","type":[[["Team"]]],"meta":{"line":18,"file":"TeamMember.js","path":"src/structures"}},{"name":"permissions","description":"The permissions this Team Member has with regard to the team","type":[[["Array","<"],["string",">"]]],"meta":{"line":28,"file":"TeamMember.js","path":"src/structures"}},{"name":"membershipState","description":"The permissions this Team Member has with regard to the team","type":[[["MembershipStates"]]],"meta":{"line":34,"file":"TeamMember.js","path":"src/structures"}},{"name":"user","description":"The user for this Team Member","type":[[["User"]]],"meta":{"line":40,"file":"TeamMember.js","path":"src/structures"}},{"name":"id","description":"The ID of the Team Member","readonly":true,"type":[[["Snowflake"]]],"meta":{"line":48,"file":"TeamMember.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"toString","description":"When concatenated with a string, this automatically returns the team members's mention instead of the\nTeamMember object.","examples":["// Logs: Team Member's mention: <@123456789012345678>\nconsole.log(`Team Member's mention: ${teamMember}`);"],"returns":[[["string"]]],"meta":{"line":60,"file":"TeamMember.js","path":"src/structures"}}],"meta":{"line":11,"file":"TeamMember.js","path":"src/structures"}},{"name":"TextChannel","description":"Represents a guild text channel on Discord.","extends":[[["GuildChannel"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"TextChannel","params":[{"name":"guild","description":"The guild the text channel is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the text channel","type":[[["Object"]]]}]},"props":[{"name":"messages","description":"A collection containing the messages sent to this channel","type":[[["MessageStore","<"],["Snowflake",", "],["Message",">"]]],"meta":{"line":26,"file":"TextChannel.js","path":"src/structures"}},{"name":"topic","description":"The topic of the text channel","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"TextChannel.js","path":"src/structures"}},{"name":"nsfw","description":"If the guild considers this channel NSFW","readonly":true,"type":[[["boolean"]]],"meta":{"line":44,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent in this channel, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"TextChannel.js","path":"src/structures"}},{"name":"rateLimitPerUser","description":"The ratelimit per user for this channel in seconds","type":[[["number"]]],"meta":{"line":56,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastPinTimestamp","description":"The timestamp when the last pinned message was pinned, if there was one","nullable":true,"type":[[["number"]]],"meta":{"line":62,"file":"TextChannel.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message in the channel, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":39,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"lastPinAt","description":"The date when the last pinned message was pinned, if there was one","readonly":true,"nullable":true,"type":[[["Date"]]],"meta":{"line":48,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typing","description":"Whether or not the typing indicator is being shown in the channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":223,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"typingCount","description":"Number of times `startTyping` has been called","readonly":true,"type":[[["number"]]],"meta":{"line":232,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":38,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":44,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":56,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":69,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":78,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":94,"file":"GuildChannel.js","path":"src/structures"}},{"name":"members","description":"A collection of members that can see this channel, mapped by their ID","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":270,"file":"GuildChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":520,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":529,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":540,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setRateLimitPerUser","description":"Sets the rate limit per user for this channel.","params":[{"name":"rateLimitPerUser","description":"The new ratelimit in seconds","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's ratelimits","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":73,"file":"TextChannel.js","path":"src/structures"}},{"name":"setNSFW","description":"Sets whether this channel is flagged as NSFW.","params":[{"name":"nsfw","description":"Whether the channel should be considered NSFW","type":[[["boolean"]]]},{"name":"reason","description":"Reason for changing the channel's NSFW flag","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["TextChannel",">"]]],"meta":{"line":83,"file":"TextChannel.js","path":"src/structures"}},{"name":"fetchWebhooks","description":"Fetches all webhooks for the channel.","examples":["// Fetch webhooks\nchannel.fetchWebhooks()\n  .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n  .catch(console.error);"],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Webhook",">>"]]],"meta":{"line":96,"file":"TextChannel.js","path":"src/structures"}},{"name":"createWebhook","description":"Creates a webhook for the channel.","examples":["// Create a webhook for the current channel\nchannel.createWebhook('Snek', {\n  avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n  reason: 'Needed a cool new Webhook'\n})\n  .then(console.log)\n  .catch(console.error)"],"params":[{"name":"name","description":"The name of the webhook","type":[[["string"]]]},{"name":"options","description":"Options for creating the webhook","optional":true,"type":[[["Object"]]]},{"name":"options.avatar","description":"Avatar for the webhook","optional":true,"type":[[["BufferResolvable"]],[["Base64Resolvable"]]]},{"name":"options.reason","description":"Reason for creating the webhook","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Webhook",">"]]],"description":"webhook The created webhook"},"meta":{"line":120,"file":"TextChannel.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"startTyping","description":"Starts a typing indicator in the channel.","implements":["TextBasedChannel#startTyping"],"examples":["// Start typing in a channel, or increase the typing count by one\nchannel.startTyping();","// Start typing in a channel with a typing count of five, or set it to five\nchannel.startTyping(5);"],"params":[{"name":"count","description":"The number of times startTyping should be considered to have been called","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise"]]],"description":"Resolves once the bot stops typing gracefully, or rejects when an error occurs"},"meta":{"line":162,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"stopTyping","description":"Stops the typing indicator in the channel.\nThe indicator will only stop if this is called as many times as startTyping().\n<info>It can take a few seconds for the client user to stop typing.</info>","implements":["TextBasedChannel#stopTyping"],"examples":["// Reduce the typing count by one and stop typing if it reached 0\nchannel.stopTyping();","// Force typing to fully stop regardless of typing count\nchannel.stopTyping(true);"],"params":[{"name":"force","description":"Whether or not to reset the call count and force the indicator to stop","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":206,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"createMessageCollector","description":"Creates a Message Collector.","implements":["TextBasedChannel#createMessageCollector"],"examples":["// Create a message collector\nconst filter = m => m.content.includes('discord');\nconst collector = channel.createMessageCollector(filter, { time: 15000 });\ncollector.on('collect', m => console.log(`Collected ${m.content}`));\ncollector.on('end', collected => console.log(`Collected ${collected.size} items`));"],"params":[{"name":"filter","description":"The filter to create the collector with","type":[[["CollectorFilter"]]]},{"name":"options","description":"The options to pass to the collector","optional":true,"default":"{}","type":[[["MessageCollectorOptions"]]]}],"returns":[[["MessageCollector"]]],"meta":{"line":249,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"awaitMessages","description":"Similar to createMessageCollector but in promise form.\nResolves with a collection of messages that pass the specified filter.","implements":["TextBasedChannel#awaitMessages"],"examples":["// Await !vote messages\nconst filter = m => m.content.startsWith('!vote');\n// Errors: ['time'] treats ending because of the time limit as an error\nchannel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n  .then(collected => console.log(collected.size))\n  .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));"],"params":[{"name":"filter","description":"The filter function to use","type":[[["CollectorFilter"]]]},{"name":"options","description":"Optional options to pass to the internal collector","optional":true,"default":"{}","type":[[["AwaitMessagesOptions"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"meta":{"line":273,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"bulkDelete","description":"Bulk deletes given messages that are newer than two weeks.","implements":["TextBasedChannel#bulkDelete"],"examples":["// Bulk delete messages\nchannel.bulkDelete(5)\n  .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n  .catch(console.error);"],"params":[{"name":"messages","description":"Messages or number of messages to delete","type":[[["Collection","<"],["Snowflake",", "],["Message",">"]],[["Array","<"],["Message",">"]],[["Array","<"],["Snowflake",">"]],[["number"]]]},{"name":"filterOld","description":"Filter messages to remove those which are older than two weeks automatically","optional":true,"default":false,"type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Message",">>"]]],"description":"Deleted messages"},"meta":{"line":298,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":104,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":144,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":170,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":202,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":220,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":243,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":259,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":308,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":354,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":389,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":406,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":434,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":446,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":496,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":557,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":20,"file":"TextChannel.js","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","extends":[[["Base"]]],"implements":[[["TextBasedChannel"]]],"construct":{"name":"User","params":[{"name":"client","description":"The instantiating client","type":[[["Client"]]]},{"name":"data","description":"The data for the user","type":[[["Object"]]]}]},"props":[{"name":"id","description":"The ID of the user","type":[[["Snowflake"]]],"meta":{"line":26,"file":"User.js","path":"src/structures"}},{"name":"bot","description":"Whether or not the user is a bot","type":[[["boolean"]]],"meta":{"line":28,"file":"User.js","path":"src/structures"}},{"name":"username","description":"The username of the user","type":[[["string"]]],"meta":{"line":39,"file":"User.js","path":"src/structures"}},{"name":"discriminator","description":"A discriminator based on username for the user","type":[[["string"]]],"meta":{"line":46,"file":"User.js","path":"src/structures"}},{"name":"avatar","description":"The ID of the user's avatar","nullable":true,"type":[[["string"]]],"meta":{"line":53,"file":"User.js","path":"src/structures"}},{"name":"locale","description":"The locale of the user's client (ISO 639-1)","nullable":true,"type":[[["string"]]],"meta":{"line":62,"file":"User.js","path":"src/structures"}},{"name":"lastMessageID","description":"The ID of the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":73,"file":"User.js","path":"src/structures"}},{"name":"lastMessageChannelID","description":"The ID of the channel for the last message sent by the user, if one was sent","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":79,"file":"User.js","path":"src/structures"}},{"name":"partial","description":"Whether this User is a partial","readonly":true,"type":[[["boolean"]]],"meta":{"line":87,"file":"User.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the user was created at","readonly":true,"type":[[["number"]]],"meta":{"line":96,"file":"User.js","path":"src/structures"}},{"name":"createdAt","description":"The time the user was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":105,"file":"User.js","path":"src/structures"}},{"name":"lastMessage","description":"The Message object of the last message sent by the user, if one was sent","readonly":true,"nullable":true,"type":[[["Message"]]],"meta":{"line":114,"file":"User.js","path":"src/structures"}},{"name":"presence","description":"The presence of this user","readonly":true,"type":[[["Presence"]]],"meta":{"line":124,"file":"User.js","path":"src/structures"}},{"name":"defaultAvatarURL","description":"A link to the user's default avatar","readonly":true,"type":[[["string"]]],"meta":{"line":146,"file":"User.js","path":"src/structures"}},{"name":"tag","description":"The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user","readonly":true,"type":[[["string"]]],"meta":{"line":165,"file":"User.js","path":"src/structures"}},{"name":"dmChannel","description":"The DM between the client's user and this user","readonly":true,"nullable":true,"type":[[["DMChannel"]]],"meta":{"line":204,"file":"User.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"avatarURL","description":"A link to the user's avatar.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":136,"file":"User.js","path":"src/structures"}},{"name":"displayAvatarURL","description":"A link to the user's avatar if they have one.\nOtherwise a link to their default avatar will be returned.","params":[{"name":"options","description":"Options for the Image URL","optional":true,"default":"{}","type":[[["ImageURLOptions"]]]}],"returns":[[["string"]]],"meta":{"line":156,"file":"User.js","path":"src/structures"}},{"name":"typingIn","description":"Checks whether the user is typing in a channel.","params":[{"name":"channel","description":"The channel to check in","type":[[["ChannelResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":174,"file":"User.js","path":"src/structures"}},{"name":"typingSinceIn","description":"Gets the time that the user started typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":{"types":[[["Date"]]],"nullable":true},"meta":{"line":184,"file":"User.js","path":"src/structures"}},{"name":"typingDurationIn","description":"Gets the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.","params":[{"name":"channel","description":"The channel to get the time in","type":[[["ChannelResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":194,"file":"User.js","path":"src/structures"}},{"name":"createDM","description":"Creates a DM channel between the client and the user.","async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":212,"file":"User.js","path":"src/structures"}},{"name":"deleteDM","description":"Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.","async":true,"returns":[[["Promise","<"],["DMChannel",">"]]],"meta":{"line":225,"file":"User.js","path":"src/structures"}},{"name":"equals","description":"Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\nIt is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.","params":[{"name":"user","description":"User to compare with","type":[[["User"]]]}],"returns":[[["boolean"]]],"meta":{"line":238,"file":"User.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this user.","returns":[[["Promise","<"],["User",">"]]],"meta":{"line":252,"file":"User.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the user's mention instead of the User object.","examples":["// Logs: Hello from <@123456789012345678>!\nconsole.log(`Hello from ${user}!`);"],"returns":[[["string"]]],"meta":{"line":263,"file":"User.js","path":"src/structures"}},{"name":"send","description":"Sends a message to this channel.","implements":["TextBasedChannel#send"],"examples":["// Send a basic message\nchannel.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nchannel.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nchannel.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nchannel.send('This is an embed', {\n  embed: {\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   },\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["MessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":127,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}}],"meta":{"line":19,"file":"User.js","path":"src/structures"}},{"name":"VoiceChannel","description":"Represents a guild voice channel on Discord.","extends":[[["GuildChannel"]]],"props":[{"name":"bitrate","description":"The bitrate of this voice channel","type":[[["number"]]],"meta":{"line":20,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"userLimit","description":"The maximum amount of users allowed in this channel - 0 means unlimited.","type":[[["number"]]],"meta":{"line":26,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"members","description":"The members in this voice channel","readonly":true,"type":[[["Collection","<"],["Snowflake",", "],["GuildMember",">"]]],"meta":{"line":29,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"full","description":"Checks if the voice channel is full","readonly":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"deletable","description":"Whether the channel is deletable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":59,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"editable","description":"Whether the channel is editable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":68,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"joinable","description":"Whether the channel is joinable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":77,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"speakable","description":"Checks if the client has permission to send audio to the voice channel","readonly":true,"type":[[["boolean"]]],"meta":{"line":90,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"guild","description":"The guild the channel is in","type":[[["Guild"]]],"meta":{"line":28,"file":"GuildChannel.js","path":"src/structures"}},{"name":"name","description":"The name of the guild channel","type":[[["string"]]],"meta":{"line":38,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rawPosition","description":"The raw position of the channel from discord","type":[[["number"]]],"meta":{"line":44,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parentID","description":"The ID of the category parent of this channel","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":50,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionOverwrites","description":"A map of permission overwrites in this channel for roles and users","type":[[["Collection","<"],["Snowflake",", "],["PermissionOverwrites",">"]]],"meta":{"line":56,"file":"GuildChannel.js","path":"src/structures"}},{"name":"parent","description":"The category parent of this channel","readonly":true,"nullable":true,"type":[[["CategoryChannel"]]],"meta":{"line":69,"file":"GuildChannel.js","path":"src/structures"}},{"name":"permissionsLocked","description":"If the permissionOverwrites match the parent channel, null if no parent","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":78,"file":"GuildChannel.js","path":"src/structures"}},{"name":"position","description":"The position of the channel","readonly":true,"type":[[["number"]]],"meta":{"line":94,"file":"GuildChannel.js","path":"src/structures"}},{"name":"manageable","description":"Whether the channel is manageable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":529,"file":"GuildChannel.js","path":"src/structures"}},{"name":"viewable","description":"Whether the channel is viewable by the client user","readonly":true,"type":[[["boolean"]]],"meta":{"line":540,"file":"GuildChannel.js","path":"src/structures"}},{"name":"type","description":"The type of the channel, either:\n* `dm` - a DM channel\n* `text` - a guild text channel\n* `voice` - a guild voice channel\n* `category` - a guild category channel\n* `unknown` - a generic channel of unknown type, could be Channel or GuildChannel","type":[[["string"]]],"meta":{"line":25,"file":"Channel.js","path":"src/structures"}},{"name":"deleted","description":"Whether the channel has been deleted","type":[[["boolean"]]],"meta":{"line":31,"file":"Channel.js","path":"src/structures"}},{"name":"id","description":"The unique ID of the channel","type":[[["Snowflake"]]],"meta":{"line":41,"file":"Channel.js","path":"src/structures"}},{"name":"createdTimestamp","description":"The timestamp the channel was created at","readonly":true,"type":[[["number"]]],"meta":{"line":49,"file":"Channel.js","path":"src/structures"}},{"name":"createdAt","description":"The time the channel was created at","readonly":true,"type":[[["Date"]]],"meta":{"line":58,"file":"Channel.js","path":"src/structures"}},{"name":"client","description":"The client that instantiated this","readonly":true,"type":[[["Client"]]],"meta":{"line":10,"file":"Base.js","path":"src/structures"}}],"methods":[{"name":"setBitrate","description":"Sets the bitrate of the channel.","examples":["// Set the bitrate of a voice channel\nvoiceChannel.setBitrate(48000)\n  .then(vc => console.log(`Set bitrate to ${vc.bitrate}bps for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"bitrate","description":"The new bitrate","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the channel's bitrate","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":105,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"setUserLimit","description":"Sets the user limit of the channel.","examples":["// Set the user limit of a voice channel\nvoiceChannel.setUserLimit(42)\n  .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n  .catch(console.error);"],"params":[{"name":"userLimit","description":"The new user limit","type":[[["number"]]]},{"name":"reason","description":"Reason for changing the user limit","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["VoiceChannel",">"]]],"meta":{"line":120,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"join","description":"Attempts to join this voice channel.","examples":["// Join a voice channel\nvoiceChannel.join()\n  .then(connection => console.log('Connected!'))\n  .catch(console.error);"],"returns":[[["Promise","<"],["VoiceConnection",">"]]],"meta":{"line":133,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"leave","description":"Leaves this voice channel.","examples":["// Leave a voice channel\nvoiceChannel.leave();"],"meta":{"line":144,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"permissionsFor","description":"Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.","inherits":"GuildChannel#permissionsFor","inherited":true,"params":[{"name":"memberOrRole","description":"The member or role to obtain the overall permissions for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]}],"returns":{"types":[[["Readonly","<"],["Permissions",">"]]],"nullable":true},"meta":{"line":104,"file":"GuildChannel.js","path":"src/structures"}},{"name":"memberPermissions","description":"Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#memberPermissions","inherited":true,"params":[{"name":"member","description":"The member to obtain the overall permissions for","type":[[["GuildMember"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":144,"file":"GuildChannel.js","path":"src/structures"}},{"name":"rolePermissions","description":"Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.","access":"private","inherits":"GuildChannel#rolePermissions","inherited":true,"params":[{"name":"role","description":"The role to obtain the overall permissions for","type":[[["Role"]]]}],"returns":[[["Readonly","<"],["Permissions",">"]]],"meta":{"line":170,"file":"GuildChannel.js","path":"src/structures"}},{"name":"overwritePermissions","description":"Replaces the permission overwrites in this channel.","inherits":"GuildChannel#overwritePermissions","inherited":true,"examples":["channel.overwritePermissions({\npermissionOverwrites: [\n  {\n     id: message.author.id,\n     deny: ['VIEW_CHANNEL'],\n  },\n],\n  reason: 'Needed to change permissions'\n});"],"params":[{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites the channel gets updated with","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.reason","description":"Reason for updating the channel overwrites","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":202,"file":"GuildChannel.js","path":"src/structures"}},{"name":"updateOverwrite","description":"Updates Overwrites for a user or role in this channel. (creates if non-existent)","inherits":"GuildChannel#updateOverwrite","inherited":true,"examples":["// Update or Create permission overwrites for a message author\nmessage.channel.updateOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":220,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createOverwrite","description":"Overwrites the permissions for a user or role in this channel. (replaces if existent)","inherits":"GuildChannel#createOverwrite","inherited":true,"examples":["// Create or Replace permissions overwrites for a message author\nmessage.channel.createOverwrite(message.author, {\n  SEND_MESSAGES: false\n})\n  .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n  .catch(console.error);"],"params":[{"name":"userOrRole","description":"The user or role to update","type":[[["RoleResolvable"]],[["UserResolvable"]]]},{"name":"options","description":"The options for the update","type":[[["PermissionOverwriteOption"]]]},{"name":"reason","description":"Reason for creating/editing this overwrite","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":243,"file":"GuildChannel.js","path":"src/structures"}},{"name":"lockPermissions","description":"Locks in the permission overwrites from the parent channel.","inherits":"GuildChannel#lockPermissions","inherited":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":259,"file":"GuildChannel.js","path":"src/structures"}},{"name":"edit","description":"Edits the channel.","inherits":"GuildChannel#edit","inherited":true,"examples":["// Edit a channel\nchannel.edit({ name: 'new-channel' })\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"data","description":"The new data for the channel","type":[[["ChannelData"]]]},{"name":"reason","description":"Reason for editing this channel","optional":true,"type":[[["string"]]]}],"async":true,"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":308,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setName","description":"Sets a new name for the guild channel.","inherits":"GuildChannel#setName","inherited":true,"examples":["// Set a new channel name\nchannel.setName('not_general')\n  .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n  .catch(console.error);"],"params":[{"name":"name","description":"The new name for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's name","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":354,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setParent","description":"Sets the category parent of this channel.","inherits":"GuildChannel#setParent","inherited":true,"examples":["// Add a parent to a channel\nmessage.channel.setParent('355908108431917066', { lockPermissions: false })\n  .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n  .catch(console.error);"],"params":[{"name":"channel","description":"Parent channel","type":[[["CategoryChannel"]],[["Snowflake"]]]},{"name":"options","description":"Options to pass","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.lockPermissions","description":"Lock the permissions to what the parent's permissions are","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for modifying the parent of this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":371,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setTopic","description":"Sets a new topic for the guild channel.","inherits":"GuildChannel#setTopic","inherited":true,"examples":["// Set a new channel topic\nchannel.setTopic('needs more rate limiting')\n  .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n  .catch(console.error);"],"params":[{"name":"topic","description":"The new topic for the guild channel","type":[[["string"]]]},{"name":"reason","description":"Reason for changing the guild channel's topic","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":389,"file":"GuildChannel.js","path":"src/structures"}},{"name":"setPosition","description":"Sets a new position for the guild channel.","inherits":"GuildChannel#setPosition","inherited":true,"examples":["// Set a new channel position\nchannel.setPosition(2)\n  .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n  .catch(console.error);"],"params":[{"name":"position","description":"The new position for the guild channel","type":[[["number"]]]},{"name":"options","description":"Options for setting position","optional":true,"type":[[["Object"]]]},{"name":"options.relative","description":"Change the position relative to its current value","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for changing the position","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":406,"file":"GuildChannel.js","path":"src/structures"}},{"name":"createInvite","description":"Creates an invite to this guild channel.","inherits":"GuildChannel#createInvite","inherited":true,"examples":["// Create an invite to a channel\nchannel.createInvite()\n  .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n  .catch(console.error);"],"params":[{"name":"options","description":"Options for the invite","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.temporary","description":"Whether members that joined via the invite should be automatically\nkicked after 24 hours if they have not yet received a role","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.maxAge","description":"How long the invite should last (in seconds, 0 for forever)","optional":true,"default":86400,"type":[[["number"]]]},{"name":"options.maxUses","description":"Maximum number of uses","optional":true,"default":0,"type":[[["number"]]]},{"name":"options.unique","description":"Create a unique invite, or use an existing one with similar settings","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"options.reason","description":"Reason for creating this","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Invite",">"]]],"meta":{"line":434,"file":"GuildChannel.js","path":"src/structures"}},{"name":"fetchInvites","description":"Fetches a collection of invites to this guild channel.\nResolves with a collection mapping invites by their codes.","inherits":"GuildChannel#fetchInvites","inherited":true,"async":true,"returns":[[["Promise","<"],["Collection","<"],["string",", "],["Invite",">>"]]],"meta":{"line":446,"file":"GuildChannel.js","path":"src/structures"}},{"name":"clone","description":"Clones this channel.","inherits":"GuildChannel#clone","inherited":true,"params":[{"name":"options","description":"The options","optional":true,"type":[[["Object"]]]},{"name":"options.name","description":"Name of the new channel","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.permissionOverwrites","description":"Permission overwrites of the new channel","optional":true,"default":"this.permissionOverwrites","type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"options.type","description":"Type of the new channel","optional":true,"default":"this.type","type":[[["string"]]]},{"name":"options.topic","description":"Topic of the new channel (only text)","optional":true,"default":"this.topic","type":[[["string"]]]},{"name":"options.nsfw","description":"Whether the new channel is nsfw (only text)","optional":true,"default":"this.nsfw","type":[[["boolean"]]]},{"name":"options.bitrate","description":"Bitrate of the new channel in bits (only voice)","optional":true,"default":"this.bitrate","type":[[["number"]]]},{"name":"options.userLimit","description":"Maximum amount of users allowed in the new channel (only voice)","optional":true,"default":"this.userLimit","type":[[["number"]]]},{"name":"options.rateLimitPerUser","description":"Ratelimit per user for the new channel (only text)","optional":true,"default":"ThisType.rateLimitPerUser","type":[[["number"]]]},{"name":"options.parent","description":"Parent of the new channel","optional":true,"default":"this.parent","type":[[["ChannelResolvable"]]]},{"name":"options.reason","description":"Reason for cloning this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":473,"file":"GuildChannel.js","path":"src/structures"}},{"name":"equals","description":"Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\nIn most cases, a simple `channel.id === channel2.id` will do, and is much faster too.","inherits":"GuildChannel#equals","inherited":true,"params":[{"name":"channel","description":"Channel to compare with","type":[[["GuildChannel"]]]}],"returns":[[["boolean"]]],"meta":{"line":496,"file":"GuildChannel.js","path":"src/structures"}},{"name":"delete","description":"Deletes this channel.","inherits":"GuildChannel#delete","inherited":true,"examples":["// Delete the channel\nchannel.delete('making room for new channels')\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"reason","description":"Reason for deleting this channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildChannel",">"]]],"meta":{"line":557,"file":"GuildChannel.js","path":"src/structures"}},{"name":"toString","description":"When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.","inherits":"Channel#toString","inherited":true,"examples":["// Logs: Hello from <#123456789012345678>!\nconsole.log(`Hello from ${channel}!`);"],"returns":[[["string"]]],"meta":{"line":69,"file":"Channel.js","path":"src/structures"}},{"name":"fetch","description":"Fetches this channel.","inherits":"Channel#fetch","inherited":true,"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":90,"file":"Channel.js","path":"src/structures"}}],"meta":{"line":13,"file":"VoiceChannel.js","path":"src/structures"}},{"name":"VoiceRegion","description":"Represents a Discord voice region for guilds.","props":[{"name":"id","description":"The ID of the region","type":[[["string"]]],"meta":{"line":14,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"name","description":"Name of the region","type":[[["string"]]],"meta":{"line":20,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"vip","description":"Whether the region is VIP-only","type":[[["boolean"]]],"meta":{"line":26,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"deprecated","description":"Whether the region is deprecated","type":[[["boolean"]]],"meta":{"line":32,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"optimal","description":"Whether the region is optimal","type":[[["boolean"]]],"meta":{"line":38,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"custom","description":"Whether the region is custom","type":[[["boolean"]]],"meta":{"line":44,"file":"VoiceRegion.js","path":"src/structures"}}],"meta":{"line":9,"file":"VoiceRegion.js","path":"src/structures"}},{"name":"VoiceState","description":"Represents the voice state for a Guild Member.","construct":{"name":"VoiceState","params":[{"name":"guild","description":"The guild the voice state is part of","type":[[["Guild"]]]},{"name":"data","description":"The data for the voice state","type":[[["Object"]]]}]},"props":[{"name":"guild","description":"The guild of this voice state","type":[[["Guild"]]],"meta":{"line":21,"file":"VoiceState.js","path":"src/structures"}},{"name":"id","description":"The ID of the member of this voice state","type":[[["Snowflake"]]],"meta":{"line":26,"file":"VoiceState.js","path":"src/structures"}},{"name":"serverDeaf","description":"Whether this member is deafened server-wide","nullable":true,"type":[[["boolean"]]],"meta":{"line":35,"file":"VoiceState.js","path":"src/structures"}},{"name":"serverMute","description":"Whether this member is muted server-wide","nullable":true,"type":[[["boolean"]]],"meta":{"line":40,"file":"VoiceState.js","path":"src/structures"}},{"name":"selfDeaf","description":"Whether this member is self-deafened","nullable":true,"type":[[["boolean"]]],"meta":{"line":45,"file":"VoiceState.js","path":"src/structures"}},{"name":"selfMute","description":"Whether this member is self-muted","nullable":true,"type":[[["boolean"]]],"meta":{"line":50,"file":"VoiceState.js","path":"src/structures"}},{"name":"sessionID","description":"The session ID of this member's connection","nullable":true,"type":[[["string"]]],"meta":{"line":55,"file":"VoiceState.js","path":"src/structures"}},{"name":"streaming","description":"Whether this member is streaming using \"Go Live\"","type":[[["boolean"]]],"meta":{"line":60,"file":"VoiceState.js","path":"src/structures"}},{"name":"channelID","description":"The ID of the voice channel that this member is in","nullable":true,"type":[[["Snowflake"]]],"meta":{"line":65,"file":"VoiceState.js","path":"src/structures"}},{"name":"member","description":"The member that this voice state belongs to","readonly":true,"nullable":true,"type":[[["GuildMember"]]],"meta":{"line":74,"file":"VoiceState.js","path":"src/structures"}},{"name":"channel","description":"The channel that the member is connected to","readonly":true,"nullable":true,"type":[[["VoiceChannel"]]],"meta":{"line":83,"file":"VoiceState.js","path":"src/structures"}},{"name":"connection","description":"If this is a voice state of the client user, then this will refer to the active VoiceConnection for this guild","readonly":true,"nullable":true,"type":[[["VoiceConnection"]]],"meta":{"line":92,"file":"VoiceState.js","path":"src/structures"}},{"name":"deaf","description":"Whether this member is either self-deafened or server-deafened","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":102,"file":"VoiceState.js","path":"src/structures"}},{"name":"mute","description":"Whether this member is either self-muted or server-muted","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":111,"file":"VoiceState.js","path":"src/structures"}},{"name":"speaking","description":"Whether this member is currently speaking. A boolean if the information is available (aka\nthe bot is connected to any voice channel in the guild), otherwise this is null","readonly":true,"nullable":true,"type":[[["boolean"]]],"meta":{"line":121,"file":"VoiceState.js","path":"src/structures"}}],"methods":[{"name":"setMute","description":"Mutes/unmutes the member of this voice state.","params":[{"name":"mute","description":"Whether or not the member should be muted","type":[[["boolean"]]]},{"name":"reason","description":"Reason for muting or unmuting","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":133,"file":"VoiceState.js","path":"src/structures"}},{"name":"setDeaf","description":"Deafens/undeafens the member of this voice state.","params":[{"name":"deaf","description":"Whether or not the member should be deafened","type":[[["boolean"]]]},{"name":"reason","description":"Reason for deafening or undeafening","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":143,"file":"VoiceState.js","path":"src/structures"}},{"name":"kick","description":"Kicks the member from the voice channel.","params":[{"name":"reason","description":"Reason for kicking member from the channel","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":152,"file":"VoiceState.js","path":"src/structures"}},{"name":"setChannel","description":"Moves the member to a different channel, or kick them from the one they're in.","params":[{"name":"channel","description":"Channel to move the member to, or `null` if you want to kick them from\nvoice","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]},{"name":"reason","description":"Reason for moving member to another channel or kicking","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildMember",">"]]],"meta":{"line":163,"file":"VoiceState.js","path":"src/structures"}},{"name":"setSelfMute","description":"Self-mutes/unmutes the bot for this voice state.","params":[{"name":"mute","description":"Whether or not the bot should be self-muted","type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"true if the voice state was successfully updated, otherwise false"},"meta":{"line":174,"file":"VoiceState.js","path":"src/structures"}},{"name":"setSelfDeaf","description":"Self-deafens/undeafens the bot for this voice state.","params":[{"name":"deaf","description":"Whether or not the bot should be self-deafened","type":[[["boolean"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"true if the voice state was successfully updated, otherwise false"},"meta":{"line":188,"file":"VoiceState.js","path":"src/structures"}}],"meta":{"line":15,"file":"VoiceState.js","path":"src/structures"}},{"name":"Webhook","description":"Represents a webhook.","props":[{"name":"client","description":"The client that instantiated the webhook","readonly":true,"type":[[["Client"]]],"meta":{"line":12,"file":"Webhook.js","path":"src/structures"}},{"name":"name","description":"The name of the webhook","type":[[["string"]]],"meta":{"line":27,"file":"Webhook.js","path":"src/structures"}},{"name":"token","description":"The token for the webhook","type":[[["string"]]],"meta":{"line":29,"file":"Webhook.js","path":"src/structures"}},{"name":"avatar","description":"The avatar for the webhook","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"Webhook.js","path":"src/structures"}},{"name":"id","description":"The ID of the webhook","type":[[["Snowflake"]]],"meta":{"line":46,"file":"Webhook.js","path":"src/structures"}},{"name":"guildID","description":"The guild the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":52,"file":"Webhook.js","path":"src/structures"}},{"name":"channelID","description":"The channel the webhook belongs to","type":[[["Snowflake"]]],"meta":{"line":58,"file":"Webhook.js","path":"src/structures"}},{"name":"owner","description":"The owner of the webhook","type":[[["User"]],[["Object"]]],"meta":{"line":65,"file":"Webhook.js","path":"src/structures"}},{"name":"url","description":"The url of this webhook","readonly":true,"type":[[["string"]]],"meta":{"line":219,"file":"Webhook.js","path":"src/structures"}}],"methods":[{"name":"send","description":"Sends a message with this webhook.","examples":["// Send a basic message\nwebhook.send('hello!')\n  .then(message => console.log(`Sent message: ${message.content}`))\n  .catch(console.error);","// Send a remote file\nwebhook.send({\n  files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n})\n  .then(console.log)\n  .catch(console.error);","// Send a local file\nwebhook.send({\n  files: [{\n    attachment: 'entire/path/to/file.jpg',\n    name: 'file.jpg'\n  }]\n})\n  .then(console.log)\n  .catch(console.error);","// Send an embed with a local image inside\nwebhook.send('This is an embed', {\n  embeds: [{\n    thumbnail: {\n         url: 'attachment://file.jpg'\n      }\n   }],\n   files: [{\n      attachment: 'entire/path/to/file.jpg',\n      name: 'file.jpg'\n   }]\n})\n  .then(console.log)\n  .catch(console.error);"],"params":[{"name":"content","description":"The content to send","optional":true,"default":"''","type":[[["StringResolvable"]],[["APIMessage"]]]},{"name":"options","description":"The options to provide","optional":true,"default":"{}","type":[[["WebhookMessageOptions"]],[["MessageAdditions"]]]}],"async":true,"returns":[[["Promise","<("],["Message","|"],["Object",")>"]]],"meta":{"line":131,"file":"Webhook.js","path":"src/structures"}},{"name":"sendSlackMessage","description":"Sends a raw slack message with this webhook.","examples":["// Send a slack message\nwebhook.sendSlackMessage({\n  'username': 'Wumpus',\n  'attachments': [{\n    'pretext': 'this looks pretty cool',\n    'color': '#F0F',\n    'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n    'footer': 'Powered by sneks',\n    'ts': Date.now() / 1000\n  }]\n}).catch(console.error);"],"params":[{"name":"body","description":"The raw body to send","type":[[["Object"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"meta":{"line":172,"file":"Webhook.js","path":"src/structures"}},{"name":"edit","description":"Edits the webhook.","params":[{"name":"options","description":"Options","type":[[["Object"]]]},{"name":"options.name","description":"New name for this webhook","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"options.avatar","description":"New avatar for this webhook","optional":true,"type":[[["BufferResolvable"]]]},{"name":"options.channel","description":"New channel for this webhook","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"reason","description":"Reason for editing this webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise","<"],["Webhook",">"]]],"meta":{"line":189,"file":"Webhook.js","path":"src/structures"}},{"name":"delete","description":"Deletes the webhook.","params":[{"name":"reason","description":"Reason for deleting this webhook","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":210,"file":"Webhook.js","path":"src/structures"}}],"meta":{"line":11,"file":"Webhook.js","path":"src/structures"}},{"name":"ActivityFlags","description":"Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric activity flags. All available properties:\n* `INSTANCE`\n* `JOIN`\n* `SPECTATE`\n* `JOIN_REQUEST`\n* `SYNC`\n* `PLAY`","see":["{@link https://discordapp.com/developers/docs/topics/gateway#activity-object-activity-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":22,"file":"ActivityFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":9,"file":"ActivityFlags.js","path":"src/util"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"BitField","params":[{"name":"bits","description":"Bits(s) to read from","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}]},"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric bitfield flags.\n<info>Defined in extension classes</info>","scope":"static","abstract":true,"type":[[["Object"]]],"meta":{"line":160,"file":"BitField.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"bit(s) to resolve","optional":true,"default":0,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"]]],"meta":{"line":145,"file":"BitField.js","path":"src/util"}}],"meta":{"line":12,"file":"BitField.js","path":"src/util"}},{"name":"Collection","description":"A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\nan ID, for significantly improved performance and ease-of-use.","extends":[[["BaseCollection"]]],"meta":{"line":11,"file":"Collection.js","path":"src/util"}},{"name":"DataResolver","description":"The DataResolver identifies different objects and tries to resolve a specific piece of information from them.","access":"private","methods":[{"name":"resolveInviteCode","description":"Resolves InviteResolvable to an invite code.","scope":"static","params":[{"name":"data","description":"The invite resolvable to resolve","type":[[["InviteResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":31,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveImage","description":"Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.","scope":"static","params":[{"name":"image","description":"The image to be resolved","type":[[["BufferResolvable"]],[["Base64Resolvable"]]]}],"async":true,"returns":[[["Promise","<?"],["string",">"]]],"meta":{"line":43,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveBase64","description":"Resolves a Base64Resolvable to a Base 64 image.","scope":"static","params":[{"name":"data","description":"The base 64 resolvable you want to resolve","type":[[["Base64Resolvable"]]]}],"returns":{"types":[[["string"]]],"nullable":true},"meta":{"line":64,"file":"DataResolver.js","path":"src/util"}},{"name":"resolveFile","description":"Resolves a BufferResolvable to a Buffer.","scope":"static","params":[{"name":"resource","description":"The buffer or stream resolvable to resolve","type":[[["BufferResolvable"]],[["Stream"]]]}],"returns":[[["Promise","<"],["Buffer",">"]]],"meta":{"line":87,"file":"DataResolver.js","path":"src/util"}}],"meta":{"line":15,"file":"DataResolver.js","path":"src/util"}},{"name":"MessageFlags","description":"Data structure that makes it easy to interact with an {@link Message#flags} bitfield.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric message flags. All available properties:\n* `CROSSPOSTED`\n* `IS_CROSSPOST`\n* `SUPPRESS_EMBEDS`","see":["{@link https://discordapp.com/developers/docs/resources/channel#message-object-message-flags}"],"scope":"static","type":[[["Object"]]],"meta":{"line":19,"file":"MessageFlags.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":9,"file":"MessageFlags.js","path":"src/util"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\npermissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\nthat override their default permissions.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric permission flags. All available properties:\n* `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n* `CREATE_INSTANT_INVITE` (create invitations to the guild)\n* `KICK_MEMBERS`\n* `BAN_MEMBERS`\n* `MANAGE_CHANNELS` (edit and reorder channels)\n* `MANAGE_GUILD` (edit the guild information, region, etc.)\n* `ADD_REACTIONS` (add new reactions to messages)\n* `VIEW_AUDIT_LOG`\n* `PRIORITY_SPEAKER`\n* `STREAM`\n* `VIEW_CHANNEL`\n* `SEND_MESSAGES`\n* `SEND_TTS_MESSAGES`\n* `MANAGE_MESSAGES` (delete messages and reactions)\n* `EMBED_LINKS` (links posted will have a preview embedded)\n* `ATTACH_FILES`\n* `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n* `MENTION_EVERYONE`\n* `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n* `CONNECT` (connect to a voice channel)\n* `SPEAK` (speak in a voice channel)\n* `MUTE_MEMBERS` (mute members across all voice channels)\n* `DEAFEN_MEMBERS` (deafen members across all voice channels)\n* `MOVE_MEMBERS` (move members between voice channels)\n* `USE_VAD` (use voice activity detection)\n* `CHANGE_NICKNAME`\n* `MANAGE_NICKNAMES` (change other members' nicknames)\n* `MANAGE_ROLES`\n* `MANAGE_WEBHOOKS`\n* `MANAGE_EMOJIS`","see":["{@link https://discordapp.com/developers/docs/topics/permissions}"],"scope":"static","type":[[["Object"]]],"meta":{"line":77,"file":"Permissions.js","path":"src/util"}},{"name":"ALL","description":"Bitfield representing every permission combined","scope":"static","type":[[["number"]]],"meta":{"line":116,"file":"Permissions.js","path":"src/util"}},{"name":"DEFAULT","description":"Bitfield representing the default permissions for users","scope":"static","type":[[["number"]]],"meta":{"line":122,"file":"Permissions.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a permission, or any of multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":27,"file":"Permissions.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a permission, or multiple permissions.","params":[{"name":"permission","description":"Permission(s) to check for","type":[[["PermissionResolvable"]]]},{"name":"checkAdmin","description":"Whether to allow the administrator permission to override","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":37,"file":"Permissions.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":11,"file":"Permissions.js","path":"src/util"}},{"name":"SnowflakeUtil","description":"A container for useful snowflake-related methods.","methods":[{"name":"generate","description":"Generates a Discord snowflake.\n<info>This hardcodes the worker ID as 1 and the process ID as 0.</info>","scope":"static","params":[{"name":"timestamp","description":"Timestamp or date of the snowflake to generate","optional":true,"default":"Date.now()","type":[[["number"]],[["Date"]]]}],"returns":{"types":[[["Snowflake"]]],"description":"The generated snowflake"},"meta":{"line":35,"file":"Snowflake.js","path":"src/util"}},{"name":"deconstruct","description":"Deconstructs a Discord snowflake.","scope":"static","params":[{"name":"snowflake","description":"Snowflake to deconstruct","type":[[["Snowflake"]]]}],"returns":{"types":[[["DeconstructedSnowflake"]]],"description":"Deconstructed snowflake"},"meta":{"line":64,"file":"Snowflake.js","path":"src/util"}}],"meta":{"line":13,"file":"Snowflake.js","path":"src/util"}},{"name":"Speaking","description":"Data structure that makes it easy to interact with a {@link VoiceConnection#speaking}\nand {@link guildMemberSpeaking} event bitfields.","extends":[[["BitField"]]],"props":[{"name":"bitfield","description":"Bitfield of the packed bits","type":[[["number"]]],"meta":{"line":17,"file":"BitField.js","path":"src/util"}},{"name":"FLAGS","description":"Numeric speaking flags. All available properties:\n* `SPEAKING`\n* `SOUNDSHARE`","see":["{@link https://discordapp.com/developers/docs/topics/voice-connections#speaking}"],"scope":"static","type":[[["Object"]]],"meta":{"line":19,"file":"Speaking.js","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","inherits":"BitField#any","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":25,"file":"BitField.js","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another","inherits":"BitField#equals","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":34,"file":"BitField.js","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","inherits":"BitField#has","inherited":true,"params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":43,"file":"BitField.js","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","inherits":"BitField#missing","inherited":true,"params":[{"name":"bits","description":"Bits(s) to check for","type":[[["BitFieldResolvable"]]]},{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":55,"file":"BitField.js","path":"src/util"}},{"name":"freeze","description":"Freezes these bits, making them immutable.","inherits":"BitField#freeze","inherited":true,"returns":{"types":[[["Readonly","<"],["BitField",">"]]],"description":"These bits"},"meta":{"line":64,"file":"BitField.js","path":"src/util"}},{"name":"add","description":"Adds bits to these ones.","inherits":"BitField#add","inherited":true,"params":[{"name":"bits","description":"Bits to add","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":73,"file":"BitField.js","path":"src/util"}},{"name":"remove","description":"Removes bits from these.","inherits":"BitField#remove","inherited":true,"params":[{"name":"bits","description":"Bits to remove","optional":true,"variable":true,"type":[[["BitFieldResolvable"]]]}],"returns":{"types":[[["BitField"]]],"description":"These bits or new BitField if the instance is frozen."},"meta":{"line":88,"file":"BitField.js","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","inherits":"BitField#serialize","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Object"]]],"meta":{"line":104,"file":"BitField.js","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","inherits":"BitField#toArray","inherited":true,"params":[{"name":"hasParams","description":"Additional parameters for the has method, if any","variable":true,"type":[["*"]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":115,"file":"BitField.js","path":"src/util"}}],"meta":{"line":10,"file":"Speaking.js","path":"src/util"}},{"name":"Structures","description":"Allows for the extension of built-in Discord.js structures that are instantiated by {@link DataStore DataStores}.","methods":[{"name":"get","description":"Retrieves a structure class.","scope":"static","params":[{"name":"structure","description":"Name of the structure to retrieve","type":[[["string"]]]}],"returns":[[["function"]]],"meta":{"line":16,"file":"Structures.js","path":"src/util"}},{"name":"extend","description":"Extends a structure.\n<warn> Make sure to extend all structures before instantiating your client.\nExtending after doing so may not work as expected. </warn>","scope":"static","examples":["const { Structures } = require('discord.js');\n\nStructures.extend('Guild', Guild => {\n  class CoolGuild extends Guild {\n    constructor(client, data) {\n      super(client, data);\n      this.cool = true;\n    }\n  }\n\n  return CoolGuild;\n});"],"params":[{"name":"structure","description":"Name of the structure class to extend","type":[[["string"]]]},{"name":"extender","description":"Function that takes the base class to extend as its only parameter and returns the\nextended class/prototype","type":[[["function"]]]}],"returns":{"types":[[["function"]]],"description":"Extended class/prototype returned from the extender"},"meta":{"line":43,"file":"Structures.js","path":"src/util"}}],"meta":{"line":7,"file":"Structures.js","path":"src/util"}},{"name":"Util","description":"Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.","methods":[{"name":"flatten","description":"Flatten an object. Any properties that are collections will get converted to an array of keys.","scope":"static","params":[{"name":"obj","description":"The object to flatten.","type":[[["Object"]]]},{"name":"props","description":"Specific properties to include/exclude.","optional":true,"variable":true,"type":[[["Object","<"],["string",", ("],["boolean","|"],["string",")>"]]]}],"returns":[[["Object"]]],"meta":{"line":24,"file":"Util.js","path":"src/util"}},{"name":"splitMessage","description":"Splits a string into multiple chunks at a designated character that do not exceed a specific length.","scope":"static","params":[{"name":"text","description":"Content to split","type":[[["StringResolvable"]]]},{"name":"options","description":"Options controlling the behavior of the split","optional":true,"type":[[["SplitOptions"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":58,"file":"Util.js","path":"src/util"}},{"name":"escapeMarkdown","description":"Escapes any Discord-flavour markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]},{"name":"options","description":"What types of markdown to escape","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"options.codeBlock","description":"Whether to escape code blocks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.inlineCode","description":"Whether to escape inline code or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.bold","description":"Whether to escape bolds or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.italic","description":"Whether to escape italics or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.underline","description":"Whether to escape underlines or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.strikethrough","description":"Whether to escape strikethroughs or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.spoiler","description":"Whether to escape spoilers or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.codeBlockContent","description":"Whether to escape text inside code blocks or not","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.inlineCodeContent","description":"Whether to escape text inside inline code or not","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["string"]]],"meta":{"line":90,"file":"Util.js","path":"src/util"}},{"name":"escapeCodeBlock","description":"Escapes code block markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":143,"file":"Util.js","path":"src/util"}},{"name":"escapeInlineCode","description":"Escapes inline code markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":152,"file":"Util.js","path":"src/util"}},{"name":"escapeItalic","description":"Escapes italic markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":161,"file":"Util.js","path":"src/util"}},{"name":"escapeBold","description":"Escapes bold markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":179,"file":"Util.js","path":"src/util"}},{"name":"escapeUnderline","description":"Escapes underline markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":192,"file":"Util.js","path":"src/util"}},{"name":"escapeStrikethrough","description":"Escapes strikethrough markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":205,"file":"Util.js","path":"src/util"}},{"name":"escapeSpoiler","description":"Escapes spoiler markdown in a string.","scope":"static","params":[{"name":"text","description":"Content to escape","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":214,"file":"Util.js","path":"src/util"}},{"name":"fetchRecommendedShards","description":"Gets the recommended shard count from Discord.","scope":"static","params":[{"name":"token","description":"Discord auth token","type":[[["string"]]]},{"name":"guildsPerShard","description":"Number of guilds per shard","optional":true,"default":1000,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"The recommended number of shards"},"meta":{"line":224,"file":"Util.js","path":"src/util"}},{"name":"parseEmoji","description":"Parses emoji info out of a string. The string must be one of:\n* A UTF-8 emoji (no ID)\n* A URL-encoded UTF-8 emoji (no ID)\n* A Discord custom emoji (`<:name:id>` or `<a:name:id>`)","scope":"static","access":"private","params":[{"name":"text","description":"Emoji string to parse","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"description":"Object with `animated`, `name`, and `id` properties"},"meta":{"line":244,"file":"Util.js","path":"src/util"}},{"name":"cloneObject","description":"Shallow-copies an object with its class/prototype intact.","scope":"static","access":"private","params":[{"name":"obj","description":"Object to clone","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":258,"file":"Util.js","path":"src/util"}},{"name":"mergeDefault","description":"Sets default properties on an object that aren't already specified.","scope":"static","access":"private","params":[{"name":"def","description":"Default properties","type":[[["Object"]]]},{"name":"given","description":"Object to assign defaults to","type":[[["Object"]]]}],"returns":[[["Object"]]],"meta":{"line":269,"file":"Util.js","path":"src/util"}},{"name":"convertToBuffer","description":"Converts an ArrayBuffer or string to a Buffer.","scope":"static","access":"private","params":[{"name":"ab","description":"ArrayBuffer to convert","type":[[["ArrayBuffer"]],[["string"]]]}],"returns":[[["Buffer"]]],"meta":{"line":288,"file":"Util.js","path":"src/util"}},{"name":"str2ab","description":"Converts a string to an ArrayBuffer.","scope":"static","access":"private","params":[{"name":"str","description":"String to convert","type":[[["string"]]]}],"returns":[[["ArrayBuffer"]]],"meta":{"line":299,"file":"Util.js","path":"src/util"}},{"name":"makeError","description":"Makes an Error from a plain info object.","scope":"static","access":"private","params":[{"name":"obj","description":"Error info","type":[[["Object"]]]},{"name":"obj.name","description":"Error type","type":[[["string"]]]},{"name":"obj.message","description":"Message for the error","type":[[["string"]]]},{"name":"obj.stack","description":"Stack for the error","type":[[["string"]]]}],"returns":[[["Error"]]],"meta":{"line":315,"file":"Util.js","path":"src/util"}},{"name":"makePlainError","description":"Makes a plain error info object from an Error.","scope":"static","access":"private","params":[{"name":"err","description":"Error to get info from","type":[[["Error"]]]}],"returns":[[["Object"]]],"meta":{"line":328,"file":"Util.js","path":"src/util"}},{"name":"moveElementInArray","description":"Moves an element in an array *in place*.","scope":"static","access":"private","params":[{"name":"array","description":"Array to modify","type":[[["Array","<"],["*",">"]]]},{"name":"element","description":"Element to move","type":[["*"]]},{"name":"newIndex","description":"Index or offset to move the element to","type":[[["number"]]]},{"name":"offset","description":"Move the element by an offset amount rather than to a set index","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["number"]]],"meta":{"line":345,"file":"Util.js","path":"src/util"}},{"name":"resolveString","description":"Resolves a StringResolvable to a string.","scope":"static","params":[{"name":"data","description":"The string resolvable to resolve","type":[[["StringResolvable"]]]}],"returns":[[["string"]]],"meta":{"line":368,"file":"Util.js","path":"src/util"}},{"name":"resolveColor","description":"Resolves a ColorResolvable into a color number.","scope":"static","params":[{"name":"color","description":"Color to resolve","type":[[["ColorResolvable"]]]}],"returns":{"types":[[["number"]]],"description":"A color"},"meta":{"line":414,"file":"Util.js","path":"src/util"}},{"name":"discordSort","description":"Sorts by Discord's position and ID.","scope":"static","params":[{"name":"collection","description":"Collection of objects to sort","type":[[["Collection"]]]}],"returns":[[["Collection"]]],"meta":{"line":434,"file":"Util.js","path":"src/util"}},{"name":"setPosition","description":"Sets the position of a Channel or Role.","scope":"static","access":"private","params":[{"name":"item","description":"Object to set the position of","type":[[["Channel"]],[["Role"]]]},{"name":"position","description":"New position for the object","type":[[["number"]]]},{"name":"relative","description":"Whether `position` is relative to its current position","type":[[["boolean"]]]},{"name":"sorted","description":"A collection of the objects sorted properly","type":[[["Collection","<"],["string",", ("],["Channel","|"],["Role",")>"]]]},{"name":"route","description":"Route to call PATCH on","type":[[["APIRouter"]]]},{"name":"reason","description":"Reason for the change","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["Object",">>"]]],"description":"Updated item list, with `id` and `position` properties"},"meta":{"line":453,"file":"Util.js","path":"src/util"}},{"name":"basename","description":"Alternative to Node's `path.basename`, removing query string after the extension if it exists.","scope":"static","access":"private","params":[{"name":"path","description":"Path to get the basename of","type":[[["string"]]]},{"name":"ext","description":"File extension to remove","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Basename of the path"},"meta":{"line":467,"file":"Util.js","path":"src/util"}},{"name":"idToBinary","description":"Transforms a snowflake from a decimal string to a bit string.","scope":"static","access":"private","params":[{"name":"num","description":"Snowflake to be transformed","type":[[["Snowflake"]]]}],"returns":[[["string"]]],"meta":{"line":478,"file":"Util.js","path":"src/util"}},{"name":"binaryToID","description":"Transforms a snowflake from a bit string to a decimal string.","scope":"static","access":"private","params":[{"name":"num","description":"Bit string to be transformed","type":[[["string"]]]}],"returns":[[["Snowflake"]]],"meta":{"line":499,"file":"Util.js","path":"src/util"}},{"name":"cleanContent","description":"The content to have all mentions replaced by the equivalent text.","scope":"static","params":[{"name":"str","description":"The string to be converted","type":[[["string"]]]},{"name":"message","description":"The message object to reference","type":[[["Message"]]]}],"returns":[[["string"]]],"meta":{"line":525,"file":"Util.js","path":"src/util"}},{"name":"cleanCodeBlockContent","description":"The content to put in a codeblock with all codeblock fences replaced by the equivalent backticks.","scope":"static","params":[{"name":"text","description":"The string to be converted","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":559,"file":"Util.js","path":"src/util"}},{"name":"delayFor","description":"Creates a Promise that resolves after a specified duration.","scope":"static","access":"private","params":[{"name":"ms","description":"How long to wait before resolving (in milliseconds)","type":[[["number"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":569,"file":"Util.js","path":"src/util"}}],"meta":{"line":14,"file":"Util.js","path":"src/util"}}],"interfaces":[],"typedefs":[{"name":"ReceiveStreamOptions","description":"Options passed to `VoiceReceiver#createStream`.","type":[[["Object"]]],"props":[{"name":"mode","description":"The mode for audio output. This defaults to opus, meaning discord.js won't decode\nthe packets for you. You can set this to 'pcm' so that the stream's output will be 16-bit little-endian stereo\naudio","optional":true,"default":"'opus'","type":[[["string"]]]},{"name":"end","description":"When the stream should be destroyed. If `silence`, this will be when the user\nstops talking. Otherwise, if `manual`, this should be handled by you.","optional":true,"default":"'silence'","type":[[["string"]]]}],"meta":{"line":28,"file":"Receiver.js","path":"src/client/voice/receiver"}},{"name":"StreamOptions","description":"Options that can be passed to stream-playing methods:","type":[[["Object"]]],"props":[{"name":"type","description":"The type of stream.","optional":true,"default":"'unknown'","type":[[["StreamType"]]]},{"name":"seek","description":"The time to seek to, will be ignored when playing `ogg/opus` or `webm/opus` streams","optional":true,"default":0,"type":[[["number"]]]},{"name":"volume","description":"The volume to play at. Set this to false to disable volume transforms for\nthis stream to improve performance.","optional":true,"default":1,"type":[[["number"]],[["boolean"]]]},{"name":"plp","description":"Expected packet loss percentage","optional":true,"type":[[["number"]]]},{"name":"fec","description":"Enabled forward error correction","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate (quality) of the audio in kbps.\nIf set to 'auto', the voice channel's bitrate will be used","optional":true,"default":96,"type":[[["number"]],[["string"]]]},{"name":"highWaterMark","description":"The maximum number of opus packets to make and store before they are\nactually needed. See https://nodejs.org/en/docs/guides/backpressuring-in-streams/. Setting this value to\n1 means that changes in volume will be more instant.","optional":true,"default":12,"type":[[["number"]]]}],"meta":{"line":7,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"StreamType","description":"An option passed as part of `StreamOptions` specifying the type of the stream.\n* `unknown`: The default type, streams/input will be passed through to ffmpeg before encoding.\nWill play most streams.\n* `converted`: Play a stream of 16bit signed stereo PCM data, skipping ffmpeg.\n* `opus`: Play a stream of opus packets, skipping ffmpeg. You lose the ability to alter volume.\n* `ogg/opus`: Play an ogg file with the opus encoding, skipping ffmpeg. You lose the ability to alter volume.\n* `webm/opus`: Play a webm file with opus audio, skipping ffmpeg. You lose the ability to alter volume.","type":[[["string"]]],"meta":{"line":23,"file":"PlayInterface.js","path":"src/client/voice/util"}},{"name":"ShardingManagerMode","description":"The mode to spawn shards with for a {@link ShardingManager}: either \"process\" to use child processes, or\n\"worker\" to use workers. The \"worker\" mode relies on the experimental\n[Worker threads](https://nodejs.org/api/worker_threads.html) functionality that is present in Node v10.5.0 or\nnewer. Node must be started with the `--experimental-worker` flag to expose it.","type":[[["Object"]]],"meta":{"line":21,"file":"ShardingManager.js","path":"src/sharding"}},{"name":"ChannelResolvable","description":"Data that can be resolved to give a Channel object. This can be:\n* A Channel object\n* A Snowflake","type":[[["Channel"]],[["Snowflake"]]],"meta":{"line":81,"file":"ChannelStore.js","path":"src/stores"}},{"name":"GuildChannelResolvable","description":"Data that can be resolved to give a Guild Channel object. This can be:\n* A GuildChannel object\n* A Snowflake","type":[[["GuildChannel"]],[["Snowflake"]]],"meta":{"line":25,"file":"GuildChannelStore.js","path":"src/stores"}},{"name":"EmojiResolvable","description":"Data that can be resolved into an GuildEmoji object. This can be:\n* A custom emoji ID\n* A GuildEmoji object\n* A ReactionEmoji object","type":[[["Snowflake"]],[["GuildEmoji"]],[["ReactionEmoji"]]],"meta":{"line":65,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"EmojiIdentifierResolvable","description":"Data that can be resolved to give an emoji identifier. This can be:\n* The unicode representation of an emoji\n* An EmojiResolvable","type":[[["string"]],[["EmojiResolvable"]]],"meta":{"line":93,"file":"GuildEmojiStore.js","path":"src/stores"}},{"name":"GuildMemberResolvable","description":"Data that resolves to give a GuildMember object. This can be:\n* A GuildMember object\n* A User resolvable","type":[[["GuildMember"]],[["UserResolvable"]]],"meta":{"line":23,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"FetchMemberOptions","description":"Options used to fetch a single member from a guild.","type":[[["Object"]]],"props":[{"name":"user","description":"The user to fetch","type":[[["UserResolvable"]]]},{"name":"cache","description":"Whether or not to cache the fetched member","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":55,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"FetchMembersOptions","description":"Options used to fetch multiple members from a guild.","type":[[["Object"]]],"props":[{"name":"query","description":"Limit fetch to members with similar usernames","optional":true,"default":"''","type":[[["string"]]]},{"name":"limit","description":"Maximum number of members to request","optional":true,"default":0,"type":[[["number"]]]}],"meta":{"line":62,"file":"GuildMemberStore.js","path":"src/stores"}},{"name":"GuildResolvable","description":"Data that resolves to give a Guild object. This can be:\n* A Guild object\n* A Snowflake","type":[[["Guild"]],[["Snowflake"]]],"meta":{"line":17,"file":"GuildStore.js","path":"src/stores"}},{"name":"ChannelLogsQueryOptions","description":"The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n`after` are mutually exclusive. All the parameters are optional.","type":[[["Object"]]],"props":[{"name":"limit","description":"Number of messages to acquire","optional":true,"default":50,"type":[[["number"]]]},{"name":"before","description":"ID of a message to get the messages that were posted before it","optional":true,"type":[[["Snowflake"]]]},{"name":"after","description":"ID of a message to get the messages that were posted after it","optional":true,"type":[[["Snowflake"]]]},{"name":"around","description":"ID of a message to get the messages that were posted around it","optional":true,"type":[[["Snowflake"]]]}],"meta":{"line":28,"file":"MessageStore.js","path":"src/stores"}},{"name":"MessageResolvable","description":"Data that can be resolved to a Message object. This can be:\n* A Message\n* A Snowflake","type":[[["Message"]],[["Snowflake"]]],"meta":{"line":85,"file":"MessageStore.js","path":"src/stores"}},{"name":"PresenceResolvable","description":"Data that can be resolved to a Presence object. This can be:\n* A Presence\n* A UserResolvable\n* A Snowflake","type":[[["Presence"]],[["UserResolvable"]],[["Snowflake"]]],"meta":{"line":20,"file":"PresenceStore.js","path":"src/stores"}},{"name":"MessageReactionResolvable","description":"Data that can be resolved to a MessageReaction object. This can be:\n* A MessageReaction\n* A Snowflake","type":[[["MessageReaction"]],[["Snowflake"]]],"meta":{"line":20,"file":"ReactionStore.js","path":"src/stores"}},{"name":"RoleResolvable","description":"Data that can be resolved to a Role object. This can be:\n* A Role\n* A Snowflake","type":[[["Role"]],[["Snowflake"]]],"meta":{"line":50,"file":"RoleStore.js","path":"src/stores"}},{"name":"UserResolvable","description":"Data that resolves to give a User object. This can be:\n* A User object\n* A Snowflake\n* A Message object (resolves to the message author)\n* A GuildMember object","type":[[["User"]],[["Snowflake"]],[["Message"]],[["GuildMember"]]],"meta":{"line":17,"file":"UserStore.js","path":"src/stores"}},{"name":"MessageTarget","description":"A target for a message.","type":[[["TextChannel"]],[["DMChannel"]],[["User"]],[["GuildMember"]],[["Webhook"]],[["WebhookClient"]]],"meta":{"line":336,"file":"APIMessage.js","path":"src/structures"}},{"name":"MessageAdditions","description":"Additional items that can be sent with a message.","type":[[["MessageEmbed"]],[["MessageAttachment"]],[["Array","<("],["MessageEmbed","|"],["MessageAttachment",")>"]]],"meta":{"line":341,"file":"APIMessage.js","path":"src/structures"}},{"name":"ClientAsset","description":"Asset data.","type":[[["Object"]]],"props":[{"name":"id","description":"The asset ID","type":[[["Snowflake"]]]},{"name":"name","description":"The asset name","type":[[["string"]]]},{"name":"type","description":"The asset type","type":[[["string"]]]}],"meta":{"line":120,"file":"ClientApplication.js","path":"src/structures"}},{"name":"PresenceData","description":"Data resembling a raw Discord presence.","type":[[["Object"]]],"props":[{"name":"status","description":"Status of the user","optional":true,"type":[[["PresenceStatusData"]]]},{"name":"afk","description":"Whether the user is AFK","optional":true,"type":[[["boolean"]]]},{"name":"activity","description":"Activity the user is playing","optional":true,"type":[[["Object"]]]},{"name":"activity.application","description":"An application object or application id","optional":true,"type":[[["Object"]],[["string"]]]},{"name":"activity.application.id","description":"The id of the application","optional":true,"type":[[["string"]]]},{"name":"activity.name","description":"Name of the activity","optional":true,"type":[[["string"]]]},{"name":"activity.type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"activity.url","description":"Stream url","optional":true,"type":[[["string"]]]},{"name":"shardID","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":83,"file":"ClientUser.js","path":"src/structures"}},{"name":"PresenceStatusData","description":"A user's status. Must be one of:\n* `online`\n* `idle`\n* `invisible`\n* `dnd` (do not disturb)","type":[[["string"]]],"meta":{"line":111,"file":"ClientUser.js","path":"src/structures"}},{"name":"ActivityOptions","description":"Options for setting an activity","type":[[["Object"]]],"props":[{"name":"url","description":"Twitch stream URL","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the activity","optional":true,"type":[[["ActivityType"]],[["number"]]]},{"name":"shardID","description":"Shard Id(s) to have the activity set on","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]}],"meta":{"line":135,"file":"ClientUser.js","path":"src/structures"}},{"name":"Features","description":"An array of enabled guild features, here are the possible values:\n* ANIMATED_ICON\n* BANNER\n* COMMERCE\n* DISCOVERABLE\n* FEATURABLE\n* INVITE_SPLASH\n* PUBLIC\n* NEWS\n* PARTNERED\n* VANITY_URL\n* VERIFIED\n* VIP_REGIONS","type":[[["string"]]],"meta":{"line":149,"file":"Guild.js","path":"src/structures"}},{"name":"PremiumTier","description":"The type of premium tier:\n* 0: NONE\n* 1: TIER_1\n* 2: TIER_2\n* 3: TIER_3","type":[[["number"]]],"meta":{"line":202,"file":"Guild.js","path":"src/structures"}},{"name":"BanInfo","description":"An object containing information about a guild member's ban.","type":[[["Object"]]],"props":[{"name":"user","description":"User that was banned","type":[[["User"]]]},{"name":"reason","description":"Reason the user was banned","nullable":true,"type":[[["string"]]]}],"meta":{"line":543,"file":"Guild.js","path":"src/structures"}},{"name":"IntegrationData","description":"The data for creating an integration.","type":[[["Object"]]],"props":[{"name":"id","description":"The integration id","type":[[["string"]]]},{"name":"type","description":"The integration type","type":[[["string"]]]}],"meta":{"line":584,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEmbedData","description":"The Guild Embed object","type":[[["Object"]]],"props":[{"name":"enabled","description":"Whether the embed is enabled","type":[[["boolean"]]]},{"name":"channel","description":"The embed channel","nullable":true,"type":[[["GuildChannel"]]]}],"meta":{"line":678,"file":"Guild.js","path":"src/structures"}},{"name":"GuildEditData","description":"The data for editing a guild.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the guild","optional":true,"type":[[["string"]]]},{"name":"region","description":"The region of the guild","optional":true,"type":[[["string"]]]},{"name":"verificationLevel","description":"The verification level of the guild","optional":true,"type":[[["number"]]]},{"name":"explicitContentFilter","description":"The level of the explicit content filter","optional":true,"type":[[["number"]]]},{"name":"afkChannel","description":"The AFK channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"systemChannel","description":"The system channel of the guild","optional":true,"type":[[["ChannelResolvable"]]]},{"name":"afkTimeout","description":"The AFK timeout of the guild","optional":true,"type":[[["number"]]]},{"name":"icon","description":"The icon of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"owner","description":"The owner of the guild","optional":true,"type":[[["GuildMemberResolvable"]]]},{"name":"splash","description":"The splash screen of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"banner","description":"The banner of the guild","optional":true,"type":[[["Base64Resolvable"]]]},{"name":"defaultMessageNotifications","description":"The default message notifications","optional":true,"type":[[["DefaultMessageNotifications"]],[["number"]]]}],"meta":{"line":761,"file":"Guild.js","path":"src/structures"}},{"name":"ChannelPosition","description":"The data needed for updating a channel's position.","type":[[["Object"]]],"props":[{"name":"channel","description":"Channel to update","type":[[["ChannelResolvable"]]]},{"name":"position","description":"New position for the channel","type":[[["number"]]]}],"meta":{"line":991,"file":"Guild.js","path":"src/structures"}},{"name":"GuildRolePosition","description":"The data needed for updating a guild role's position","type":[[["Object"]]],"props":[{"name":"role","description":"The ID of the role","type":[[["RoleResolveable"]]]},{"name":"position","description":"The position to update","type":[[["number"]]]}],"meta":{"line":1021,"file":"Guild.js","path":"src/structures"}},{"name":"AuditLogTargetType","description":"The target type of an entry, e.g. `GUILD`. Here are the available types:\n* GUILD\n* CHANNEL\n* USER\n* ROLE\n* INVITE\n* WEBHOOK\n* EMOJI\n* MESSAGE","type":[[["string"]]],"meta":{"line":9,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogAction","description":"The action of an entry. Here are the available actions:\n* ALL: null\n* GUILD_UPDATE: 1\n* CHANNEL_CREATE: 10\n* CHANNEL_UPDATE: 11\n* CHANNEL_DELETE: 12\n* CHANNEL_OVERWRITE_CREATE: 13\n* CHANNEL_OVERWRITE_UPDATE: 14\n* CHANNEL_OVERWRITE_DELETE: 15\n* MEMBER_KICK: 20\n* MEMBER_PRUNE: 21\n* MEMBER_BAN_ADD: 22\n* MEMBER_BAN_REMOVE: 23\n* MEMBER_UPDATE: 24\n* MEMBER_ROLE_UPDATE: 25\n* ROLE_CREATE: 30\n* ROLE_UPDATE: 31\n* ROLE_DELETE: 32\n* INVITE_CREATE: 40\n* INVITE_UPDATE: 41\n* INVITE_DELETE: 42\n* WEBHOOK_CREATE: 50\n* WEBHOOK_UPDATE: 51\n* WEBHOOK_DELETE: 52\n* EMOJI_CREATE: 60\n* EMOJI_UPDATE: 61\n* EMOJI_DELETE: 62\n* MESSAGE_DELETE: 72","type":[[["number"]],[["string"]]],"meta":{"line":40,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogEntryTarget","description":"The target of an entry. It can be one of:\n* A guild\n* A user\n* A role\n* An emoji\n* An invite\n* A webhook\n* An object with an id key if target was deleted\n* An object where the keys represent either the new value or the old value","type":[[["Object"]],[["Guild"]],[["User"]],[["Role"]],[["GuildEmoji"]],[["Invite"]],[["Webhook"]]],"meta":{"line":146,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogActionType","description":"The action type of an entry, e.g. `CREATE`. Here are the available types:\n* CREATE\n* DELETE\n* UPDATE\n* ALL","type":[[["string"]]],"meta":{"line":176,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"AuditLogChange","description":"An entry in the audit log representing a specific change.","type":[[["object"]]],"props":[{"name":"key","description":"The property that was changed, e.g. `nick` for nickname changes","type":[[["string"]]]},{"name":"old","description":"The old value of the change, e.g. for nicknames, the old nickname","optional":true,"type":[["*"]]},{"name":"new","description":"The new value of the change, e.g. for nicknames, the new nickname","optional":true,"type":[["*"]]}],"meta":{"line":272,"file":"GuildAuditLogs.js","path":"src/structures"}},{"name":"ChannelData","description":"The data for a guild channel.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the channel","optional":true,"type":[[["string"]]]},{"name":"position","description":"The position of the channel","optional":true,"type":[[["number"]]]},{"name":"topic","description":"The topic of the text channel","optional":true,"type":[[["string"]]]},{"name":"nsfw","description":"Whether the channel is NSFW","optional":true,"type":[[["boolean"]]]},{"name":"bitrate","description":"The bitrate of the voice channel","optional":true,"type":[[["number"]]]},{"name":"userLimit","description":"The user limit of the voice channel","optional":true,"type":[[["number"]]]},{"name":"parentID","description":"The parent ID of the channel","optional":true,"type":[[["Snowflake"]]]},{"name":"lockPermissions","description":"Lock the permissions of the channel to what the parent's permissions are","optional":true,"type":[[["boolean"]]]},{"name":"permissionOverwrites","description":"Permission overwrites for the channel","optional":true,"type":[[["Array","<"],["OverwriteResolvable",">"]],[["Collection","<"],["Snowflake",", "],["OverwriteResolvable",">"]]]},{"name":"rateLimitPerUser","description":"The ratelimit per user for the channel in seconds","optional":true,"type":[[["number"]]]}],"meta":{"line":280,"file":"GuildChannel.js","path":"src/structures"}},{"name":"GuildEmojiEditData","description":"Data for editing an emoji.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the emoji","optional":true,"type":[[["string"]]]},{"name":"roles","description":"Roles to restrict emoji to","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]}],"meta":{"line":101,"file":"GuildEmoji.js","path":"src/structures"}},{"name":"GuildMemberEditData","description":"The data for editing a guild member.","type":[[["Object"]]],"props":[{"name":"nick","description":"The nickname to set for the member","optional":true,"type":[[["string"]]]},{"name":"roles","description":"The roles or role IDs to apply","optional":true,"type":[[["Collection","<"],["Snowflake",", "],["Role",">"]],[["Array","<"],["RoleResolvable",">"]]]},{"name":"mute","description":"Whether or not the member should be muted","optional":true,"type":[[["boolean"]]]},{"name":"deaf","description":"Whether or not the member should be deafened","optional":true,"type":[[["boolean"]]]},{"name":"channel","description":"Channel to move member to (if they are connected to voice), or `null`\nif you want to kick them from voice","optional":true,"type":[[["ChannelResolvable"]],[["null"]]]}],"meta":{"line":266,"file":"GuildMember.js","path":"src/structures"}},{"name":"IntegrationAccount","description":"The information account for an integration","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the account","type":[[["string"]]]},{"name":"name","description":"The name of the account","type":[[["string"]]]}],"meta":{"line":5,"file":"Integration.js","path":"src/structures"}},{"name":"IntegrationEditData","description":"The data for editing an integration.","type":[[["Object"]]],"props":[{"name":"expireBehavior","description":"The new behaviour of expiring subscribers","optional":true,"type":[[["number"]]]},{"name":"expireGracePeriod","description":"The new grace period before expiring subscribers","optional":true,"type":[[["number"]]]}],"meta":{"line":109,"file":"Integration.js","path":"src/structures"}},{"name":"CollectorFilter","description":"Filter to be applied to the collector.","type":[[["function"]]],"params":[{"name":"args","description":"Any arguments received by the listener","variable":true,"type":[["*"]]},{"name":"collection","description":"The items collected by this collector","type":[[["Collection"]]]}],"returns":[[["boolean"]]],"meta":{"line":7,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"CollectorOptions","description":"Options to be applied to the collector.","type":[[["Object"]]],"props":[{"name":"time","description":"How long to run the collector for in milliseconds","optional":true,"type":[[["number"]]]},{"name":"idle","description":"How long to stop the collector after inactivity in milliseconds","optional":true,"type":[[["number"]]]},{"name":"dispose","description":"Whether to dispose data when it's deleted","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":15,"file":"Collector.js","path":"src/structures/interfaces"}},{"name":"MessageOptions","description":"Options provided when sending or editing a message.","type":[[["Object"]]],"props":[{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"content","description":"The content for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embed","description":"An embed for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["MessageEmbed"]],[["Object"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["BufferResolvable",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]},{"name":"reply","description":"User to reply to (prefixes the message with a mention, except in DMs)","optional":true,"type":[[["UserResolvable"]]]}],"meta":{"line":52,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"FileOptions","type":[[["Object"]]],"props":[{"name":"attachment","description":"File to attach","type":[[["BufferResolvable"]]]},{"name":"name","description":"Filename of the attachment","optional":true,"default":"'file.jpg'","type":[[["string"]]]}],"meta":{"line":69,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"SplitOptions","description":"Options for splitting a message.","type":[[["Object"]]],"props":[{"name":"maxLength","description":"Maximum character length per message piece","optional":true,"default":2000,"type":[[["number"]]]},{"name":"char","description":"Character to split the message with","optional":true,"default":"'\\n'","type":[[["string"]]]},{"name":"prepend","description":"Text to prepend to every piece except the first","optional":true,"default":"''","type":[[["string"]]]},{"name":"append","description":"Text to append to every piece except the last","optional":true,"default":"''","type":[[["string"]]]}],"meta":{"line":75,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"AwaitMessagesOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["MessageCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":253,"file":"TextBasedChannel.js","path":"src/structures/interfaces"}},{"name":"TargetUser","description":"The type of the target user:\n* 1: STREAM","type":[[["number"]]],"meta":{"line":79,"file":"Invite.js","path":"src/structures"}},{"name":"MessageReference","description":"Reference data sent in a crossposted message.","type":[[["Object"]]],"props":[{"name":"channelID","description":"ID of the channel the message was crossposted from","type":[[["string"]]]},{"name":"guildID","description":"ID of the guild the message was crossposted from","nullable":true,"type":[[["string"]]]},{"name":"messageID","description":"ID of the message that was crossposted","nullable":true,"type":[[["string"]]]}],"meta":{"line":185,"file":"Message.js","path":"src/structures"}},{"name":"AwaitReactionsOptions","description":"An object containing the same properties as CollectorOptions, but a few more:","type":[[["ReactionCollectorOptions"]]],"props":[{"name":"errors","description":"Stop/end reasons that cause the promise to reject","optional":true,"type":[[["Array","<"],["string",">"]]]}],"meta":{"line":323,"file":"Message.js","path":"src/structures"}},{"name":"MessageEditOptions","description":"Options that can be passed into editMessage.","type":[[["Object"]]],"props":[{"name":"content","description":"Content to be edited","optional":true,"type":[[["string"]]]},{"name":"embed","description":"An embed to be added/edited","optional":true,"type":[[["Object"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]}],"meta":{"line":394,"file":"Message.js","path":"src/structures"}},{"name":"MessageCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum amount of messages to collect","type":[[["number"]]]},{"name":"maxProcessed","description":"The maximum amount of messages to process","type":[[["number"]]]}],"meta":{"line":6,"file":"MessageCollector.js","path":"src/structures"}},{"name":"EmbedField","type":[[["Object"]]],"props":[{"name":"name","description":"The name of this field","type":[[["string"]]]},{"name":"value","description":"The value of this field","type":[[["string"]]]},{"name":"inline","description":"If this field will be displayed inline","type":[[["boolean"]]]}],"meta":{"line":56,"file":"MessageEmbed.js","path":"src/structures"}},{"name":"CrosspostedChannel","description":"Crossposted channel data.","type":[[["Object"]]],"props":[{"name":"channelID","description":"ID of the mentioned channel","type":[[["string"]]]},{"name":"guildID","description":"ID of the guild that has the channel","type":[[["string"]]]},{"name":"type","description":"Type of the channel","type":[[["string"]]]},{"name":"name","description":"The name of the channel","type":[[["string"]]]}],"meta":{"line":91,"file":"MessageMentions.js","path":"src/structures"}},{"name":"OverwriteType","description":"The type of a permission overwrite. It can be one of:\n* member\n* role","type":[[["string"]]],"meta":{"line":31,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"PermissionOverwriteOption","description":"An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n```js\n{\n 'SEND_MESSAGES': true,\n 'EMBED_LINKS': null,\n 'ATTACH_FILES': false,\n}\n```","type":[[["Object"]]],"meta":{"line":93,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"ResolvedOverwriteOptions","type":[[["object"]]],"props":[{"name":"allow","description":"The allowed permissions","type":[[["Permissions"]]]},{"name":"deny","description":"The denied permissions","type":[[["Permissions"]]]}],"meta":{"line":105,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"RawOverwriteData","description":"The raw data for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"The id of the overwrite","type":[[["Snowflake"]]]},{"name":"allow","description":"The permissions to allow","type":[[["number"]]]},{"name":"deny","description":"The permissions to deny","type":[[["number"]]]},{"name":"type","description":"The type of this OverwriteData","type":[[["OverwriteType"]]]}],"meta":{"line":139,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"OverwriteResolvable","description":"Data that can be resolved into {@link RawOverwriteData}","type":[[["PermissionOverwrites"]],[["OverwriteData"]]],"meta":{"line":148,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"OverwriteData","description":"Data that can be used for a permission overwrite","type":[[["Object"]]],"props":[{"name":"id","description":"Member or role this overwrite is for","type":[[["GuildMemberResolvable"]],[["RoleResolvable"]]]},{"name":"allow","description":"The permissions to allow","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"deny","description":"The permissions to deny","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"type","description":"The type of this OverwriteData","optional":true,"type":[[["OverwriteType"]]]}],"meta":{"line":153,"file":"PermissionOverwrites.js","path":"src/structures"}},{"name":"MessageActivity","description":"Activity sent in a message.","type":[[["Object"]]],"props":[{"name":"partyID","description":"Id of the party represented in activity","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of activity sent","optional":true,"type":[[["number"]]]}],"meta":{"line":7,"file":"Presence.js","path":"src/structures"}},{"name":"PresenceStatus","description":"The status of this presence:\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`offline`** - user is offline or invisible\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":14,"file":"Presence.js","path":"src/structures"}},{"name":"ClientPresenceStatus","description":"The status of this presence:\n* **`online`** - user is online\n* **`idle`** - user is AFK\n* **`dnd`** - user is in Do Not Disturb","type":[[["string"]]],"meta":{"line":23,"file":"Presence.js","path":"src/structures"}},{"name":"ReactionCollectorOptions","type":[[["CollectorOptions"]]],"props":[{"name":"max","description":"The maximum total amount of reactions to collect","type":[[["number"]]]},{"name":"maxEmojis","description":"The maximum number of emojis to collect","type":[[["number"]]]},{"name":"maxUsers","description":"The maximum number of users to react","type":[[["number"]]]}],"meta":{"line":7,"file":"ReactionCollector.js","path":"src/structures"}},{"name":"RoleData","description":"The data for a role.","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the role","optional":true,"type":[[["string"]]]},{"name":"color","description":"The color of the role, either a hex string or a base 10 number","optional":true,"type":[[["ColorResolvable"]]]},{"name":"hoist","description":"Whether or not the role should be hoisted","optional":true,"type":[[["boolean"]]]},{"name":"position","description":"The position of the role","optional":true,"type":[[["number"]]]},{"name":"permissions","description":"The permissions of the role","optional":true,"type":[[["PermissionResolvable"]]]},{"name":"mentionable","description":"Whether or not the role should be mentionable","optional":true,"type":[[["boolean"]]]}],"meta":{"line":157,"file":"Role.js","path":"src/structures"}},{"name":"WebhookMessageOptions","description":"Options that can be passed into send.","type":[[["Object"]]],"props":[{"name":"username","description":"Username override for the message","optional":true,"default":"this.name","type":[[["string"]]]},{"name":"avatarURL","description":"Avatar URL override for the message","optional":true,"type":[[["string"]]]},{"name":"tts","description":"Whether or not the message should be spoken aloud","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"nonce","description":"The nonce for the message","optional":true,"default":"''","type":[[["string"]]]},{"name":"embeds","description":"An array of embeds for the message\n(see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)","optional":true,"type":[[["Array","<"],["Object",">"]]]},{"name":"disableEveryone","description":"Whether or not @everyone and @here\nshould be replaced with plain-text","optional":true,"default":"this.client.options.disableEveryone","type":[[["boolean"]]]},{"name":"files","description":"Files to send with the message","optional":true,"type":[[["Array","<"],["FileOptions",">"]],[["Array","<"],["string",">"]]]},{"name":"code","description":"Language for optional codeblock formatting to apply","optional":true,"type":[[["string"]],[["boolean"]]]},{"name":"split","description":"Whether or not the message should be split into multiple messages if\nit exceeds the character limit. If an object is provided, these are the options for splitting the message.","optional":true,"default":false,"type":[[["boolean"]],[["SplitOptions"]]]}],"meta":{"line":71,"file":"Webhook.js","path":"src/structures"}},{"name":"BitFieldResolvable","description":"Data that can be resolved to give a bitfield. This can be:\n* A string (see {@link BitField.FLAGS})\n* A bit number\n* An instance of BitField\n* An Array of BitFieldResolvable","type":[[["string"]],[["number"]],[["BitField"]],[["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":131,"file":"BitField.js","path":"src/util"}},{"name":"ClientOptions","description":"Options for a client.","type":[[["Object"]]],"props":[{"name":"shards","description":"ID of the shard to run, or an array of shard IDs","optional":true,"type":[[["number"]],[["Array","<"],["number",">"]]]},{"name":"shardCount","description":"Total number of shards that will be spawned by this Client","optional":true,"default":1,"type":[[["number"]]]},{"name":"totalShardCount","description":"The total amount of shards used by all processes of this bot\n(e.g. recommended shard count, shard count of the ShardingManager)","optional":true,"default":1,"type":[[["number"]]]},{"name":"messageCacheMaxSize","description":"Maximum number of messages to cache per channel\n(-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\nindefinitely)","optional":true,"default":200,"type":[[["number"]]]},{"name":"messageCacheLifetime","description":"How long a message should stay in the cache until it is considered\nsweepable (in seconds, 0 for forever)","optional":true,"default":0,"type":[[["number"]]]},{"name":"messageSweepInterval","description":"How frequently to remove messages from the cache that are older than\nthe message cache lifetime (in seconds, 0 for never)","optional":true,"default":0,"type":[[["number"]]]},{"name":"fetchAllMembers","description":"Whether to cache all guild members and users upon startup, as well as\nupon joining a guild (should be avoided whenever possible)","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"disableEveryone","description":"Default value for {@link MessageOptions#disableEveryone}","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"partials","description":"Structures allowed to be partial. This means events can be emitted even when\nthey're missing all the data for a particular structure. See the \"Partials\" topic listed in the sidebar for some\nimportant usage information, as partials require you to put checks in place when handling data.","optional":true,"type":[[["Array","<"],["PartialType",">"]]]},{"name":"restWsBridgeTimeout","description":"Maximum time permitted between REST responses and their\ncorresponding websocket events","optional":true,"default":5000,"type":[[["number"]]]},{"name":"restTimeOffset","description":"Extra time in millseconds to wait before continuing to make REST\nrequests (higher values will reduce rate-limiting errors on bad connections)","optional":true,"default":500,"type":[[["number"]]]},{"name":"restRequestTimeout","description":"Time to wait before cancelling a REST request, in milliseconds","optional":true,"default":15000,"type":[[["number"]]]},{"name":"restSweepInterval","description":"How frequently to delete inactive request buckets, in seconds\n(or 0 for never)","optional":true,"default":60,"type":[[["number"]]]},{"name":"retryLimit","description":"How many times to retry on 5XX errors (Infinity for indefinite amount of retries)","optional":true,"default":1,"type":[[["number"]]]},{"name":"presence","description":"Presence data to use upon login","optional":true,"type":[[["PresenceData"]]]},{"name":"disabledEvents","description":"An array of disabled websocket events. Events in this array will not be\nprocessed, potentially resulting in performance improvements for larger bots. Only disable events you are\n100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\nmost impact is typically `TYPING_START`.","optional":true,"type":[[["Array","<"],["WSEventType",">"]]]},{"name":"ws","description":"Options for the WebSocket","optional":true,"type":[[["WebsocketOptions"]]]},{"name":"http","description":"HTTP options","optional":true,"type":[[["HTTPOptions"]]]}],"meta":{"line":7,"file":"Constants.js","path":"src/util"}},{"name":"WebsocketOptions","description":"WebSocket options (these are left as snake_case to match the API)","type":[[["Object"]]],"props":[{"name":"large_threshold","description":"Number of members in a guild to be considered large","optional":true,"default":250,"type":[[["number"]]]},{"name":"compress","description":"Whether to compress data sent on the connection\n(defaults to `false` for browsers)","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":60,"file":"Constants.js","path":"src/util"}},{"name":"HTTPOptions","description":"HTTP options","type":[[["Object"]]],"props":[{"name":"version","description":"API version to use","optional":true,"default":7,"type":[[["number"]]]},{"name":"api","description":"Base url of the API","optional":true,"default":"'https://discordapp.com/api'","type":[[["string"]]]},{"name":"cdn","description":"Base url of the CDN","optional":true,"default":"'https://cdn.discordapp.com'","type":[[["string"]]]},{"name":"invite","description":"Base url of invites","optional":true,"default":"'https://discord.gg'","type":[[["string"]]]}],"meta":{"line":78,"file":"Constants.js","path":"src/util"}},{"name":"ImageURLOptions","description":"Options for Image URLs.","type":[[["Object"]]],"props":[{"name":"format","description":"One of `webp`, `png`, `jpg`, `gif`. If no format is provided,\nit will be `gif` for animated avatars or otherwise `webp`","optional":true,"type":[[["string"]]]},{"name":"size","description":"One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`","optional":true,"type":[[["number"]]]}],"meta":{"line":118,"file":"Constants.js","path":"src/util"}},{"name":"Status","description":"The current status of the client. Here are the available statuses:\n* READY: 0\n* CONNECTING: 1\n* RECONNECTING: 2\n* IDLE: 3\n* NEARLY: 4\n* DISCONNECTED: 5","type":[[["number"]]],"meta":{"line":158,"file":"Constants.js","path":"src/util"}},{"name":"VoiceStatus","description":"The current status of a voice connection. Here are the available statuses:\n* CONNECTED: 0\n* CONNECTING: 1\n* AUTHENTICATING: 2\n* RECONNECTING: 3\n* DISCONNECTED: 4","type":[[["number"]]],"meta":{"line":177,"file":"Constants.js","path":"src/util"}},{"name":"PartialType","description":"The type of Structure allowed to be a partial:\n* USER\n* CHANNEL (only affects DMChannels)\n* GUILD_MEMBER\n* MESSAGE\n<warn>Partials require you to put checks in place when handling data, read the Partials topic listed in the\nsidebar for more information.</warn>","type":[[["string"]]],"meta":{"line":284,"file":"Constants.js","path":"src/util"}},{"name":"WSEventType","description":"The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n* READY\n* RESUMED\n* GUILD_CREATE\n* GUILD_DELETE\n* GUILD_UPDATE\n* GUILD_MEMBER_ADD\n* GUILD_MEMBER_REMOVE\n* GUILD_MEMBER_UPDATE\n* GUILD_MEMBERS_CHUNK\n* GUILD_INTEGRATIONS_UPDATE\n* GUILD_ROLE_CREATE\n* GUILD_ROLE_DELETE\n* GUILD_ROLE_UPDATE\n* GUILD_BAN_ADD\n* GUILD_BAN_REMOVE\n* GUILD_EMOJIS_UPDATE\n* CHANNEL_CREATE\n* CHANNEL_DELETE\n* CHANNEL_UPDATE\n* CHANNEL_PINS_UPDATE\n* MESSAGE_CREATE\n* MESSAGE_DELETE\n* MESSAGE_UPDATE\n* MESSAGE_DELETE_BULK\n* MESSAGE_REACTION_ADD\n* MESSAGE_REACTION_REMOVE\n* MESSAGE_REACTION_REMOVE_ALL\n* USER_UPDATE\n* USER_SETTINGS_UPDATE\n* PRESENCE_UPDATE\n* TYPING_START\n* VOICE_STATE_UPDATE\n* VOICE_SERVER_UPDATE\n* WEBHOOKS_UPDATE","type":[[["string"]]],"meta":{"line":301,"file":"Constants.js","path":"src/util"}},{"name":"MessageType","description":"The type of a message, e.g. `DEFAULT`. Here are the available types:\n* DEFAULT\n* RECIPIENT_ADD\n* RECIPIENT_REMOVE\n* CALL\n* CHANNEL_NAME_CHANGE\n* CHANNEL_ICON_CHANGE\n* PINS_ADD\n* GUILD_MEMBER_JOIN\n* USER_PREMIUM_GUILD_SUBSCRIPTION\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n* USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n* CHANNEL_FOLLOW_ADD","type":[[["string"]]],"meta":{"line":375,"file":"Constants.js","path":"src/util"}},{"name":"ActivityType","description":"The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n* PLAYING\n* STREAMING\n* LISTENING\n* WATCHING","type":[[["string"]]],"meta":{"line":408,"file":"Constants.js","path":"src/util"}},{"name":"VerificationLevel","description":"The value set for the verification levels for a guild:\n* None\n* Low\n* Medium\n* (╯°□°）╯︵ ┻━┻\n* ┻━┻ ﾐヽ(ಠ益ಠ)ノ彡┻━┻","type":[[["string"]]],"meta":{"line":470,"file":"Constants.js","path":"src/util"}},{"name":"APIError","description":"An error encountered while performing an API request. Here are the potential errors:\n* UNKNOWN_ACCOUNT\n* UNKNOWN_APPLICATION\n* UNKNOWN_CHANNEL\n* UNKNOWN_GUILD\n* UNKNOWN_INTEGRATION\n* UNKNOWN_INVITE\n* UNKNOWN_MEMBER\n* UNKNOWN_MESSAGE\n* UNKNOWN_OVERWRITE\n* UNKNOWN_PROVIDER\n* UNKNOWN_ROLE\n* UNKNOWN_TOKEN\n* UNKNOWN_USER\n* UNKNOWN_EMOJI\n* UNKNOWN_WEBHOOK\n* BOT_PROHIBITED_ENDPOINT\n* BOT_ONLY_ENDPOINT\n* MAXIMUM_GUILDS\n* MAXIMUM_FRIENDS\n* MAXIMUM_PINS\n* MAXIMUM_ROLES\n* MAXIMUM_REACTIONS\n* MAXIMUM_CHANNELS\n* MAXIMUM_INVITES\n* UNAUTHORIZED\n* USER_BANNED\n* MISSING_ACCESS\n* INVALID_ACCOUNT_TYPE\n* CANNOT_EXECUTE_ON_DM\n* EMBED_DISABLED\n* CANNOT_EDIT_MESSAGE_BY_OTHER\n* CANNOT_SEND_EMPTY_MESSAGE\n* CANNOT_MESSAGE_USER\n* CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n* CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n* OAUTH2_APPLICATION_BOT_ABSENT\n* MAXIMUM_OAUTH2_APPLICATIONS\n* INVALID_OAUTH_STATE\n* MISSING_PERMISSIONS\n* INVALID_AUTHENTICATION_TOKEN\n* NOTE_TOO_LONG\n* INVALID_BULK_DELETE_QUANTITY\n* CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n* INVALID_OR_TAKEN_INVITE_CODE\n* CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n* INVALID_OAUTH_TOKEN\n* BULK_DELETE_MESSAGE_TOO_OLD\n* INVALID_FORM_BODY\n* INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n* INVALID_API_VERSION\n* REACTION_BLOCKED\n* RESOURCE_OVERLOADED","type":[[["string"]]],"meta":{"line":487,"file":"Constants.js","path":"src/util"}},{"name":"DefaultMessageNotifications","description":"The value set for a guild's default message notifications, e.g. `ALL`. Here are the available types:\n* ALL\n* MENTIONS","type":[[["string"]]],"meta":{"line":598,"file":"Constants.js","path":"src/util"}},{"name":"MembershipStates","description":"The value set for a team members's membership state:\n* INVITED\n* ACCEPTED","type":[[["string"]]],"meta":{"line":609,"file":"Constants.js","path":"src/util"}},{"name":"InviteResolvable","description":"Data that can be resolved to give an invite code. This can be:\n* An invite code\n* An invite URL","type":[[["string"]]],"meta":{"line":19,"file":"DataResolver.js","path":"src/util"}},{"name":"Base64Resolvable","description":"Data that resolves to give a Base64 string, typically for image uploading. This can be:\n* A Buffer\n* A base64 string","type":[[["Buffer"]],[["string"]]],"meta":{"line":52,"file":"DataResolver.js","path":"src/util"}},{"name":"BufferResolvable","description":"Data that can be resolved to give a Buffer. This can be:\n* A Buffer\n* The path to a local file\n* A URL","type":[[["string"]],[["Buffer"]]],"meta":{"line":69,"file":"DataResolver.js","path":"src/util"}},{"name":"PermissionResolvable","description":"Data that can be resolved to give a permission number. This can be:\n* A string (see {@link Permissions.FLAGS})\n* A permission number\n* An instance of Permissions\n* An Array of PermissionResolvable","type":[[["string"]],[["number"]],[["Permissions"]],[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":12,"file":"Permissions.js","path":"src/util"}},{"name":"Snowflake","description":"A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n```\nIf we have a snowflake '266241948824764416' we can represent it as binary:\n\n64                                          22     17     12          0\n 000000111011000111100001101001000101000000  00001  00000  000000000000\n      number of ms since Discord epoch       worker  pid    increment\n```","type":[[["string"]]],"meta":{"line":17,"file":"Snowflake.js","path":"src/util"}},{"name":"DeconstructedSnowflake","description":"A deconstructed snowflake.","type":[[["Object"]]],"props":[{"name":"timestamp","description":"Timestamp the snowflake was created","type":[[["number"]]]},{"name":"date","description":"Date the snowflake was created","type":[[["Date"]]]},{"name":"workerID","description":"Worker ID in the snowflake","type":[[["number"]]]},{"name":"processID","description":"Process ID in the snowflake","type":[[["number"]]]},{"name":"increment","description":"Increment in the snowflake","type":[[["number"]]]},{"name":"binary","description":"Binary representation of the snowflake","type":[[["string"]]]}],"meta":{"line":48,"file":"Snowflake.js","path":"src/util"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\n* A string\n* An array (joined with a new line delimiter to give a string)\n* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":355,"file":"Util.js","path":"src/util"}},{"name":"ColorResolvable","description":"Can be a number, hex string, an RGB array like:\n```js\n[255, 0, 255] // purple\n```\nor one of the following strings:\n- `DEFAULT`\n- `WHITE`\n- `AQUA`\n- `GREEN`\n- `BLUE`\n- `YELLOW`\n- `PURPLE`\n- `LUMINOUS_VIVID_PINK`\n- `GOLD`\n- `ORANGE`\n- `RED`\n- `GREY`\n- `DARKER_GREY`\n- `NAVY`\n- `DARK_AQUA`\n- `DARK_GREEN`\n- `DARK_BLUE`\n- `DARK_PURPLE`\n- `DARK_VIVID_PINK`\n- `DARK_GOLD`\n- `DARK_ORANGE`\n- `DARK_RED`\n- `DARK_GREY`\n- `LIGHT_GREY`\n- `DARK_NAVY`\n- `RANDOM`","type":[[["string"]],[["number"]],[["Array","<"],["number",">"]]],"meta":{"line":374,"file":"Util.js","path":"src/util"}}],"externals":[{"name":"WritableStream","see":["{@link https://nodejs.org/api/stream.html#stream_class_stream_writable}"],"meta":{"line":16,"file":"StreamDispatcher.js","path":"src/client/voice/dispatcher"}},{"name":"Inflate","see":["{@link https://www.npmjs.com/package/zlib-sync}"],"meta":{"line":114,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"CloseEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}"],"meta":{"line":306,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"ErrorEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent}"],"meta":{"line":311,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"MessageEvent","see":["{@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}"],"meta":{"line":316,"file":"WebSocketShard.js","path":"src/client/websocket"}},{"name":"BaseCollection","see":["{@link https://discord.js.org/#/docs/collection/}"],"meta":{"line":19,"file":"Collection.js","path":"src/util"}},{"name":"Stream","see":["{@link https://nodejs.org/api/stream.html}"],"meta":{"line":77,"file":"DataResolver.js","path":"src/util"}}]},
  // Commando/0.5.0.json
  {"meta":{"generator":"0.6.1","format":19,"date":1482131521520},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/Gawdl3y/discord.js-commando.svg)](https://david-dm.org/Gawdl3y/discord.js-commando)\n[![Build status](https://travis-ci.org/hydrabolt/discord.js.svg)](https://travis-ci.org/hydrabolt/discord.js)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/hydrabolt/discord.js).\nIt is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Built-in types, with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 7.0.0 or newer is required.**  \n`npm install discord.js-commando --save`\n\nWhen running a bot using Commando, make sure to run Node with the `--harmony` flag. Examples:\n- `node --harmony somebot.js`\n- `pm2 start somebot.js --node-args='--harmony'`\n\nNo version of Node older than 7.0.0 supports `async`/`await`, although you can compile it down to ES6 or ES5 with the\n[fast-async](https://www.npmjs.com/package/fast-async) Babel plugin. You must do this for your code and the framework's manually if you wish\nto use Commando on older Node versions.\n","path":"docs/general/welcome.md"}}}},"classes":[{"name":"CommandoClient","description":"Discord.js Client with a command framework","extends":["Client"],"construct":{"name":"CommandoClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["CommandoClientOptions"]]]}]},"props":[{"name":"registry","description":"The client's command registry","type":[[["CommandRegistry"]]],"meta":{"line":38,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"The client's command dispatcher","type":[[["CommandDispatcher"]]],"meta":{"line":44,"file":"client.js","path":"src"}},{"name":"provider","description":"The client's setting provider","nullable":true,"type":[[["SettingProvider"]]],"meta":{"line":50,"file":"client.js","path":"src"}},{"name":"settings","description":"Shortcut to use setting provider methods for the global settings","type":[[["GuildSettingsHelper"]]],"meta":{"line":56,"file":"client.js","path":"src"}},{"name":"commandPrefix","description":"Global command prefix","type":[[["string"]]],"meta":{"line":80,"file":"client.js","path":"src"}}],"methods":[{"name":"setProvider","description":"Sets the setting provider to use, and initialises it once the client is ready","params":[{"name":"provider","description":"Provider to use","type":[[["SettingProvider"]],[["Promise",".<"],["SettingProvider",">"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":96,"file":"client.js","path":"src"}}],"events":[{"name":"unknownCommand","description":"Emitted when an unknown command is triggered","params":[{"name":"message","description":"Command message that triggered the command","type":[[["CommandMessage"]]]}],"meta":{"line":114,"file":"dispatcher.js","path":"src"}},{"name":"groupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the group was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":83,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered","params":[{"name":"command","description":"Command that was registered","type":[[["Command"]]]},{"name":"registry","description":"Registry that the command was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":141,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["CommandRegistry"]]]}],"meta":{"line":200,"file":"registry.js","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","params":[{"name":"newCommand","description":"New command","type":[[["Command"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":308,"file":"registry.js","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","params":[{"name":"command","description":"Command that was unregistered","type":[[["Command"]]]}],"meta":{"line":325,"file":"registry.js","path":"src"}},{"name":"commandBlocked","description":"Emitted when a command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandMessage"]]]},{"name":"reason","description":"Reason that the command was blocked","type":[[["string"]]]}],"meta":{"line":145,"file":"message.js","path":"src/commands"}},{"name":"commandRun","description":"Emitted when running a command","params":[{"name":"command","description":"Command that is being run","type":[[["Command"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array",".<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]}],"meta":{"line":187,"file":"message.js","path":"src/commands"}},{"name":"commandError","description":"Emitted when a command produces an error while running","params":[{"name":"command","description":"Command that produced an error","type":[[["Command"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array",".<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]}],"meta":{"line":207,"file":"message.js","path":"src/commands"}},{"name":"commandPrefixChange","description":"Emitted whenever a guild's command prefix is changed","params":[{"name":"guild","description":"Guild that the prefix was changed in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"prefix","description":"New command prefix (null for default)","nullable":true,"type":[[["string"]]]}],"meta":{"line":18,"file":"guild.js","path":"src/extensions"}},{"name":"commandStatusChange","description":"Emitted whenever a command is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the command was enabled/disabled in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command that was enabled/disabled","type":[[["Command"]]]},{"name":"enabled","description":"Whether the command is enabled","type":[[["boolean"]]]}],"meta":{"line":49,"file":"guild.js","path":"src/extensions"}},{"name":"groupStatusChange","description":"Emitted whenever a command group is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the group was enabled/disabled in (null for global)","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group that was enabled/disabled","type":[[["CommandGroup"]]]},{"name":"enabled","description":"Whether the group is enabled","type":[[["boolean"]]]}],"meta":{"line":85,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":10,"file":"client.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":11,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandRegistry"]]],"meta":{"line":23,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set",".<"],["function","()>"]]],"meta":{"line":29,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\n  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\n});","client.dispatcher.addInhibitor(msg => {\n\tif(!coolUsers.has(msg.author.id)) return ['cool', msg.reply('You\\'re not cool enough!')];\n});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":58,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":70,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":83,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":150,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandMessage"]]]}],"returns":{"types":[[["Array"]]],"description":"[reason, ?response]","nullable":true},"meta":{"line":170,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array",".<"],["Message",">"]]]}],"meta":{"line":189,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandMessage"]]],"nullable":true},"meta":{"line":208,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]}],"returns":{"types":[[["CommandMessage"]]],"nullable":true},"meta":{"line":234,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"guild","description":"The Guild that the message is from","nullable":true,"type":[[["Guild"]]]}],"returns":[[["RegExp"]]],"meta":{"line":249,"file":"dispatcher.js","path":"src"}}],"meta":{"line":5,"file":"dispatcher.js","path":"src"}},{"name":"CommandRegistry","description":"Handles registration and searching of commands and groups","construct":{"name":"CommandRegistry","params":[{"name":"client","description":"Client to use","optional":true,"type":[[["CommandoClient"]]]}]},"props":[{"name":"client","description":"The client this registry is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"registry.js","path":"src"}},{"name":"commands","description":"Registered commands","type":[[["Collection",".<"],["string",", "],["Command",">"]]],"meta":{"line":24,"file":"registry.js","path":"src"}},{"name":"groups","description":"Registered command groups","type":[[["Collection",".<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":30,"file":"registry.js","path":"src"}},{"name":"types","description":"Registered argument types","type":[[["Collection",".<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":36,"file":"registry.js","path":"src"}},{"name":"evalObjects","description":"Registered objects for the eval command","type":[[["Object"]]],"meta":{"line":42,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Fully resolved path to the bot's commands directory","nullable":true,"type":[[["string"]]],"meta":{"line":48,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Registers a single group","see":["{@link CommandRegistry#registerGroups}"],"params":[{"name":"group","description":"A CommandGroup instance, a constructor,\nan array of [ID, Name], or the group ID","type":[[["CommandGroup"]],[["function"]],[["Array",".<"],["string",">"]],[["string"]]]},{"name":"name","description":"name - Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":59,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Registers multiple groups","params":[{"name":"groups","description":"An array of CommandGroup instances, constructors,\nor arrays of [ID, Name]","type":[[["Array",".<"],["CommandGroup",">"]],[["Array",".<"],["function","()>"]],[["Array",".<"],["Array",".<"],["string",">>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":70,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["{@link CommandRegistry#registerCommands}"],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["Command"]],[["function"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":102,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array",".<"],["Command",">"]],[["Array",".<"],["function","()>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":111,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":159,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link CommandRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":175,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array",".<"],["ArgumentType",">"]],[["Array",".<"],["function","()>"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":184,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":218,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands","returns":[[["CommandRegistry"]]],"meta":{"line":229,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups","returns":[[["CommandRegistry"]]],"meta":{"line":240,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"options","description":"Object specifying what commands to register","optional":true,"type":[[["Object"]]]},{"name":"options.help","description":"Whether or not to register the built-in help command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.prefix","description":"Whether or not to register the built-in prefix command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.eval_","description":"Whether or not to register the built-in eval command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.ping","description":"Whether or not to register the built-in ping command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"options.commandState","description":"Whether or not to register the built-in command state commands\n(enable, disable, reload, list groups)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":258,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry","returns":[[["CommandRegistry"]]],"meta":{"line":280,"file":"registry.js","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command (does not support changing name, group, or memberName)","params":[{"name":"command","description":"New command","type":[[["Command"]],[["function"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":300,"file":"registry.js","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command","params":[{"name":"command","description":"Command to unregister","type":[[["Command"]]]}],"meta":{"line":322,"file":"registry.js","path":"src"}},{"name":"registerEvalObject","description":"Registers a single object to be usable by the eval command","see":["{@link CommandRegistry#registerEvalObjects}"],"params":[{"name":"key","description":"The key for the object","type":[[["string"]]]},{"name":"obj","description":"The object","type":[[["Object"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":341,"file":"registry.js","path":"src"}},{"name":"registerEvalObjects","description":"Registers multiple objects to be usable by the eval command","params":[{"name":"obj","description":"An object of keys: values","type":[[["Object"]]]}],"returns":[[["CommandRegistry"]]],"meta":{"line":352,"file":"registry.js","path":"src"}},{"name":"findGroups","description":"Finds all groups that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array",".<"],["CommandGroup",">"]]],"description":"All groups that are found"},"meta":{"line":363,"file":"registry.js","path":"src"}},{"name":"resolveGroup","description":"Resolves a CommandGroupResolvable to a CommandGroup object","params":[{"name":"group","description":"The group to resolve","type":[[["CommandGroupResolvable"]]]}],"returns":{"types":[[["CommandGroup"]]],"description":"The resolved CommandGroup"},"meta":{"line":392,"file":"registry.js","path":"src"}},{"name":"findCommands","description":"Finds all commands that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"message","description":"The message to check usability against","optional":true,"default":null,"type":[[["Message"]]]}],"returns":{"types":[[["Array",".<"],["Command",">"]]],"description":"All commands that are found"},"meta":{"line":408,"file":"registry.js","path":"src"}},{"name":"resolveCommand","description":"Resolves a CommandResolvable to a Command object","params":[{"name":"command","description":"The command to resolve","type":[[["CommandResolvable"]]]}],"returns":{"types":[[["Command"]]],"description":"The resolved Command"},"meta":{"line":441,"file":"registry.js","path":"src"}},{"name":"resolveCommandPath","description":"Resolves a command file path from a command's group ID and memberName","params":[{"name":"group","description":"ID of the command's group","type":[[["string"]]]},{"name":"memberName","description":"Member name of the command","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":457,"file":"registry.js","path":"src"}}],"meta":{"line":9,"file":"registry.js","path":"src"}},{"name":"CommandArgument","description":"A fancy argument for a command","construct":{"name":"CommandArgument","params":[{"name":"command","description":"Command the argument is for","type":[[["Command"]]]},{"name":"info","description":"Information for the command argument","type":[[["CommandArgumentInfo"]]]}]},"props":[{"name":"command","description":"Command the argument is for","type":[[["Command"]]],"meta":{"line":56,"file":"argument.js","path":"src/commands"}},{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":62,"file":"argument.js","path":"src/commands"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":68,"file":"argument.js","path":"src/commands"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":74,"file":"argument.js","path":"src/commands"}},{"name":"type","description":"Type of the argument","nullable":true,"type":[[["ArgumentType"]]],"meta":{"line":80,"file":"argument.js","path":"src/commands"}},{"name":"max","description":"If type is 'integer' or 'float', this is the maximum value of the number.\nIf type is 'string', this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":87,"file":"argument.js","path":"src/commands"}},{"name":"min","description":"If type is 'integer' or 'float', this is the minimum value of the number.\nIf type is 'string', this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":94,"file":"argument.js","path":"src/commands"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[["*"]],"meta":{"line":100,"file":"argument.js","path":"src/commands"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":106,"file":"argument.js","path":"src/commands"}},{"name":"validator","description":"Validator function for validating a value for the argument","type":[[["ArgumentValidator"]]],"meta":{"line":112,"file":"argument.js","path":"src/commands"}},{"name":"parser","description":"Parser function for parsing a value for the argument","type":[[["ArgumentParser"]]],"meta":{"line":118,"file":"argument.js","path":"src/commands"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":124,"file":"argument.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]},{"name":"value","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]}],"returns":[[["Promise",".<(?"],["*","|"],["symbol",")>"]]],"meta":{"line":133,"file":"argument.js","path":"src/commands"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","access":"private","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]},{"name":"values","description":"Pre-provided values for the argument","optional":true,"type":[[["Array",".<"],["string",">"]]]}],"returns":[[["Promise",".<(?"],["Array",".<"],["*",">|"],["symbol",")>"]]],"meta":{"line":173,"file":"argument.js","path":"src/commands"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"value","description":"Value to check","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]],[["string"]],[["Promise",".<("],["boolean","|"],["string",")>"]]],"meta":{"line":237,"file":"argument.js","path":"src/commands"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"value","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandMessage"]]]}],"returns":[["*"],[["Promise",".<"],["*",">"]]],"meta":{"line":248,"file":"argument.js","path":"src/commands"}}],"meta":{"line":5,"file":"argument.js","path":"src/commands"}},{"name":"Command","description":"A command that can be run in a client","construct":{"name":"Command","params":[{"name":"client","description":"The client the command is for","type":[[["CommandoClient"]]]},{"name":"info","description":"The command information","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"Client that this command is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":92,"file":"base.js","path":"src/commands"}},{"name":"name","description":"Name of this command","type":[[["string"]]],"meta":{"line":104,"file":"base.js","path":"src/commands"}},{"name":"aliases","description":"Aliases for this command","type":[[["Array",".<"],["string",">"]]],"meta":{"line":110,"file":"base.js","path":"src/commands"}},{"name":"groupID","description":"ID of the group the command belongs to","type":[[["string"]]],"meta":{"line":122,"file":"base.js","path":"src/commands"}},{"name":"group","description":"The group the command belongs to, assigned upon registration","nullable":true,"type":[[["CommandGroup"]]],"meta":{"line":128,"file":"base.js","path":"src/commands"}},{"name":"memberName","description":"Name of the command within the group","type":[[["string"]]],"meta":{"line":134,"file":"base.js","path":"src/commands"}},{"name":"description","description":"Short description of the command","type":[[["string"]]],"meta":{"line":140,"file":"base.js","path":"src/commands"}},{"name":"format","description":"Usage format string of the command","type":[[["string"]]],"meta":{"line":146,"file":"base.js","path":"src/commands"}},{"name":"details","description":"Long description of the command","nullable":true,"type":[[["string"]]],"meta":{"line":152,"file":"base.js","path":"src/commands"}},{"name":"examples","description":"Example usage strings","nullable":true,"type":[[["Array",".<"],["string",">"]]],"meta":{"line":158,"file":"base.js","path":"src/commands"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":164,"file":"base.js","path":"src/commands"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":170,"file":"base.js","path":"src/commands"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":176,"file":"base.js","path":"src/commands"}},{"name":"args","description":"The arguments for the command","nullable":true,"type":[[["Array",".<"],["CommandArgument",">"]]],"meta":{"line":182,"file":"base.js","path":"src/commands"}},{"name":"argsPromptLimit","description":"Maximum number of times to prompt for a single argument","type":[[["number"]]],"meta":{"line":202,"file":"base.js","path":"src/commands"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":208,"file":"base.js","path":"src/commands"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":214,"file":"base.js","path":"src/commands"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":220,"file":"base.js","path":"src/commands"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array",".<"],["RegExp",">"]]],"meta":{"line":226,"file":"base.js","path":"src/commands"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":232,"file":"base.js","path":"src/commands"}}],"methods":[{"name":"hasPermission","description":"Checks a user's permission in a guild","params":[{"name":"message","description":"The triggering command message","type":[[["CommandMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":243,"file":"base.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message the command is being run for","type":[[["CommandMessage"]]]},{"name":"args","description":"The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).","type":[[["Object"]],[["string"]],[["Array",".<"],["string",">"]]]},{"name":"fromPattern","description":"Whether or not the command is being run from a pattern match","type":[[["boolean"]]]}],"returns":[[["Promise",".<(?"],["Message","|?"],["Array",".<"],["Message",">)>"]]],"meta":{"line":260,"file":"base.js","path":"src/commands"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":269,"file":"base.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":287,"file":"base.js","path":"src/commands"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":299,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":312,"file":"base.js","path":"src/commands"}},{"name":"reload","description":"Reloads the command","meta":{"line":319,"file":"base.js","path":"src/commands"}},{"name":"unload","description":"Unloads the command","meta":{"line":345,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":359,"file":"base.js","path":"src/commands"}}],"meta":{"line":5,"file":"base.js","path":"src/commands"}},{"name":"CommandGroup","description":"A group for commands. Whodathunkit?","construct":{"name":"CommandGroup","params":[{"name":"client","description":"The client the group is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commands","description":"The commands that the group contains","optional":true,"default":null,"type":[[["Array",".<"],["Command",">"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":18,"file":"group.js","path":"src/commands"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":30,"file":"group.js","path":"src/commands"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":36,"file":"group.js","path":"src/commands"}},{"name":"commands","description":"The commands in this group (added upon their registration)","type":[[["Collection",".<"],["string",", "],["Command",">"]]],"meta":{"line":42,"file":"group.js","path":"src/commands"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":51,"file":"group.js","path":"src/commands"}}],"methods":[{"name":"setEnabledIn","description":"Enables or disables the group in a guild","params":[{"name":"guild","description":"Guild to enable/disable the group in","type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":61,"file":"group.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the group is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","type":[[["GuildResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the group is enabled"},"meta":{"line":79,"file":"group.js","path":"src/commands"}},{"name":"reload","description":"Reloads all of the group's commands","meta":{"line":89,"file":"group.js","path":"src/commands"}}],"meta":{"line":4,"file":"group.js","path":"src/commands"}},{"name":"CommandMessage","description":"A container for a message that triggers a command, that command, and methods to respond","construct":{"name":"CommandMessage","params":[{"name":"message","description":"Message that triggers the command","type":[[["Message"]]]},{"name":"command","description":"Command the message triggers","optional":true,"default":null,"type":[[["Command"]]]},{"name":"argString","description":"Argument string for the command","optional":true,"default":null,"type":[[["string"]]]},{"name":"patternMatches","description":"Command pattern matches (if from a pattern trigger)","optional":true,"default":null,"nullable":true,"type":[[["Array",".<"],["string",">"]]]}]},"props":[{"name":"client","description":"Client that the message was sent from","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":16,"file":"message.js","path":"src/commands"}},{"name":"message","description":"Message that triggers the command","type":[[["Message"]]],"meta":{"line":28,"file":"message.js","path":"src/commands"}},{"name":"command","description":"Command that the message triggers, if any","nullable":true,"type":[[["Command"]]],"meta":{"line":34,"file":"message.js","path":"src/commands"}},{"name":"argString","description":"Argument string for the command","nullable":true,"type":[[["string"]]],"meta":{"line":40,"file":"message.js","path":"src/commands"}},{"name":"patternMatches","description":"Pattern matches (if from a pattern trigger)","nullable":true,"type":[[["Array",".<"],["string",">"]]],"meta":{"line":46,"file":"message.js","path":"src/commands"}},{"name":"responses","description":"Response messages sent, mapped by channel ID (set by the dispatcher after running the command)","nullable":true,"type":[[["Object"]]],"meta":{"line":52,"file":"message.js","path":"src/commands"}},{"name":"responsePositions","description":"The index of the current response that will be edited, mapped by channel ID","nullable":true,"type":[[["Object"]]],"meta":{"line":58,"file":"message.js","path":"src/commands"}},{"name":"promptCount","description":"Number of times the user has been prompted while the arguments are being obtained","access":"private","type":[[["number"]]],"meta":{"line":65,"file":"message.js","path":"src/commands"}},{"name":"id","description":"Shortcut to `this.message.id`","type":[[["string"]]],"meta":{"line":476,"file":"message.js","path":"src/commands"}},{"name":"content","description":"Shortcut to `this.message.content`","type":[[["string"]]],"meta":{"line":484,"file":"message.js","path":"src/commands"}},{"name":"author","description":"Shortcut to `this.message.author`","type":[[["User"]]],"meta":{"line":492,"file":"message.js","path":"src/commands"}},{"name":"channel","description":"Shortcut to `this.message.channel`","type":[[["Channel"]]],"meta":{"line":500,"file":"message.js","path":"src/commands"}},{"name":"guild","description":"Shortcut to `this.message.guild`","nullable":true,"type":[[["Guild"]]],"meta":{"line":508,"file":"message.js","path":"src/commands"}},{"name":"member","description":"Shortcut to `this.message.member`","nullable":true,"type":[[["GuildMember"]]],"meta":{"line":516,"file":"message.js","path":"src/commands"}},{"name":"pinned","description":"Shortcut to `this.message.pinned`","type":[[["boolean"]]],"meta":{"line":524,"file":"message.js","path":"src/commands"}},{"name":"tts","description":"Shortcut to `this.message.tts`","type":[[["boolean"]]],"meta":{"line":532,"file":"message.js","path":"src/commands"}},{"name":"nonce","description":"Shortcut to `this.message.nonce`","type":[[["string"]]],"meta":{"line":540,"file":"message.js","path":"src/commands"}},{"name":"system","description":"Shortcut to `this.message.system`","type":[[["boolean"]]],"meta":{"line":548,"file":"message.js","path":"src/commands"}},{"name":"embeds","description":"Shortcut to `this.message.embeds`","type":[[["Array",".<"],["MessageEmbed",">"]]],"meta":{"line":556,"file":"message.js","path":"src/commands"}},{"name":"attachments","description":"Shortcut to `this.message.attachments`","type":[[["Collection",".<"],["string",", "],["MessageAttachment",">"]]],"meta":{"line":564,"file":"message.js","path":"src/commands"}},{"name":"createdTimestamp","description":"Shortcut to `this.message.createdTimestamp`","type":[[["number"]]],"meta":{"line":572,"file":"message.js","path":"src/commands"}},{"name":"createdAt","description":"Shortcut to `this.message.createdAt`","type":[[["Date"]]],"meta":{"line":580,"file":"message.js","path":"src/commands"}},{"name":"editedTimestamp","description":"Shortcut to `this.message.editedTimestamp`","type":[[["number"]]],"meta":{"line":588,"file":"message.js","path":"src/commands"}},{"name":"editedAt","description":"Shortcut to `this.message.editedAt`","type":[[["Date"]]],"meta":{"line":596,"file":"message.js","path":"src/commands"}},{"name":"mentions","description":"Shortcut to `this.message.mentions`","type":[[["MentionsObject"]]],"meta":{"line":604,"file":"message.js","path":"src/commands"}},{"name":"cleanContent","description":"Shortcut to `this.message.cleanContent`","type":[[["string"]]],"meta":{"line":612,"file":"message.js","path":"src/commands"}},{"name":"edits","description":"Shortcut to `this.message.edits`","type":[[["Array",".<"],["Message",">"]]],"meta":{"line":620,"file":"message.js","path":"src/commands"}},{"name":"editable","description":"Shortcut to `this.message.editable`","type":[[["boolean"]]],"meta":{"line":628,"file":"message.js","path":"src/commands"}},{"name":"deletable","description":"Shortcut to `this.message.deletable`","type":[[["boolean"]]],"meta":{"line":636,"file":"message.js","path":"src/commands"}},{"name":"pinnable","description":"Shortcut to `this.message.pinnable`","type":[[["boolean"]]],"meta":{"line":644,"file":"message.js","path":"src/commands"}},{"name":"SilentCancel","description":"Silently cancels a running command","scope":"static","type":[[["Symbol"]]],"meta":{"line":706,"file":"message.js","path":"src/commands"}},{"name":"FormatCancel","description":"Cancels a running command with a format error","scope":"static","type":[[["Symbol"]]],"meta":{"line":712,"file":"message.js","path":"src/commands"}}],"methods":[{"name":"usage","description":"Creates a usage string for the message's command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.message.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":76,"file":"message.js","path":"src/commands"}},{"name":"anyUsage","description":"Creates a usage string for any command","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.message.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":92,"file":"message.js","path":"src/commands"}},{"name":"parseArgs","description":"Parses the argString into usable arguments, based on the argsType and argsCount of the command","see":["{@link Command#run}"],"returns":[[["string"]],[["Array",".<"],["string",">"]]],"meta":{"line":105,"file":"message.js","path":"src/commands"}},{"name":"obtainArgs","description":"Obtains the values for the command's arguments","returns":[[["Array",".<"],["*",">"]],[["symbol"]]],"meta":{"line":120,"file":"message.js","path":"src/commands"}},{"name":"run","description":"Runs the command","returns":[[["Promise",".<(?"],["Message","|?"],["Array",".<"],["Message",">)>"]]],"meta":{"line":142,"file":"message.js","path":"src/commands"}},{"name":"throttleCommand","description":"Throttles the command if necessary (the owner is excluded)","access":"private","returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":237,"file":"message.js","path":"src/commands"}},{"name":"respond","description":"Responds to the command message","access":"private","params":[{"name":"options","description":"Options for the response","type":[[["Object"]]]}],"returns":[[["Message"]],[["Array",".<"],["Message",">"]]],"meta":{"line":263,"file":"message.js","path":"src/commands"}},{"name":"editResponse","description":"Edits a response to the command message","access":"private","params":[{"name":"response","description":"The response message(s) to edit","type":[[["Message"]],[["Array",".<"],["Message",">"]]]},{"name":"options","description":"Options for the response","type":[[["Object"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":309,"file":"message.js","path":"src/commands"}},{"name":"editCurrentResponse","description":"Edits the current response","access":"private","params":[{"name":"id","description":"The ID of the channel the response is in (\"DM\" for direct messages)","type":[[["string"]]]},{"name":"options","description":"Options for the response","type":[[["Object"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":347,"file":"message.js","path":"src/commands"}},{"name":"say","description":"Responds with a plain message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":360,"file":"message.js","path":"src/commands"}},{"name":"reply","description":"Responds with a reply message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":370,"file":"message.js","path":"src/commands"}},{"name":"direct","description":"Responds with a direct message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":380,"file":"message.js","path":"src/commands"}},{"name":"code","description":"Responds with a code message","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","type":[[["MessageOptions"]]]}],"returns":[[["Promise",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]],"meta":{"line":391,"file":"message.js","path":"src/commands"}},{"name":"finalize","description":"Finalizes the command message by setting the responses and deleting any remaining prior ones","access":"private","params":[{"name":"responses","description":"Responses to the message","nullable":true,"type":[[["Array",".<("],["Message","|"],["Array",".<"],["Message",">)>"]]]}],"meta":{"line":400,"file":"message.js","path":"src/commands"}},{"name":"deleteRemainingResponses","description":"Deletes any prior responses that haven't been updated","access":"private","meta":{"line":427,"file":"message.js","path":"src/commands"}},{"name":"isMentioned","description":"Shortcut to `this.message.isMentioned(data)`","params":[{"name":"data","description":"A guild channel, user, or a role, or the ID of any of these","type":[[["GuildChannel"]],[["User"]],[["Role"]],[["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":653,"file":"message.js","path":"src/commands"}},{"name":"edit","description":"Shortcut to `this.message.edit(content)`","params":[{"name":"content","description":"New content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":662,"file":"message.js","path":"src/commands"}},{"name":"editCode","description":"Shortcut to `this.message.editCode(content)`","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"New content for the message","type":[[["StringResolvable"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":672,"file":"message.js","path":"src/commands"}},{"name":"pin","description":"Shortcut to `this.message.pin()`","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":680,"file":"message.js","path":"src/commands"}},{"name":"unpin","description":"Shortcut to `this.message.unpin()`","returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":688,"file":"message.js","path":"src/commands"}},{"name":"delete","description":"Shortcut to `this.message.delete()`","params":[{"name":"timeout","description":"How long to wait to delete the message in milliseconds","optional":true,"default":0,"type":[[["number"]]]}],"returns":[[["Promise",".<"],["Message",">"]]],"meta":{"line":697,"file":"message.js","path":"src/commands"}},{"name":"parseArgs","description":"Parses an argument string into an array of arguments","scope":"static","params":[{"name":"argString","description":"The argument string to parse","type":[[["string"]]]},{"name":"argCount","description":"The number of arguments to extract from the string","optional":true,"type":[[["number"]]]},{"name":"allowSingleQuote","description":"Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Array",".<"],["string",">"]]],"description":"The array of arguments"},"meta":{"line":449,"file":"message.js","path":"src/commands"}}],"meta":{"line":8,"file":"message.js","path":"src/commands"}},{"name":"CommandFormatError","description":"Has a descriptive message for a command not having proper format","extends":["FriendlyError"],"construct":{"name":"CommandFormatError","params":[{"name":"msg","description":"The command message the error is for","type":[[["CommandMessage"]]]}]},"meta":{"line":7,"file":"command-format.js","path":"src/errors"}},{"name":"FriendlyError","description":"Has a message that can be considered user-friendly","extends":["Error"],"construct":{"name":"FriendlyError","params":[{"name":"message","description":"The error message","type":[[["string"]]]}]},"meta":{"line":5,"file":"friendly.js","path":"src/errors"}},{"name":"GuildExtension","description":"Contains additional methods and properties that are added to the discord.js Guild class","props":[{"name":"commandPrefix","description":"Command prefix in the guild","type":[[["string"]]],"meta":{"line":11,"file":"guild.js","path":"src/extensions"}},{"name":"settings","description":"Shortcut to use setting provider methods for this guild","readonly":true,"type":[[["GuildSettingsHelper"]]],"meta":{"line":32,"file":"guild.js","path":"src/extensions"}}],"methods":[{"name":"setCommandEnabled","description":"Sets whether a command is enabled in the guild","params":[{"name":"command","description":"Command to set status of","type":[[["CommandResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled","type":[[["boolean"]]]}],"meta":{"line":42,"file":"guild.js","path":"src/extensions"}},{"name":"isCommandEnabled","description":"Checks whether a command is enabled in the guild (does not take the command's group status into account)","params":[{"name":"command","description":"Command to check status of","type":[[["CommandResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":64,"file":"guild.js","path":"src/extensions"}},{"name":"setGroupEnabled","description":"Sets whether a command group is enabled in the guild","params":[{"name":"group","description":"Command to set status of","type":[[["CommandGroupResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled","type":[[["boolean"]]]}],"meta":{"line":78,"file":"guild.js","path":"src/extensions"}},{"name":"isGroupEnabled","description":"Checks whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to check status of","type":[[["CommandGroupResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":100,"file":"guild.js","path":"src/extensions"}},{"name":"commandUsage","description":"Creates a command usage string using the guild's prefix","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":113,"file":"guild.js","path":"src/extensions"}},{"name":"applyToClass","description":"Applies the interface to a class prototype","scope":"static","access":"private","params":[{"name":"target","description":"The constructor function to apply to the prototype of","type":[[["function"]]]}],"meta":{"line":122,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":5,"file":"guild.js","path":"src/extensions"}},{"name":"SettingProvider","description":"Loads and stores settings associated with guilds","abstract":true,"methods":[{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","abstract":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","abstract":true,"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","abstract":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}},{"name":"getGuildID","description":"Obtains the ID of the provided guild, or throws an error if it isn't valid","scope":"static","params":[{"name":"guild","description":"Guild to get the ID of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["string"]]],"description":"ID of the guild, or 'global'"},"meta":{"line":71,"file":"base.js","path":"src/providers"}}],"meta":{"line":8,"file":"base.js","path":"src/providers"}},{"name":"GuildSettingsHelper","description":"Helper class to use {@link SettingProvider} methods for a specific Guild","construct":{"name":"GuildSettingsHelper","params":[{"name":"client","description":"Client to use the provider of","type":[[["CommandoClient"]]]},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["Guild"]]]}]},"props":[{"name":"client","description":"Client to use the provider of","type":[[["CommandoClient"]]],"meta":{"line":9,"file":"helper.js","path":"src/providers"}},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["Guild"]]],"meta":{"line":20,"file":"helper.js","path":"src/providers"}}],"methods":[{"name":"get","description":"Gets a setting in the guild","see":["{@link SettingProvider#get}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":30,"file":"helper.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for the guild","see":["{@link SettingProvider#set}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":42,"file":"helper.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from the guild","see":["{@link SettingProvider#remove}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":53,"file":"helper.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in the guild","see":["{@link SettingProvider#clear}"],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":63,"file":"helper.js","path":"src/providers"}}],"meta":{"line":2,"file":"helper.js","path":"src/providers"}},{"name":"SQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":["SettingProvider"],"construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"Database for the provider","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"Database that will be used for storing/retrieving settings","type":[[["SQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":37,"file":"sqlite.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":44,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":51,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":58,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":166,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":188,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["Guild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":205,"file":"sqlite.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise",".<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise",".<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":7,"file":"sqlite.js","path":"src/providers"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link CommandArgumentInfo#type})","type":[[["string"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link CommandArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value against the type","abstract":true,"params":[{"name":"value","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandMessage"]]]},{"name":"arg","description":"Argument the value obtained from","type":[[["CommandArgument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise",".<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":36,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value into a usable value","abstract":true,"params":[{"name":"value","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandMessage"]]]},{"name":"arg","description":"Argument the value obtained from","type":[[["CommandArgument"]]]}],"returns":{"types":[["*"],[["Promise",".<"],["*",">"]]],"description":"Usable value"},"meta":{"line":49,"file":"base.js","path":"src/types"}}],"meta":{"line":2,"file":"base.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"CommandoClientOptions","description":"Options for a CommandoClient","type":[[["ClientOptions"]]],"props":[{"name":"selfbot","description":"Whether the command dispatcher should be in selfbot mode","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"commandPrefix","description":"Default command prefix","optional":true,"default":"!","type":[[["string"]]]},{"name":"commandEditableDuration","description":"Time in seconds that command messages should be editable","optional":true,"default":30,"type":[[["number"]]]},{"name":"nonCommandEditable","description":"Whether messages without commands can be edited to a command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"unknownCommandResponse","description":"Whether the bot should respond to an unknown command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"owner","description":"ID of the bot owner's Discord user","optional":true,"type":[[["string"]]]},{"name":"invite","description":"Invite URL to the bot's support server","optional":true,"type":[[["string"]]]}],"meta":{"line":11,"file":"client.js","path":"src"}},{"name":"Inhibitor","description":"A function that can block the usage of a command - these functions are passed the command message that is\ntriggering the command. They should return `false` if the command should *not* be blocked. If the command *should*\nbe blocked, they should return one of the following:\n- A single string identifying the reason the command is blocked\n- An array of the above string as element 0, and a response promise or `null` as element 1","type":[[["function"]]],"meta":{"line":36,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroupResolvable","description":"A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID","type":[[["CommandGroup"]],[["string"]]],"meta":{"line":380,"file":"registry.js","path":"src"}},{"name":"CommandResolvable","description":"A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandMessage","type":[[["Command"]],[["string"]]],"meta":{"line":428,"file":"registry.js","path":"src"}},{"name":"CommandArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"type","description":"Type of the argument (must be the ID of one of the registered argument types)","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is 'integer' or 'float', this is the maximum value of the number.\nIf type is 'string', this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is 'integer' or 'float', this is the minimum value of the number.\nIf type is 'string', this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the argument optional - cannot be `null`)","optional":true,"type":[["*"]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument (see {@link ArgumentType#validate})","optional":true,"type":[[["function"]]]},{"name":"parse","description":"Parser function for the argument (see {@link ArgumentType#parse})","optional":true,"type":[[["function"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":6,"file":"argument.js","path":"src/commands"}},{"name":"ThrottlingOptions","type":[[["Object"]]],"props":[{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]},{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]}],"meta":{"line":6,"file":"base.js","path":"src/commands"}},{"name":"CommandInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (must be lowercase)","type":[[["string"]]]},{"name":"aliases","description":"Alternative names for the command (all must be lowercase)","optional":true,"type":[[["Array",".<"],["string",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The ID of the group the command belongs to (must be lowercase)","type":[[["string"]]]},{"name":"memberName","description":"The member name of the command in the group (must be lowercase)","type":[[["string"]]]},{"name":"description","description":"A short description of the command","type":[[["string"]]]},{"name":"format","description":"The command usage format string","optional":true,"default":"name","type":[[["string"]]]},{"name":"details","description":"A detailed description of the command and its functionality","optional":true,"type":[[["string"]]]},{"name":"examples","description":"Usage examples of the command","optional":true,"type":[[["Array",".<"],["string",">"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array",".<"],["CommandArgumentInfo",">"]]]},{"name":"argsPromptLimit","description":"Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\nin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array",".<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":12,"file":"base.js","path":"src/commands"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":25,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":29,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":33,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":37,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":41,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":45,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":49,"file":"index.js","path":"src"}},{"name":"MentionsObject","see":["{@link https://discord.js.org/#/docs/main/master/class/Message?scrollTo=mentions}"],"meta":{"line":53,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":57,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":61,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":65,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":69,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":73,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":77,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":81,"file":"index.js","path":"src"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":8,"file":"sqlite.js","path":"src/providers"}},{"name":"SQLiteStatement","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":60,"file":"sqlite.js","path":"src/providers"}}]},
  // Commando/stable.json
  {"meta":{"generator":"0.9.0","format":20,"date":1569180085811},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/discordjs/Commando.svg)](https://david-dm.org/discordjs/Commando)\n[![Build status](https://travis-ci.org/discordjs/Commando.svg)](https://travis-ci.org/discordjs/Commando)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/discordjs/discord.js).\nIt is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Type system with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t\t- User-defined custom types\n\t\t- Union types\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 8.6.0 or newer is required.**  \n`npm install discord.js-commando`\n","path":"docs/general/welcome.md"},"first-steps":{"name":"First steps","type":"md","content":"# First steps\nThe first thing you need to do to use Commando is ensure you're creating a [CommandoClient](https://discord.js.org/#/docs/commando/master/class/CommandoClient)\nrather than the regular discord.js [Client](https://discord.js.org/#/docs/main/master/class/Client).\nA CommandoClient is just an extension of the base Client, so all options, properties, methods, and events on Client are also on CommandoClient.\n\nYou should provide the `owner` option to the constructor, which is an option specific to CommandoClient, and should be set to the ID of your Discord user.\nThis will give you full access to control everything about the bot, in any guild.\n\n```javascript\nconst Commando = require('discord.js-commando');\n\nconst client = new Commando.Client({\n\towner: '1234567890'\n});\n```\n\nThen, to make use of the command framework (what else would you be doing with Commando?), you need to register your command groups, commands, and argument types,\nin addition to any of the built-in stuff that you want make use of. This will look something like this:\n\n```javascript\nconst path = require('path');\n\nclient.registry\n\t// Registers your custom command groups\n\t.registerGroups([\n\t\t['fun', 'Fun commands'],\n\t\t['some', 'Some group'],\n\t\t['other', 'Some other group']\n\t])\n\n\t// Registers all built-in groups, commands, and argument types\n\t.registerDefaults()\n\n\t// Registers all of your commands in the ./commands/ directory\n\t.registerCommandsIn(path.join(__dirname, 'commands'));\n```\n\nCommando has built-in command prefix configuration per-guild, as well as enabling and disabling commands per-guild.\nIn order for this to persist across restarts, you should use a [SettingProvider](https://discord.js.org/#/docs/commando/master/class/SettingProvider).\nThere is a built-in SQLiteProvider that comes with Commando, which stores all settings in an SQLite3 database.\nTo use it, install the `sqlite` module with NPM (`npm install --save sqlite`). Then, set the provider on the client:\n\n```javascript\nconst sqlite = require('sqlite');\n\nclient.setProvider(\n\tsqlite.open(path.join(__dirname, 'settings.sqlite3')).then(db => new Commando.SQLiteProvider(db))\n).catch(console.error);\n```\n\nFinally, you must log in, just as if you were using a regular Client.\n\n```javascript\nclient.login('token goes here');\n```\n\nThere is an extremely simple example bot used to test Commando, of which you can view the source [here](https://github.com/discordjs/Commando/tree/master/test).\n","path":"docs/general/first-steps.md"}}},"commands":{"name":"Commands","files":{"builtins":{"name":"Built-in commands","type":"md","content":"# Built-in commands\nCommando has built-in commands that should be useful for just about any bot.\n\n## Utility (util)\n### help (util:help)\nIf no arguments are specified, the command displays a list of all commands available in the current context.\nIn order for a command to be displayed, it must be enabled in the guild (or global), and the user must have permission to use it.\nPassing the `all` argument will list all commands, regardless of context.\nPassing anything else will search for any commands that match, and display detailed information if only one is found.\n\n### ping (util:ping)\nThe ping command will send a message, then edit it to contain the amount of time it took.\nIt also displays the client's heartbeat ping.\n\n### prefix (util:prefix)\nThis command, if not provided with any arguments, will display the current command prefix, and how to use commands.\nIf the command is used in a guild channel and an argument is specified, it will set the command prefix for the guild if the user is a guild admin, or the bot owner,\nIf the command is used in a DM and an argument is specified, it will set the global default command prefix if the user is the bot owner.\n\n### eval (util:eval)\nThe eval command will allow the bot owner to evaluate any JavaScript code, and display its result.\nIt will automatically hide the bot's token/email/password in the output.\nCaution should still be taken, however, as you could potentially break your running bot with it.\n\nIn the script, `this` will refer to the Command instance.\nThere are several shortcut variables and helpers that are also available:\n\n| Name             | Type     | Description                                                                        |\n|------------------|----------|------------------------------------------------------------------------------------|\n| `message`, `msg` | Variable | The message that triggered the command                                             |\n| `client`         | Variable | Shortcut to `this.client`                                                          |\n| `objects`        | Variable | Shortcut to `this.client.registry.evalObjects`                                     |\n| `lastResult`     | Variable | Shortcut to `this.lastResult` (the previous `eval` result value)                   |\n| `doReply(val)`   | Function | Sends another detailed message with any value to display. Useful for callbacks.    |\n\n## Command state (commands)\n### enable (commands:enable)\nEnables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, enables the command/group globally by default if the user is the bot owner.\n\n### disable (commands:disable)\nDisables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, disables the command/group globally by default if the user is the bot owner.\n\n### reload (commands:reload)\nReloads a command, or all commands in a group, if the user is the bot owner.\n\n### load (commands:load)\nLoads a command if the user is the bot owner. The command must be specified as the full name (`group:memberName`).\nBuilt-in commands cannot be loaded.\n\n### unload (commands:unload)\nUnloads a command if the user is the bot owner.\nBuilt-in commands cannot be unloaded.\n\n### groups (commands:groups)\nLists all command groups if the user is an admin of the current guild, or the bot owner.\n","path":"docs/commands/builtins.md"}}}},"classes":[{"name":"CommandoClient","description":"Discord.js Client with a command framework","extends":[[["Client"]]],"construct":{"name":"CommandoClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["CommandoClientOptions"]]]}]},"props":[{"name":"registry","description":"The client's command registry","type":[[["CommandoRegistry"]]],"meta":{"line":35,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"The client's command dispatcher","type":[[["CommandDispatcher"]]],"meta":{"line":41,"file":"client.js","path":"src"}},{"name":"provider","description":"The client's setting provider","nullable":true,"type":[[["SettingProvider"]]],"meta":{"line":47,"file":"client.js","path":"src"}},{"name":"settings","description":"Shortcut to use setting provider methods for the global settings","type":[[["GuildSettingsHelper"]]],"meta":{"line":53,"file":"client.js","path":"src"}},{"name":"_commandPrefix","description":"Internal global command prefix, controlled by the {@link CommandoClient#commandPrefix} getter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":60,"file":"client.js","path":"src"}},{"name":"commandPrefix","description":"Global command prefix. An empty string indicates that there is no default prefix, and only mentions will be used.\nSetting to `null` means that the default prefix from {@link CommandoClient#options} will be used instead.","type":[[["string"]]],"meta":{"line":95,"file":"client.js","path":"src"}},{"name":"owners","description":"Owners of the bot, set by the {@link CommandoClientOptions#owner} option\n<info>If you simply need to check if a user is an owner of the bot, please instead use\n{@link CommandoClient#isOwner}.</info>","readonly":true,"nullable":true,"type":[[["Array","<"],["User",">"]]],"meta":{"line":112,"file":"client.js","path":"src"}}],"methods":[{"name":"isOwner","description":"Checks whether a user is an owner of the bot (in {@link CommandoClientOptions#owner})","params":[{"name":"user","description":"User to check for ownership","type":[[["UserResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":125,"file":"client.js","path":"src"}},{"name":"setProvider","description":"Sets the setting provider to use, and initialises it once the client is ready","params":[{"name":"provider","description":"Provider to use","type":[[["SettingProvider"]],[["Promise","<"],["SettingProvider",">"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":140,"file":"client.js","path":"src"}}],"events":[{"name":"providerReady","description":"Emitted upon the client's provider finishing initialisation","params":[{"name":"provider","description":"Provider that was initialised","type":[[["SettingProvider"]]]}],"meta":{"line":159,"file":"client.js","path":"src"}},{"name":"unknownCommand","description":"Emitted when an unknown command is triggered","params":[{"name":"message","description":"Command message that triggered the command","type":[[["CommandoMessage"]]]}],"meta":{"line":134,"file":"dispatcher.js","path":"src"}},{"name":"groupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the group was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":74,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered","params":[{"name":"command","description":"Command that was registered","type":[[["Command"]]]},{"name":"registry","description":"Registry that the command was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":149,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":223,"file":"registry.js","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","params":[{"name":"newCommand","description":"New command","type":[[["Command"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":402,"file":"registry.js","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","params":[{"name":"command","description":"Command that was unregistered","type":[[["Command"]]]}],"meta":{"line":421,"file":"registry.js","path":"src"}},{"name":"commandPrefixChange","description":"Emitted whenever a guild's command prefix is changed","params":[{"name":"guild","description":"Guild that the prefix was changed in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"prefix","description":"New command prefix (null for default)","nullable":true,"type":[[["string"]]]}],"meta":{"line":43,"file":"guild.js","path":"src/extensions"}},{"name":"commandStatusChange","description":"Emitted whenever a command is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the command was enabled/disabled in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command that was enabled/disabled","type":[[["Command"]]]},{"name":"enabled","description":"Whether the command is enabled","type":[[["boolean"]]]}],"meta":{"line":71,"file":"guild.js","path":"src/extensions"}},{"name":"groupStatusChange","description":"Emitted whenever a command group is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the group was enabled/disabled in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group that was enabled/disabled","type":[[["CommandGroup"]]]},{"name":"enabled","description":"Whether the group is enabled","type":[[["boolean"]]]}],"meta":{"line":114,"file":"guild.js","path":"src/extensions"}},{"name":"commandBlock","description":"Emitted when a command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandoMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\n- guildOnly: none\n- nsfw: none\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\n- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"meta":{"line":136,"file":"message.js","path":"src/extensions"}},{"name":"commandCancel","description":"Emitted when a command is cancelled (either by typing 'cancel' or not responding in time)","params":[{"name":"command","description":"Command that was cancelled","type":[[["Command"]]]},{"name":"reason","description":"Reason for the command being cancelled","type":[[["string"]]]},{"name":"message","description":"Command message that the command ran from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":200,"file":"message.js","path":"src/extensions"}},{"name":"commandRun","description":"Emitted when running a command","params":[{"name":"command","description":"Command that is being run","type":[[["Command"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":223,"file":"message.js","path":"src/extensions"}},{"name":"commandError","description":"Emitted when a command produces an error while running","params":[{"name":"command","description":"Command that produced an error","type":[[["Command"]]]},{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":245,"file":"message.js","path":"src/extensions"}}],"meta":{"line":24,"file":"client.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandoRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":10,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandoRegistry"]]],"meta":{"line":22,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set","<"],["function","()>"]]],"meta":{"line":28,"file":"dispatcher.js","path":"src"}},{"name":"_commandPatterns","description":"Map object of {@link RegExp}s that match command messages, mapped by string prefix","access":"private","type":[[["Object"]]],"meta":{"line":35,"file":"dispatcher.js","path":"src"}},{"name":"_results","description":"Old command message results, mapped by original message ID","access":"private","type":[[["Map","<"],["string",", "],["CommandoMessage",">"]]],"meta":{"line":42,"file":"dispatcher.js","path":"src"}},{"name":"_awaiting","description":"Tuples in string form of user ID and channel ID that are currently awaiting messages from a user in a channel","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":49,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\n  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\n});","client.dispatcher.addInhibitor(msg => {\n\tif(!coolUsers.has(msg.author.id)) return { reason: 'cool', response: msg.reply('You\\'re not cool enough!') };\n});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":81,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":93,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":105,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":172,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["Inhibition"]]],"nullable":true},"meta":{"line":194,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandoMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandoMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"meta":{"line":226,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":245,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]},{"name":"prefixless","description":"Whether the match is happening for a prefixless usage","default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":272,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"prefix","description":"Prefix to build the pattern for","nullable":true,"type":[[["string"]]]}],"returns":[[["RegExp"]]],"meta":{"line":289,"file":"dispatcher.js","path":"src"}}],"meta":{"line":9,"file":"dispatcher.js","path":"src"}},{"name":"CommandoRegistry","description":"Handles registration and searching of commands and groups","construct":{"name":"CommandoRegistry","params":[{"name":"client","description":"Client to use","optional":true,"type":[[["CommandoClient"]]]}]},"props":[{"name":"client","description":"The client this registry is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"registry.js","path":"src"}},{"name":"commands","description":"Registered commands, mapped by their name","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":24,"file":"registry.js","path":"src"}},{"name":"groups","description":"Registered command groups, mapped by their ID","type":[[["Collection","<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":30,"file":"registry.js","path":"src"}},{"name":"types","description":"Registered argument types, mapped by their ID","type":[[["Collection","<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":36,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Fully resolved path to the bot's commands directory","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"registry.js","path":"src"}},{"name":"unknownCommand","description":"Command to run when an unknown command is used","nullable":true,"type":[[["Command"]]],"meta":{"line":48,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Registers a single group","see":["{@link CommandoRegistry#registerGroups}"],"params":[{"name":"group","description":"A CommandGroup instance, a constructor, or the group ID","type":[[["CommandGroup"]],[["function"]],[["Object"]],[["string"]]]},{"name":"name","description":"Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be guarded (if the first argument is the group ID)","optional":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":59,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Registers multiple groups","examples":["registry.registerGroups([\n\t['fun', 'Fun'],\n\t['mod', 'Moderation']\n]);","registry.registerGroups([\n\t{ id: 'fun', name: 'Fun' },\n\t{ id: 'mod', name: 'Moderation' }\n]);"],"params":[{"name":"groups","description":"An array of CommandGroup instances,\nconstructors, plain objects (with ID, name, and guarded properties),\nor arrays of {@link CommandoRegistry#registerGroup} parameters","type":[[["Array","<"],["CommandGroup",">"]],[["Array","<"],["function","()>"]],[["Array","<"],["Object",">"]],[["Array","<"],["Array","<"],["string",">>"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":104,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["{@link CommandoRegistry#registerCommands}"],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["Command"]],[["function"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":119,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["Command",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":167,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","examples":["const path = require('path');\nregistry.registerCommandsIn(path.join(__dirname, 'commands'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":189,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link CommandoRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":209,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array","<"],["ArgumentType",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":241,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":260,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands. This is equivalent to:\n```js\nregistry.registerDefaultTypes()\n\t.registerDefaultGroups()\n\t.registerDefaultCommands();\n```","returns":[[["CommandoRegistry"]]],"meta":{"line":276,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups (\"util\" and \"commands\")","returns":[[["CommandoRegistry"]]],"meta":{"line":287,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"commands","description":"Object specifying which commands to register","optional":true,"type":[[["Object"]]]},{"name":"commands.help","description":"Whether to register the built-in help command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.prefix","description":"Whether to register the built-in prefix command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.eval","description":"Whether to register the built-in eval command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.ping","description":"Whether to register the built-in ping command (requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.unknownCommand","description":"Whether to register the built-in unknown command\n(requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.commandState","description":"Whether to register the built-in command state commands\n(enable, disable, load, unload, reload, list groups - requires \"commands\" group, \"command\" type, and \"group\" type)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":310,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry","params":[{"name":"types","description":"Object specifying which types to register","optional":true,"type":[[["Object"]]]},{"name":"types.string","description":"Whether to register the built-in string type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.integer","description":"Whether to register the built-in integer type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.float","description":"Whether to register the built-in float type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.boolean","description":"Whether to register the built-in boolean type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.user","description":"Whether to register the built-in user type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.member","description":"Whether to register the built-in member type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.role","description":"Whether to register the built-in role type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.channel","description":"Whether to register the built-in channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.textChannel","description":"Whether to register the built-in text-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.voiceChannel","description":"Whether to register the built-in voice-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.categoryChannel","description":"Whether to register the built-in category-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.message","description":"Whether to register the built-in message type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.customEmoji","description":"Whether to register the built-in custom-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.command","description":"Whether to register the built-in command type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.group","description":"Whether to register the built-in group type","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":353,"file":"registry.js","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command (does not support changing name, group, or memberName)","params":[{"name":"command","description":"New command","type":[[["Command"]],[["function"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":383,"file":"registry.js","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command","params":[{"name":"command","description":"Command to unregister","type":[[["Command"]]]}],"meta":{"line":416,"file":"registry.js","path":"src"}},{"name":"findGroups","description":"Finds all groups that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["CommandGroup",">"]]],"description":"All groups that are found"},"meta":{"line":436,"file":"registry.js","path":"src"}},{"name":"resolveGroup","description":"Resolves a CommandGroupResolvable to a CommandGroup object","params":[{"name":"group","description":"The group to resolve","type":[[["CommandGroupResolvable"]]]}],"returns":{"types":[[["CommandGroup"]]],"description":"The resolved CommandGroup"},"meta":{"line":465,"file":"registry.js","path":"src"}},{"name":"findCommands","description":"Finds all commands that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"message","description":"The message to check usability against","optional":true,"default":null,"type":[[["Message"]]]}],"returns":{"types":[[["Array","<"],["Command",">"]]],"description":"All commands that are found"},"meta":{"line":481,"file":"registry.js","path":"src"}},{"name":"resolveCommand","description":"Resolves a CommandResolvable to a Command object","params":[{"name":"command","description":"The command to resolve","type":[[["CommandResolvable"]]]}],"returns":{"types":[[["Command"]]],"description":"The resolved Command"},"meta":{"line":518,"file":"registry.js","path":"src"}},{"name":"resolveCommandPath","description":"Resolves a command file path from a command's group ID and memberName","params":[{"name":"group","description":"ID of the command's group","type":[[["string"]]]},{"name":"memberName","description":"Member name of the command","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":534,"file":"registry.js","path":"src"}}],"meta":{"line":11,"file":"registry.js","path":"src"}},{"name":"Argument","description":"A fancy argument","construct":{"name":"Argument","params":[{"name":"client","description":"Client the argument is for","type":[[["CommandoClient"]]]},{"name":"info","description":"Information for the command argument","type":[[["ArgumentInfo"]]]}]},"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":45,"file":"argument.js","path":"src/commands"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":51,"file":"argument.js","path":"src/commands"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":57,"file":"argument.js","path":"src/commands"}},{"name":"error","description":"Error message for when a value is invalid","nullable":true,"type":[[["string"]]],"meta":{"line":63,"file":"argument.js","path":"src/commands"}},{"name":"type","description":"Type of the argument","nullable":true,"type":[[["ArgumentType"]]],"meta":{"line":69,"file":"argument.js","path":"src/commands"}},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":76,"file":"argument.js","path":"src/commands"}},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":83,"file":"argument.js","path":"src/commands"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[[["ArgumentDefault"]]],"meta":{"line":89,"file":"argument.js","path":"src/commands"}},{"name":"oneOf","description":"Values the user can choose from\nIf type is `string`, this will be case-insensitive\nIf type is `channel`, `member`, `role`, or `user`, this will be the IDs.","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":97,"file":"argument.js","path":"src/commands"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":103,"file":"argument.js","path":"src/commands"}},{"name":"validator","description":"Validator function for validating a value for the argument","see":["{@link ArgumentType#validate}"],"nullable":true,"type":[[["function"]]],"meta":{"line":110,"file":"argument.js","path":"src/commands"}},{"name":"parser","description":"Parser function for parsing a value for the argument","see":["{@link ArgumentType#parse}"],"nullable":true,"type":[[["function"]]],"meta":{"line":117,"file":"argument.js","path":"src/commands"}},{"name":"emptyChecker","description":"Function to check whether a raw value is considered empty","see":["{@link ArgumentType#isEmpty}"],"nullable":true,"type":[[["function"]]],"meta":{"line":124,"file":"argument.js","path":"src/commands"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":130,"file":"argument.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"val","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":152,"file":"argument.js","path":"src/commands"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","access":"private","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"vals","description":"Pre-provided values for the argument","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":239,"file":"argument.js","path":"src/commands"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"val","description":"Value to check","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]}],"returns":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"meta":{"line":351,"file":"argument.js","path":"src/commands"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]}],"returns":[["*"],[["Promise","<"],["*",">"]]],"meta":{"line":364,"file":"argument.js","path":"src/commands"}},{"name":"isEmpty","description":"Checks whether a value for the argument is considered to be empty","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":375,"file":"argument.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["ArgumentInfo"]]]}],"meta":{"line":388,"file":"argument.js","path":"src/commands"}},{"name":"determineType","description":"Gets the argument type to use from an ID","scope":"static","access":"private","params":[{"name":"client","description":"Client to use the registry of","type":[[["CommandoClient"]]]},{"name":"id","description":"ID of the type to use","type":[[["string"]]]}],"returns":{"types":[[["ArgumentType"]]],"nullable":true},"meta":{"line":423,"file":"argument.js","path":"src/commands"}}],"meta":{"line":38,"file":"argument.js","path":"src/commands"}},{"name":"Command","description":"A command that can be run in a client","construct":{"name":"Command","params":[{"name":"client","description":"The client the command is for","type":[[["CommandoClient"]]]},{"name":"info","description":"The command information","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"Client that this command is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":62,"file":"base.js","path":"src/commands"}},{"name":"name","description":"Name of this command","type":[[["string"]]],"meta":{"line":74,"file":"base.js","path":"src/commands"}},{"name":"aliases","description":"Aliases for this command","type":[[["Array","<"],["string",">"]]],"meta":{"line":80,"file":"base.js","path":"src/commands"}},{"name":"groupID","description":"ID of the group the command belongs to","type":[[["string"]]],"meta":{"line":92,"file":"base.js","path":"src/commands"}},{"name":"group","description":"The group the command belongs to, assigned upon registration","nullable":true,"type":[[["CommandGroup"]]],"meta":{"line":98,"file":"base.js","path":"src/commands"}},{"name":"memberName","description":"Name of the command within the group","type":[[["string"]]],"meta":{"line":104,"file":"base.js","path":"src/commands"}},{"name":"description","description":"Short description of the command","type":[[["string"]]],"meta":{"line":110,"file":"base.js","path":"src/commands"}},{"name":"format","description":"Usage format string of the command","type":[[["string"]]],"meta":{"line":116,"file":"base.js","path":"src/commands"}},{"name":"details","description":"Long description of the command","nullable":true,"type":[[["string"]]],"meta":{"line":122,"file":"base.js","path":"src/commands"}},{"name":"examples","description":"Example usage strings","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":128,"file":"base.js","path":"src/commands"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":134,"file":"base.js","path":"src/commands"}},{"name":"ownerOnly","description":"Whether the command can only be used by an owner","type":[[["boolean"]]],"meta":{"line":140,"file":"base.js","path":"src/commands"}},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":146,"file":"base.js","path":"src/commands"}},{"name":"userPermissions","description":"Permissions required by the user to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":152,"file":"base.js","path":"src/commands"}},{"name":"nsfw","description":"Whether the command can only be used in NSFW channels","type":[[["boolean"]]],"meta":{"line":158,"file":"base.js","path":"src/commands"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":164,"file":"base.js","path":"src/commands"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":170,"file":"base.js","path":"src/commands"}},{"name":"argsCollector","description":"The argument collector for the command","nullable":true,"type":[[["ArgumentCollector"]]],"meta":{"line":176,"file":"base.js","path":"src/commands"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":191,"file":"base.js","path":"src/commands"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":197,"file":"base.js","path":"src/commands"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":203,"file":"base.js","path":"src/commands"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array","<"],["RegExp",">"]]],"meta":{"line":209,"file":"base.js","path":"src/commands"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":215,"file":"base.js","path":"src/commands"}},{"name":"hidden","description":"Whether the command should be hidden from the help command","type":[[["boolean"]]],"meta":{"line":221,"file":"base.js","path":"src/commands"}},{"name":"unknown","description":"Whether the command will be run when an unknown command is used","type":[[["boolean"]]],"meta":{"line":227,"file":"base.js","path":"src/commands"}},{"name":"_globalEnabled","description":"Whether the command is enabled globally","access":"private","type":[[["boolean"]]],"meta":{"line":234,"file":"base.js","path":"src/commands"}},{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID","access":"private","type":[[["Map","<"],["string",", "],["Object",">"]]],"meta":{"line":241,"file":"base.js","path":"src/commands"}}],"methods":[{"name":"hasPermission","description":"Checks whether the user has permission to use the command","params":[{"name":"message","description":"The triggering command message","type":[[["CommandoMessage"]]]},{"name":"ownerOverride","description":"Whether the bot owner(s) will always have permission","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]],[["string"]]],"description":"Whether the user has permission, or an error message to respond with if they don't"},"meta":{"line":250,"file":"base.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message the command is being run for","type":[[["CommandoMessage"]]]},{"name":"args","description":"The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether or not the command is being run from a pattern match","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector (if applicable)","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"async":true,"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":287,"file":"base.js","path":"src/commands"}},{"name":"onBlock","description":"Called when the command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\n- guildOnly: none\n- nsfw: none\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\n- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":304,"file":"base.js","path":"src/commands"}},{"name":"onError","description":"Called when the command produces an error while running","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":345,"file":"base.js","path":"src/commands"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary (owners are excluded)","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":366,"file":"base.js","path":"src/commands"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":389,"file":"base.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"bypassGroup","description":"Whether to bypass checking the group's status","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":408,"file":"base.js","path":"src/commands"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":420,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":434,"file":"base.js","path":"src/commands"}},{"name":"reload","description":"Reloads the command","meta":{"line":441,"file":"base.js","path":"src/commands"}},{"name":"unload","description":"Unloads the command","meta":{"line":467,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":481,"file":"base.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["CommandInfo"]]]}],"meta":{"line":504,"file":"base.js","path":"src/commands"}}],"meta":{"line":59,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollector","description":"Obtains, validates, and prompts for argument values","construct":{"name":"ArgumentCollector","params":[{"name":"client","description":"Client the collector will use","type":[[["CommandoClient"]]]},{"name":"args","description":"Arguments for the collector","type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"Infinity","type":[[["number"]]]}]},"props":[{"name":"client","description":"Client this collector is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"collector.js","path":"src/commands"}},{"name":"args","description":"Arguments the collector handles","type":[[["Array","<"],["Argument",">"]]],"meta":{"line":27,"file":"collector.js","path":"src/commands"}},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","type":[[["number"]]],"meta":{"line":43,"file":"collector.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Obtains values for the arguments, prompting if necessary.","params":[{"name":"msg","description":"Message that the collector is being triggered by","type":[[["CommandoMessage"]]]},{"name":"provided","description":"Values that are already available","optional":true,"default":"[]","type":[[["Array","<"],["*",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"this.promptLimit","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentCollectorResult",">"]]],"meta":{"line":65,"file":"collector.js","path":"src/commands"}}],"meta":{"line":10,"file":"collector.js","path":"src/commands"}},{"name":"CommandGroup","description":"A group for commands. Whodathunkit?","construct":{"name":"CommandGroup","params":[{"name":"client","description":"The client the group is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":16,"file":"group.js","path":"src/commands"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":28,"file":"group.js","path":"src/commands"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":34,"file":"group.js","path":"src/commands"}},{"name":"commands","description":"The commands in this group (added upon their registration)","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":40,"file":"group.js","path":"src/commands"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":46,"file":"group.js","path":"src/commands"}}],"methods":[{"name":"setEnabledIn","description":"Enables or disables the group in a guild","params":[{"name":"guild","description":"Guild to enable/disable the group in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":56,"file":"group.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the group is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the group is enabled"},"meta":{"line":74,"file":"group.js","path":"src/commands"}},{"name":"reload","description":"Reloads all of the group's commands","meta":{"line":84,"file":"group.js","path":"src/commands"}}],"meta":{"line":11,"file":"group.js","path":"src/commands"}},{"name":"CommandFormatError","description":"Has a descriptive message for a command not having proper format","extends":[[["FriendlyError"]]],"construct":{"name":"CommandFormatError","params":[{"name":"msg","description":"The command message the error is for","type":[[["CommandoMessage"]]]}]},"meta":{"line":11,"file":"command-format.js","path":"src/errors"}},{"name":"FriendlyError","description":"Has a message that can be considered user-friendly","extends":[[["Error"]]],"construct":{"name":"FriendlyError","params":[{"name":"message","description":"The error message","type":[[["string"]]]}]},"meta":{"line":7,"file":"friendly.js","path":"src/errors"}},{"name":"CommandoGuild","description":"A fancier Guild for fancier people.","extends":[[["Guild"]]],"props":[{"name":"settings","description":"Shortcut to use setting provider methods for this guild","type":[[["GuildSettingsHelper"]]],"meta":{"line":18,"file":"guild.js","path":"src/extensions"}},{"name":"_commandPrefix","description":"Internal command prefix for the guild, controlled by the {@link CommandoGuild#commandPrefix}\ngetter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":20,"file":"guild.js","path":"src/extensions"}},{"name":"commandPrefix","description":"Command prefix in the guild. An empty string indicates that there is no prefix, and only mentions will be used.\nSetting to `null` means that the prefix from {@link CommandoClient#commandPrefix} will be used instead.","type":[[["string"]]],"meta":{"line":36,"file":"guild.js","path":"src/extensions"}},{"name":"_commandsEnabled","description":"Map object of internal command statuses, mapped by command name","access":"private","type":[[["Object"]]],"meta":{"line":68,"file":"guild.js","path":"src/extensions"}},{"name":"_groupsEnabled","description":"Internal map object of group statuses, mapped by group ID","access":"private","type":[[["Object"]]],"meta":{"line":111,"file":"guild.js","path":"src/extensions"}}],"methods":[{"name":"setCommandEnabled","description":"Sets whether a command is enabled in the guild","params":[{"name":"command","description":"Command to set status of","type":[[["CommandResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled","type":[[["boolean"]]]}],"meta":{"line":57,"file":"guild.js","path":"src/extensions"}},{"name":"isCommandEnabled","description":"Checks whether a command is enabled in the guild (does not take the command's group status into account)","params":[{"name":"command","description":"Command to check status of","type":[[["CommandResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":86,"file":"guild.js","path":"src/extensions"}},{"name":"setGroupEnabled","description":"Sets whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to set status of","type":[[["CommandGroupResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled","type":[[["boolean"]]]}],"meta":{"line":100,"file":"guild.js","path":"src/extensions"}},{"name":"isGroupEnabled","description":"Checks whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to check status of","type":[[["CommandGroupResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":129,"file":"guild.js","path":"src/extensions"}},{"name":"commandUsage","description":"Creates a command usage string using the guild's prefix","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":142,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":11,"file":"guild.js","path":"src/extensions"}},{"name":"CommandoMessage","description":"An extension of the base Discord.js Message class to add command-related functionality.","extends":[[["Message"]]],"props":[{"name":"isCommand","description":"Whether the message contains a command (even an unknown one)","type":[[["boolean"]]],"meta":{"line":20,"file":"message.js","path":"src/extensions"}},{"name":"command","description":"Command that the message triggers, if any","nullable":true,"type":[[["Command"]]],"meta":{"line":26,"file":"message.js","path":"src/extensions"}},{"name":"argString","description":"Argument string for the command","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"message.js","path":"src/extensions"}},{"name":"patternMatches","description":"Pattern matches (if from a pattern trigger)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":38,"file":"message.js","path":"src/extensions"}},{"name":"responses","description":"Response messages sent, mapped by channel ID (set by the dispatcher after running the command)","nullable":true,"type":[[["Object"]]],"meta":{"line":44,"file":"message.js","path":"src/extensions"}},{"name":"responsePositions","description":"Index of the current response that will be edited, mapped by channel ID","nullable":true,"type":[[["Object"]]],"meta":{"line":50,"file":"message.js","path":"src/extensions"}}],"methods":[{"name":"initCommand","description":"Initialises the message for a command","access":"private","params":[{"name":"command","description":"Command the message triggers","optional":true,"type":[[["Command"]]]},{"name":"argString","description":"Argument string for the command","optional":true,"type":[[["string"]]]},{"name":"patternMatches","description":"Command pattern matches (if from a pattern trigger)","optional":true,"nullable":true,"type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Message"]]],"description":"This message"},"meta":{"line":61,"file":"message.js","path":"src/extensions"}},{"name":"usage","description":"Creates a usage string for the message's command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":77,"file":"message.js","path":"src/extensions"}},{"name":"anyUsage","description":"Creates a usage string for any command","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":93,"file":"message.js","path":"src/extensions"}},{"name":"parseArgs","description":"Parses the argString into usable arguments, based on the argsType and argsCount of the command","see":["{@link Command#run}"],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":106,"file":"message.js","path":"src/extensions"}},{"name":"run","description":"Runs the command","async":true,"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":123,"file":"message.js","path":"src/extensions"}},{"name":"respond","description":"Responds to the command message","access":"private","params":[{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Message"]],[["Array","<"],["Message",">"]]],"meta":{"line":272,"file":"message.js","path":"src/extensions"}},{"name":"editResponse","description":"Edits a response to the command message","access":"private","params":[{"name":"response","description":"The response message(s) to edit","type":[[["Message"]],[["Array","<"],["Message",">"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":318,"file":"message.js","path":"src/extensions"}},{"name":"editCurrentResponse","description":"Edits the current response","access":"private","params":[{"name":"id","description":"The ID of the channel the response is in (\"DM\" for direct messages)","type":[[["string"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":356,"file":"message.js","path":"src/extensions"}},{"name":"say","description":"Responds with a plain message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":369,"file":"message.js","path":"src/extensions"}},{"name":"reply","description":"Responds with a reply message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":383,"file":"message.js","path":"src/extensions"}},{"name":"direct","description":"Responds with a direct message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":397,"file":"message.js","path":"src/extensions"}},{"name":"code","description":"Responds with a code message","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":412,"file":"message.js","path":"src/extensions"}},{"name":"embed","description":"Responds with an embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":429,"file":"message.js","path":"src/extensions"}},{"name":"replyEmbed","description":"Responds with a mention + embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":442,"file":"message.js","path":"src/extensions"}},{"name":"finalize","description":"Finalizes the command message by setting the responses and deleting any remaining prior ones","access":"private","params":[{"name":"responses","description":"Responses to the message","nullable":true,"type":[[["Array","<("],["Message","|"],["Array","<"],["Message",">)>"]]]}],"meta":{"line":453,"file":"message.js","path":"src/extensions"}},{"name":"deleteRemainingResponses","description":"Deletes any prior responses that haven't been updated","access":"private","meta":{"line":479,"file":"message.js","path":"src/extensions"}},{"name":"parseArgs","description":"Parses an argument string into an array of arguments","scope":"static","params":[{"name":"argString","description":"The argument string to parse","type":[[["string"]]]},{"name":"argCount","description":"The number of arguments to extract from the string","optional":true,"type":[[["number"]]]},{"name":"allowSingleQuote","description":"Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["string",">"]]],"description":"The array of arguments"},"meta":{"line":501,"file":"message.js","path":"src/extensions"}}],"meta":{"line":13,"file":"message.js","path":"src/extensions"}},{"name":"SettingProvider","description":"Loads and stores settings associated with guilds","abstract":true,"methods":[{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","abstract":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","abstract":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","abstract":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}},{"name":"getGuildID","description":"Obtains the ID of the provided guild, or throws an error if it isn't valid","scope":"static","params":[{"name":"guild","description":"Guild to get the ID of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["string"]]],"description":"ID of the guild, or 'global'"},"meta":{"line":71,"file":"base.js","path":"src/providers"}}],"meta":{"line":9,"file":"base.js","path":"src/providers"}},{"name":"GuildSettingsHelper","description":"Helper class to use {@link SettingProvider} methods for a specific Guild","access":"private","construct":{"name":"GuildSettingsHelper","params":[{"name":"client","description":"Client to use the provider of","type":[[["CommandoClient"]]]},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["CommandoGuild"]]]}]},"props":[{"name":"client","description":"Client to use the provider of","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":9,"file":"helper.js","path":"src/providers"}},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["CommandoGuild"]]],"meta":{"line":21,"file":"helper.js","path":"src/providers"}}],"methods":[{"name":"get","description":"Gets a setting in the guild","see":["{@link SettingProvider#get}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":31,"file":"helper.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for the guild","see":["{@link SettingProvider#set}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":43,"file":"helper.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from the guild","see":["{@link SettingProvider#remove}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":54,"file":"helper.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in the guild","see":["{@link SettingProvider#clear}"],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"helper.js","path":"src/providers"}}],"meta":{"line":8,"file":"helper.js","path":"src/providers"}},{"name":"SyncSQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":[[["SettingProvider"]]],"construct":{"name":"SyncSQLiteProvider","params":[{"name":"conn","description":"Database Connection for the provider","type":[[["SyncSQLiteDatabase"]]]}]},"props":[{"name":"conn","description":"Database that will be used for storing/retrieving settings","type":[[["SyncSQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":25,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":38,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":45,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SyncSQLiteStatement"]]],"meta":{"line":52,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SyncSQLiteStatement"]]],"meta":{"line":59,"file":"sqlite-sync.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":167,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":189,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a command group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":206,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"meta":{"line":222,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":16,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"SQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":[[["SettingProvider"]]],"construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"Database for the provider","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"Database that will be used for storing/retrieving settings","type":[[["SQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":25,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":38,"file":"sqlite.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":45,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":52,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":59,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":177,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":199,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a command group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":216,"file":"sqlite.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"meta":{"line":232,"file":"sqlite.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":16,"file":"sqlite.js","path":"src/providers"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","abstract":true,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":36,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","abstract":true,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":49,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":61,"file":"base.js","path":"src/types"}}],"meta":{"line":7,"file":"base.js","path":"src/types"}},{"name":"ArgumentUnionType","description":"A type for command arguments that handles multiple other types","extends":[[["ArgumentType"]]],"props":[{"name":"types","description":"Types to handle, in order of priority","type":[[["Array","<"],["ArgumentType",">"]]],"meta":{"line":15,"file":"union.js","path":"src/types"}},{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","inherits":"ArgumentType#validate","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":36,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","inherits":"ArgumentType#parse","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":49,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","inherits":"ArgumentType#isEmpty","inherited":true,"params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":61,"file":"base.js","path":"src/types"}}],"meta":{"line":8,"file":"union.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"CommandoClientOptions","description":"Options for a CommandoClient","type":[[["ClientOptions"]]],"props":[{"name":"commandPrefix","description":"Default command prefix","optional":true,"default":"!","type":[[["string"]]]},{"name":"commandEditableDuration","description":"Time in seconds that command messages should be editable","optional":true,"default":30,"type":[[["number"]]]},{"name":"nonCommandEditable","description":"Whether messages without commands can be edited to a command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"owner","description":"ID of the bot owner's Discord user, or multiple IDs","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]],[["Set","<"],["string",">"]]]},{"name":"invite","description":"Invite URL to the bot's support server","optional":true,"type":[[["string"]]]}],"meta":{"line":11,"file":"client.js","path":"src"}},{"name":"Inhibition","type":[[["Object"]]],"props":[{"name":"reason","description":"Identifier for the reason the command is being blocked","type":[[["string"]]]},{"name":"response","description":"Response being sent to the user","nullable":true,"type":[[["Promise","<"],["Message",">"]]]}],"meta":{"line":52,"file":"dispatcher.js","path":"src"}},{"name":"Inhibitor","description":"A function that decides whether the usage of a command should be blocked","type":[[["function"]]],"params":[{"name":"msg","description":"Message triggering the command","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Inhibition"]]],"description":"`false` if the command should *not* be blocked.\nIf the command *should* be blocked, then one of the following:\n- A single string identifying the reason the command is blocked\n- An Inhibition object"},"meta":{"line":58,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroupResolvable","description":"A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID","type":[[["CommandGroup"]],[["string"]]],"meta":{"line":453,"file":"registry.js","path":"src"}},{"name":"CommandResolvable","description":"A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandoMessage","type":[[["Command"]],[["string"]]],"meta":{"line":505,"file":"registry.js","path":"src"}},{"name":"ArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"error","description":"Predefined error message to output for the argument when it isn't valid","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the argument (must be the ID of one of the registered argument types\nor multiple IDs in order of priority separated by `|` for a union type - see\n{@link CommandoRegistry#registerDefaultTypes} for the built-in types)","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the arg optional - cannot be `null`)","optional":true,"type":[[["ArgumentDefault"]]]},{"name":"oneOf","description":"An array of values that are allowed to be used","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument (see {@link ArgumentType#validate})","optional":true,"type":[[["function"]]]},{"name":"parse","description":"Parser function for the argument (see {@link ArgumentType#parse})","optional":true,"type":[[["function"]]]},{"name":"isEmpty","description":"Empty checker for the argument (see {@link ArgumentType#isEmpty})","optional":true,"type":[[["function"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":7,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentDefault","description":"Either a value or a function that returns a value. The function is passed the CommandoMessage and the Argument.","type":[["*"],[["function"]]],"meta":{"line":29,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentResult","description":"Result object from obtaining a single {@link Argument}'s value(s)","type":[[["Object"]]],"props":[{"name":"value","description":"Final value(s) for the argument","type":[["*"],[["Array","<"],["*",">"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":133,"file":"argument.js","path":"src/commands"}},{"name":"ThrottlingOptions","type":[[["Object"]]],"props":[{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]},{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]}],"meta":{"line":9,"file":"base.js","path":"src/commands"}},{"name":"CommandInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (must be lowercase)","type":[[["string"]]]},{"name":"aliases","description":"Alternative names for the command (all must be lowercase)","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The ID of the group the command belongs to (must be lowercase)","type":[[["string"]]]},{"name":"memberName","description":"The member name of the command in the group (must be lowercase)","type":[[["string"]]]},{"name":"description","description":"A short description of the command","type":[[["string"]]]},{"name":"format","description":"The command usage format string - will be automatically generated if not specified,\nand `args` is specified","optional":true,"type":[[["string"]]]},{"name":"details","description":"A detailed description of the command and its functionality","optional":true,"type":[[["string"]]]},{"name":"examples","description":"Usage examples of the command","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ownerOnly","description":"Whether or not the command is usable only by an owner","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"userPermissions","description":"Permissions required by the user to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"nsfw","description":"Whether the command is usable only in NSFW channels.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"argsPromptLimit","description":"Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\nin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array","<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"hidden","description":"Whether the command should be hidden from the help command","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"unknown","description":"Whether the command should be run when an unknown command is used - there\nmay only be one command registered with this property as `true`.","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":15,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollectorResult","description":"Result object from obtaining argument values from an {@link ArgumentCollector}","type":[[["Object"]]],"props":[{"name":"values","description":"Final values for the arguments, mapped by their keys","nullable":true,"type":[[["Object"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":46,"file":"collector.js","path":"src/commands"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":27,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":31,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":35,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":39,"file":"index.js","path":"src"}},{"name":"DMChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/DMChannel}"],"meta":{"line":43,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":47,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":51,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":55,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":59,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":63,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":115,"file":"index.js","path":"src"}},{"name":"MessageReaction","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageReaction}"],"meta":{"line":71,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":75,"file":"index.js","path":"src"}},{"name":"PermissionResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/PermissionResolvable}"],"meta":{"line":79,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":83,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":87,"file":"index.js","path":"src"}},{"name":"TextChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/TextChannel}"],"meta":{"line":91,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":95,"file":"index.js","path":"src"}},{"name":"UserResolvable","see":["{@link https://discord.js.org/#/docs/main/master/class/UserResolvable}"],"meta":{"line":99,"file":"index.js","path":"src"}},{"name":"Emoji","see":["{@link https://discord.js.org/#/docs/main/master/class/Emoji}"],"meta":{"line":103,"file":"index.js","path":"src"}},{"name":"ReactionEmoji","see":["{@link https://discord.js.org/#/docs/main/master/class/ReactionEmoji}"],"meta":{"line":107,"file":"index.js","path":"src"}},{"name":"Webhook","see":["{@link https://discord.js.org/#/docs/main/master/class/Webhook}"],"meta":{"line":111,"file":"index.js","path":"src"}},{"name":"ShardingManager","see":["{@link https://discord.js.org/#/docs/main/master/class/ShardingManager}"],"meta":{"line":119,"file":"index.js","path":"src"}},{"name":"RequireAllOptions","see":["{@link https://www.npmjs.com/package/require-all}"],"meta":{"line":123,"file":"index.js","path":"src"}},{"name":"SyncSQLiteDatabase","see":["{@link https://www.npmjs.com/package/better-sqlite3}"],"meta":{"line":8,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":8,"file":"sqlite.js","path":"src/providers"}}]},
  // Commando/master.json
  {"meta":{"generator":"0.9.0","format":20,"date":1569180085811},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/discordjs/Commando.svg)](https://david-dm.org/discordjs/Commando)\n[![Build status](https://travis-ci.org/discordjs/Commando.svg)](https://travis-ci.org/discordjs/Commando)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/discordjs/discord.js).\nIt is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Type system with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t\t- User-defined custom types\n\t\t- Union types\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 8.6.0 or newer is required.**  \n`npm install discord.js-commando`\n","path":"docs/general/welcome.md"},"first-steps":{"name":"First steps","type":"md","content":"# First steps\nThe first thing you need to do to use Commando is ensure you're creating a [CommandoClient](https://discord.js.org/#/docs/commando/master/class/CommandoClient)\nrather than the regular discord.js [Client](https://discord.js.org/#/docs/main/master/class/Client).\nA CommandoClient is just an extension of the base Client, so all options, properties, methods, and events on Client are also on CommandoClient.\n\nYou should provide the `owner` option to the constructor, which is an option specific to CommandoClient, and should be set to the ID of your Discord user.\nThis will give you full access to control everything about the bot, in any guild.\n\n```javascript\nconst Commando = require('discord.js-commando');\n\nconst client = new Commando.Client({\n\towner: '1234567890'\n});\n```\n\nThen, to make use of the command framework (what else would you be doing with Commando?), you need to register your command groups, commands, and argument types,\nin addition to any of the built-in stuff that you want make use of. This will look something like this:\n\n```javascript\nconst path = require('path');\n\nclient.registry\n\t// Registers your custom command groups\n\t.registerGroups([\n\t\t['fun', 'Fun commands'],\n\t\t['some', 'Some group'],\n\t\t['other', 'Some other group']\n\t])\n\n\t// Registers all built-in groups, commands, and argument types\n\t.registerDefaults()\n\n\t// Registers all of your commands in the ./commands/ directory\n\t.registerCommandsIn(path.join(__dirname, 'commands'));\n```\n\nCommando has built-in command prefix configuration per-guild, as well as enabling and disabling commands per-guild.\nIn order for this to persist across restarts, you should use a [SettingProvider](https://discord.js.org/#/docs/commando/master/class/SettingProvider).\nThere is a built-in SQLiteProvider that comes with Commando, which stores all settings in an SQLite3 database.\nTo use it, install the `sqlite` module with NPM (`npm install --save sqlite`). Then, set the provider on the client:\n\n```javascript\nconst sqlite = require('sqlite');\n\nclient.setProvider(\n\tsqlite.open(path.join(__dirname, 'settings.sqlite3')).then(db => new Commando.SQLiteProvider(db))\n).catch(console.error);\n```\n\nFinally, you must log in, just as if you were using a regular Client.\n\n```javascript\nclient.login('token goes here');\n```\n\nThere is an extremely simple example bot used to test Commando, of which you can view the source [here](https://github.com/discordjs/Commando/tree/master/test).\n","path":"docs/general/first-steps.md"}}},"commands":{"name":"Commands","files":{"builtins":{"name":"Built-in commands","type":"md","content":"# Built-in commands\nCommando has built-in commands that should be useful for just about any bot.\n\n## Utility (util)\n### help (util:help)\nIf no arguments are specified, the command displays a list of all commands available in the current context.\nIn order for a command to be displayed, it must be enabled in the guild (or global), and the user must have permission to use it.\nPassing the `all` argument will list all commands, regardless of context.\nPassing anything else will search for any commands that match, and display detailed information if only one is found.\n\n### ping (util:ping)\nThe ping command will send a message, then edit it to contain the amount of time it took.\nIt also displays the client's heartbeat ping.\n\n### prefix (util:prefix)\nThis command, if not provided with any arguments, will display the current command prefix, and how to use commands.\nIf the command is used in a guild channel and an argument is specified, it will set the command prefix for the guild if the user is a guild admin, or the bot owner,\nIf the command is used in a DM and an argument is specified, it will set the global default command prefix if the user is the bot owner.\n\n### eval (util:eval)\nThe eval command will allow the bot owner to evaluate any JavaScript code, and display its result.\nIt will automatically hide the bot's token/email/password in the output.\nCaution should still be taken, however, as you could potentially break your running bot with it.\n\nIn the script, `this` will refer to the Command instance.\nThere are several shortcut variables and helpers that are also available:\n\n| Name             | Type     | Description                                                                        |\n|------------------|----------|------------------------------------------------------------------------------------|\n| `message`, `msg` | Variable | The message that triggered the command                                             |\n| `client`         | Variable | Shortcut to `this.client`                                                          |\n| `objects`        | Variable | Shortcut to `this.client.registry.evalObjects`                                     |\n| `lastResult`     | Variable | Shortcut to `this.lastResult` (the previous `eval` result value)                   |\n| `doReply(val)`   | Function | Sends another detailed message with any value to display. Useful for callbacks.    |\n\n## Command state (commands)\n### enable (commands:enable)\nEnables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, enables the command/group globally by default if the user is the bot owner.\n\n### disable (commands:disable)\nDisables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, disables the command/group globally by default if the user is the bot owner.\n\n### reload (commands:reload)\nReloads a command, or all commands in a group, if the user is the bot owner.\n\n### load (commands:load)\nLoads a command if the user is the bot owner. The command must be specified as the full name (`group:memberName`).\nBuilt-in commands cannot be loaded.\n\n### unload (commands:unload)\nUnloads a command if the user is the bot owner.\nBuilt-in commands cannot be unloaded.\n\n### groups (commands:groups)\nLists all command groups if the user is an admin of the current guild, or the bot owner.\n","path":"docs/commands/builtins.md"}}}},"classes":[{"name":"CommandoClient","description":"Discord.js Client with a command framework","extends":[[["Client"]]],"construct":{"name":"CommandoClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["CommandoClientOptions"]]]}]},"props":[{"name":"registry","description":"The client's command registry","type":[[["CommandoRegistry"]]],"meta":{"line":35,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"The client's command dispatcher","type":[[["CommandDispatcher"]]],"meta":{"line":41,"file":"client.js","path":"src"}},{"name":"provider","description":"The client's setting provider","nullable":true,"type":[[["SettingProvider"]]],"meta":{"line":47,"file":"client.js","path":"src"}},{"name":"settings","description":"Shortcut to use setting provider methods for the global settings","type":[[["GuildSettingsHelper"]]],"meta":{"line":53,"file":"client.js","path":"src"}},{"name":"_commandPrefix","description":"Internal global command prefix, controlled by the {@link CommandoClient#commandPrefix} getter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":60,"file":"client.js","path":"src"}},{"name":"commandPrefix","description":"Global command prefix. An empty string indicates that there is no default prefix, and only mentions will be used.\nSetting to `null` means that the default prefix from {@link CommandoClient#options} will be used instead.","type":[[["string"]]],"meta":{"line":95,"file":"client.js","path":"src"}},{"name":"owners","description":"Owners of the bot, set by the {@link CommandoClientOptions#owner} option\n<info>If you simply need to check if a user is an owner of the bot, please instead use\n{@link CommandoClient#isOwner}.</info>","readonly":true,"nullable":true,"type":[[["Array","<"],["User",">"]]],"meta":{"line":112,"file":"client.js","path":"src"}}],"methods":[{"name":"isOwner","description":"Checks whether a user is an owner of the bot (in {@link CommandoClientOptions#owner})","params":[{"name":"user","description":"User to check for ownership","type":[[["UserResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":125,"file":"client.js","path":"src"}},{"name":"setProvider","description":"Sets the setting provider to use, and initialises it once the client is ready","params":[{"name":"provider","description":"Provider to use","type":[[["SettingProvider"]],[["Promise","<"],["SettingProvider",">"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":140,"file":"client.js","path":"src"}}],"events":[{"name":"providerReady","description":"Emitted upon the client's provider finishing initialisation","params":[{"name":"provider","description":"Provider that was initialised","type":[[["SettingProvider"]]]}],"meta":{"line":159,"file":"client.js","path":"src"}},{"name":"unknownCommand","description":"Emitted when an unknown command is triggered","params":[{"name":"message","description":"Command message that triggered the command","type":[[["CommandoMessage"]]]}],"meta":{"line":134,"file":"dispatcher.js","path":"src"}},{"name":"groupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the group was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":74,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered","params":[{"name":"command","description":"Command that was registered","type":[[["Command"]]]},{"name":"registry","description":"Registry that the command was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":149,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":223,"file":"registry.js","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","params":[{"name":"newCommand","description":"New command","type":[[["Command"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":402,"file":"registry.js","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","params":[{"name":"command","description":"Command that was unregistered","type":[[["Command"]]]}],"meta":{"line":421,"file":"registry.js","path":"src"}},{"name":"commandPrefixChange","description":"Emitted whenever a guild's command prefix is changed","params":[{"name":"guild","description":"Guild that the prefix was changed in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"prefix","description":"New command prefix (null for default)","nullable":true,"type":[[["string"]]]}],"meta":{"line":43,"file":"guild.js","path":"src/extensions"}},{"name":"commandStatusChange","description":"Emitted whenever a command is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the command was enabled/disabled in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command that was enabled/disabled","type":[[["Command"]]]},{"name":"enabled","description":"Whether the command is enabled","type":[[["boolean"]]]}],"meta":{"line":71,"file":"guild.js","path":"src/extensions"}},{"name":"groupStatusChange","description":"Emitted whenever a command group is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the group was enabled/disabled in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group that was enabled/disabled","type":[[["CommandGroup"]]]},{"name":"enabled","description":"Whether the group is enabled","type":[[["boolean"]]]}],"meta":{"line":114,"file":"guild.js","path":"src/extensions"}},{"name":"commandBlock","description":"Emitted when a command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandoMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\n- guildOnly: none\n- nsfw: none\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\n- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"meta":{"line":136,"file":"message.js","path":"src/extensions"}},{"name":"commandCancel","description":"Emitted when a command is cancelled (either by typing 'cancel' or not responding in time)","params":[{"name":"command","description":"Command that was cancelled","type":[[["Command"]]]},{"name":"reason","description":"Reason for the command being cancelled","type":[[["string"]]]},{"name":"message","description":"Command message that the command ran from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":200,"file":"message.js","path":"src/extensions"}},{"name":"commandRun","description":"Emitted when running a command","params":[{"name":"command","description":"Command that is being run","type":[[["Command"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":223,"file":"message.js","path":"src/extensions"}},{"name":"commandError","description":"Emitted when a command produces an error while running","params":[{"name":"command","description":"Command that produced an error","type":[[["Command"]]]},{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":245,"file":"message.js","path":"src/extensions"}}],"meta":{"line":24,"file":"client.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandoRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":10,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandoRegistry"]]],"meta":{"line":22,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set","<"],["function","()>"]]],"meta":{"line":28,"file":"dispatcher.js","path":"src"}},{"name":"_commandPatterns","description":"Map object of {@link RegExp}s that match command messages, mapped by string prefix","access":"private","type":[[["Object"]]],"meta":{"line":35,"file":"dispatcher.js","path":"src"}},{"name":"_results","description":"Old command message results, mapped by original message ID","access":"private","type":[[["Map","<"],["string",", "],["CommandoMessage",">"]]],"meta":{"line":42,"file":"dispatcher.js","path":"src"}},{"name":"_awaiting","description":"Tuples in string form of user ID and channel ID that are currently awaiting messages from a user in a channel","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":49,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\n  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\n});","client.dispatcher.addInhibitor(msg => {\n\tif(!coolUsers.has(msg.author.id)) return { reason: 'cool', response: msg.reply('You\\'re not cool enough!') };\n});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":81,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":93,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":105,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":172,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["Inhibition"]]],"nullable":true},"meta":{"line":194,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandoMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandoMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"meta":{"line":226,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":245,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]},{"name":"prefixless","description":"Whether the match is happening for a prefixless usage","default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":272,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"prefix","description":"Prefix to build the pattern for","nullable":true,"type":[[["string"]]]}],"returns":[[["RegExp"]]],"meta":{"line":289,"file":"dispatcher.js","path":"src"}}],"meta":{"line":9,"file":"dispatcher.js","path":"src"}},{"name":"CommandoRegistry","description":"Handles registration and searching of commands and groups","construct":{"name":"CommandoRegistry","params":[{"name":"client","description":"Client to use","optional":true,"type":[[["CommandoClient"]]]}]},"props":[{"name":"client","description":"The client this registry is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"registry.js","path":"src"}},{"name":"commands","description":"Registered commands, mapped by their name","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":24,"file":"registry.js","path":"src"}},{"name":"groups","description":"Registered command groups, mapped by their ID","type":[[["Collection","<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":30,"file":"registry.js","path":"src"}},{"name":"types","description":"Registered argument types, mapped by their ID","type":[[["Collection","<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":36,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Fully resolved path to the bot's commands directory","nullable":true,"type":[[["string"]]],"meta":{"line":42,"file":"registry.js","path":"src"}},{"name":"unknownCommand","description":"Command to run when an unknown command is used","nullable":true,"type":[[["Command"]]],"meta":{"line":48,"file":"registry.js","path":"src"}}],"methods":[{"name":"registerGroup","description":"Registers a single group","see":["{@link CommandoRegistry#registerGroups}"],"params":[{"name":"group","description":"A CommandGroup instance, a constructor, or the group ID","type":[[["CommandGroup"]],[["function"]],[["Object"]],[["string"]]]},{"name":"name","description":"Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be guarded (if the first argument is the group ID)","optional":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":59,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Registers multiple groups","examples":["registry.registerGroups([\n\t['fun', 'Fun'],\n\t['mod', 'Moderation']\n]);","registry.registerGroups([\n\t{ id: 'fun', name: 'Fun' },\n\t{ id: 'mod', name: 'Moderation' }\n]);"],"params":[{"name":"groups","description":"An array of CommandGroup instances,\nconstructors, plain objects (with ID, name, and guarded properties),\nor arrays of {@link CommandoRegistry#registerGroup} parameters","type":[[["Array","<"],["CommandGroup",">"]],[["Array","<"],["function","()>"]],[["Array","<"],["Object",">"]],[["Array","<"],["Array","<"],["string",">>"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":104,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["{@link CommandoRegistry#registerCommands}"],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["Command"]],[["function"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":119,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["Command",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":167,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","examples":["const path = require('path');\nregistry.registerCommandsIn(path.join(__dirname, 'commands'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":189,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link CommandoRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":209,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array","<"],["ArgumentType",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":241,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":260,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands. This is equivalent to:\n```js\nregistry.registerDefaultTypes()\n\t.registerDefaultGroups()\n\t.registerDefaultCommands();\n```","returns":[[["CommandoRegistry"]]],"meta":{"line":276,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups (\"util\" and \"commands\")","returns":[[["CommandoRegistry"]]],"meta":{"line":287,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"commands","description":"Object specifying which commands to register","optional":true,"type":[[["Object"]]]},{"name":"commands.help","description":"Whether to register the built-in help command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.prefix","description":"Whether to register the built-in prefix command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.eval","description":"Whether to register the built-in eval command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.ping","description":"Whether to register the built-in ping command (requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.unknownCommand","description":"Whether to register the built-in unknown command\n(requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.commandState","description":"Whether to register the built-in command state commands\n(enable, disable, load, unload, reload, list groups - requires \"commands\" group, \"command\" type, and \"group\" type)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":310,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry","params":[{"name":"types","description":"Object specifying which types to register","optional":true,"type":[[["Object"]]]},{"name":"types.string","description":"Whether to register the built-in string type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.integer","description":"Whether to register the built-in integer type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.float","description":"Whether to register the built-in float type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.boolean","description":"Whether to register the built-in boolean type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.user","description":"Whether to register the built-in user type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.member","description":"Whether to register the built-in member type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.role","description":"Whether to register the built-in role type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.channel","description":"Whether to register the built-in channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.textChannel","description":"Whether to register the built-in text-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.voiceChannel","description":"Whether to register the built-in voice-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.categoryChannel","description":"Whether to register the built-in category-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.message","description":"Whether to register the built-in message type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.customEmoji","description":"Whether to register the built-in custom-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.command","description":"Whether to register the built-in command type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.group","description":"Whether to register the built-in group type","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":353,"file":"registry.js","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command (does not support changing name, group, or memberName)","params":[{"name":"command","description":"New command","type":[[["Command"]],[["function"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":383,"file":"registry.js","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command","params":[{"name":"command","description":"Command to unregister","type":[[["Command"]]]}],"meta":{"line":416,"file":"registry.js","path":"src"}},{"name":"findGroups","description":"Finds all groups that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["CommandGroup",">"]]],"description":"All groups that are found"},"meta":{"line":436,"file":"registry.js","path":"src"}},{"name":"resolveGroup","description":"Resolves a CommandGroupResolvable to a CommandGroup object","params":[{"name":"group","description":"The group to resolve","type":[[["CommandGroupResolvable"]]]}],"returns":{"types":[[["CommandGroup"]]],"description":"The resolved CommandGroup"},"meta":{"line":465,"file":"registry.js","path":"src"}},{"name":"findCommands","description":"Finds all commands that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"message","description":"The message to check usability against","optional":true,"default":null,"type":[[["Message"]]]}],"returns":{"types":[[["Array","<"],["Command",">"]]],"description":"All commands that are found"},"meta":{"line":481,"file":"registry.js","path":"src"}},{"name":"resolveCommand","description":"Resolves a CommandResolvable to a Command object","params":[{"name":"command","description":"The command to resolve","type":[[["CommandResolvable"]]]}],"returns":{"types":[[["Command"]]],"description":"The resolved Command"},"meta":{"line":518,"file":"registry.js","path":"src"}},{"name":"resolveCommandPath","description":"Resolves a command file path from a command's group ID and memberName","params":[{"name":"group","description":"ID of the command's group","type":[[["string"]]]},{"name":"memberName","description":"Member name of the command","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":534,"file":"registry.js","path":"src"}}],"meta":{"line":11,"file":"registry.js","path":"src"}},{"name":"Argument","description":"A fancy argument","construct":{"name":"Argument","params":[{"name":"client","description":"Client the argument is for","type":[[["CommandoClient"]]]},{"name":"info","description":"Information for the command argument","type":[[["ArgumentInfo"]]]}]},"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":45,"file":"argument.js","path":"src/commands"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":51,"file":"argument.js","path":"src/commands"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":57,"file":"argument.js","path":"src/commands"}},{"name":"error","description":"Error message for when a value is invalid","nullable":true,"type":[[["string"]]],"meta":{"line":63,"file":"argument.js","path":"src/commands"}},{"name":"type","description":"Type of the argument","nullable":true,"type":[[["ArgumentType"]]],"meta":{"line":69,"file":"argument.js","path":"src/commands"}},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":76,"file":"argument.js","path":"src/commands"}},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":83,"file":"argument.js","path":"src/commands"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[[["ArgumentDefault"]]],"meta":{"line":89,"file":"argument.js","path":"src/commands"}},{"name":"oneOf","description":"Values the user can choose from\nIf type is `string`, this will be case-insensitive\nIf type is `channel`, `member`, `role`, or `user`, this will be the IDs.","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":97,"file":"argument.js","path":"src/commands"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":103,"file":"argument.js","path":"src/commands"}},{"name":"validator","description":"Validator function for validating a value for the argument","see":["{@link ArgumentType#validate}"],"nullable":true,"type":[[["function"]]],"meta":{"line":110,"file":"argument.js","path":"src/commands"}},{"name":"parser","description":"Parser function for parsing a value for the argument","see":["{@link ArgumentType#parse}"],"nullable":true,"type":[[["function"]]],"meta":{"line":117,"file":"argument.js","path":"src/commands"}},{"name":"emptyChecker","description":"Function to check whether a raw value is considered empty","see":["{@link ArgumentType#isEmpty}"],"nullable":true,"type":[[["function"]]],"meta":{"line":124,"file":"argument.js","path":"src/commands"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":130,"file":"argument.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"val","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":152,"file":"argument.js","path":"src/commands"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","access":"private","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"vals","description":"Pre-provided values for the argument","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":239,"file":"argument.js","path":"src/commands"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"val","description":"Value to check","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]}],"returns":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"meta":{"line":351,"file":"argument.js","path":"src/commands"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]}],"returns":[["*"],[["Promise","<"],["*",">"]]],"meta":{"line":364,"file":"argument.js","path":"src/commands"}},{"name":"isEmpty","description":"Checks whether a value for the argument is considered to be empty","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":375,"file":"argument.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["ArgumentInfo"]]]}],"meta":{"line":388,"file":"argument.js","path":"src/commands"}},{"name":"determineType","description":"Gets the argument type to use from an ID","scope":"static","access":"private","params":[{"name":"client","description":"Client to use the registry of","type":[[["CommandoClient"]]]},{"name":"id","description":"ID of the type to use","type":[[["string"]]]}],"returns":{"types":[[["ArgumentType"]]],"nullable":true},"meta":{"line":423,"file":"argument.js","path":"src/commands"}}],"meta":{"line":38,"file":"argument.js","path":"src/commands"}},{"name":"Command","description":"A command that can be run in a client","construct":{"name":"Command","params":[{"name":"client","description":"The client the command is for","type":[[["CommandoClient"]]]},{"name":"info","description":"The command information","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"Client that this command is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":62,"file":"base.js","path":"src/commands"}},{"name":"name","description":"Name of this command","type":[[["string"]]],"meta":{"line":74,"file":"base.js","path":"src/commands"}},{"name":"aliases","description":"Aliases for this command","type":[[["Array","<"],["string",">"]]],"meta":{"line":80,"file":"base.js","path":"src/commands"}},{"name":"groupID","description":"ID of the group the command belongs to","type":[[["string"]]],"meta":{"line":92,"file":"base.js","path":"src/commands"}},{"name":"group","description":"The group the command belongs to, assigned upon registration","nullable":true,"type":[[["CommandGroup"]]],"meta":{"line":98,"file":"base.js","path":"src/commands"}},{"name":"memberName","description":"Name of the command within the group","type":[[["string"]]],"meta":{"line":104,"file":"base.js","path":"src/commands"}},{"name":"description","description":"Short description of the command","type":[[["string"]]],"meta":{"line":110,"file":"base.js","path":"src/commands"}},{"name":"format","description":"Usage format string of the command","type":[[["string"]]],"meta":{"line":116,"file":"base.js","path":"src/commands"}},{"name":"details","description":"Long description of the command","nullable":true,"type":[[["string"]]],"meta":{"line":122,"file":"base.js","path":"src/commands"}},{"name":"examples","description":"Example usage strings","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":128,"file":"base.js","path":"src/commands"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":134,"file":"base.js","path":"src/commands"}},{"name":"ownerOnly","description":"Whether the command can only be used by an owner","type":[[["boolean"]]],"meta":{"line":140,"file":"base.js","path":"src/commands"}},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":146,"file":"base.js","path":"src/commands"}},{"name":"userPermissions","description":"Permissions required by the user to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":152,"file":"base.js","path":"src/commands"}},{"name":"nsfw","description":"Whether the command can only be used in NSFW channels","type":[[["boolean"]]],"meta":{"line":158,"file":"base.js","path":"src/commands"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":164,"file":"base.js","path":"src/commands"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":170,"file":"base.js","path":"src/commands"}},{"name":"argsCollector","description":"The argument collector for the command","nullable":true,"type":[[["ArgumentCollector"]]],"meta":{"line":176,"file":"base.js","path":"src/commands"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":191,"file":"base.js","path":"src/commands"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":197,"file":"base.js","path":"src/commands"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":203,"file":"base.js","path":"src/commands"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array","<"],["RegExp",">"]]],"meta":{"line":209,"file":"base.js","path":"src/commands"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":215,"file":"base.js","path":"src/commands"}},{"name":"hidden","description":"Whether the command should be hidden from the help command","type":[[["boolean"]]],"meta":{"line":221,"file":"base.js","path":"src/commands"}},{"name":"unknown","description":"Whether the command will be run when an unknown command is used","type":[[["boolean"]]],"meta":{"line":227,"file":"base.js","path":"src/commands"}},{"name":"_globalEnabled","description":"Whether the command is enabled globally","access":"private","type":[[["boolean"]]],"meta":{"line":234,"file":"base.js","path":"src/commands"}},{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID","access":"private","type":[[["Map","<"],["string",", "],["Object",">"]]],"meta":{"line":241,"file":"base.js","path":"src/commands"}}],"methods":[{"name":"hasPermission","description":"Checks whether the user has permission to use the command","params":[{"name":"message","description":"The triggering command message","type":[[["CommandoMessage"]]]},{"name":"ownerOverride","description":"Whether the bot owner(s) will always have permission","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]],[["string"]]],"description":"Whether the user has permission, or an error message to respond with if they don't"},"meta":{"line":250,"file":"base.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message the command is being run for","type":[[["CommandoMessage"]]]},{"name":"args","description":"The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether or not the command is being run from a pattern match","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector (if applicable)","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"async":true,"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":287,"file":"base.js","path":"src/commands"}},{"name":"onBlock","description":"Called when the command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\n- guildOnly: none\n- nsfw: none\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\n- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":304,"file":"base.js","path":"src/commands"}},{"name":"onError","description":"Called when the command produces an error while running","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":345,"file":"base.js","path":"src/commands"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary (owners are excluded)","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":{"types":[[["Object"]]],"nullable":true},"meta":{"line":366,"file":"base.js","path":"src/commands"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":389,"file":"base.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"bypassGroup","description":"Whether to bypass checking the group's status","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":408,"file":"base.js","path":"src/commands"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":420,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":434,"file":"base.js","path":"src/commands"}},{"name":"reload","description":"Reloads the command","meta":{"line":441,"file":"base.js","path":"src/commands"}},{"name":"unload","description":"Unloads the command","meta":{"line":467,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":481,"file":"base.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["CommandInfo"]]]}],"meta":{"line":504,"file":"base.js","path":"src/commands"}}],"meta":{"line":59,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollector","description":"Obtains, validates, and prompts for argument values","construct":{"name":"ArgumentCollector","params":[{"name":"client","description":"Client the collector will use","type":[[["CommandoClient"]]]},{"name":"args","description":"Arguments for the collector","type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"Infinity","type":[[["number"]]]}]},"props":[{"name":"client","description":"Client this collector is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"collector.js","path":"src/commands"}},{"name":"args","description":"Arguments the collector handles","type":[[["Array","<"],["Argument",">"]]],"meta":{"line":27,"file":"collector.js","path":"src/commands"}},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","type":[[["number"]]],"meta":{"line":43,"file":"collector.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Obtains values for the arguments, prompting if necessary.","params":[{"name":"msg","description":"Message that the collector is being triggered by","type":[[["CommandoMessage"]]]},{"name":"provided","description":"Values that are already available","optional":true,"default":"[]","type":[[["Array","<"],["*",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"this.promptLimit","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentCollectorResult",">"]]],"meta":{"line":65,"file":"collector.js","path":"src/commands"}}],"meta":{"line":10,"file":"collector.js","path":"src/commands"}},{"name":"CommandGroup","description":"A group for commands. Whodathunkit?","construct":{"name":"CommandGroup","params":[{"name":"client","description":"The client the group is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":16,"file":"group.js","path":"src/commands"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":28,"file":"group.js","path":"src/commands"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":34,"file":"group.js","path":"src/commands"}},{"name":"commands","description":"The commands in this group (added upon their registration)","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":40,"file":"group.js","path":"src/commands"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":46,"file":"group.js","path":"src/commands"}}],"methods":[{"name":"setEnabledIn","description":"Enables or disables the group in a guild","params":[{"name":"guild","description":"Guild to enable/disable the group in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":56,"file":"group.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the group is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the group is enabled"},"meta":{"line":74,"file":"group.js","path":"src/commands"}},{"name":"reload","description":"Reloads all of the group's commands","meta":{"line":84,"file":"group.js","path":"src/commands"}}],"meta":{"line":11,"file":"group.js","path":"src/commands"}},{"name":"CommandFormatError","description":"Has a descriptive message for a command not having proper format","extends":[[["FriendlyError"]]],"construct":{"name":"CommandFormatError","params":[{"name":"msg","description":"The command message the error is for","type":[[["CommandoMessage"]]]}]},"meta":{"line":11,"file":"command-format.js","path":"src/errors"}},{"name":"FriendlyError","description":"Has a message that can be considered user-friendly","extends":[[["Error"]]],"construct":{"name":"FriendlyError","params":[{"name":"message","description":"The error message","type":[[["string"]]]}]},"meta":{"line":7,"file":"friendly.js","path":"src/errors"}},{"name":"CommandoGuild","description":"A fancier Guild for fancier people.","extends":[[["Guild"]]],"props":[{"name":"settings","description":"Shortcut to use setting provider methods for this guild","type":[[["GuildSettingsHelper"]]],"meta":{"line":18,"file":"guild.js","path":"src/extensions"}},{"name":"_commandPrefix","description":"Internal command prefix for the guild, controlled by the {@link CommandoGuild#commandPrefix}\ngetter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":20,"file":"guild.js","path":"src/extensions"}},{"name":"commandPrefix","description":"Command prefix in the guild. An empty string indicates that there is no prefix, and only mentions will be used.\nSetting to `null` means that the prefix from {@link CommandoClient#commandPrefix} will be used instead.","type":[[["string"]]],"meta":{"line":36,"file":"guild.js","path":"src/extensions"}},{"name":"_commandsEnabled","description":"Map object of internal command statuses, mapped by command name","access":"private","type":[[["Object"]]],"meta":{"line":68,"file":"guild.js","path":"src/extensions"}},{"name":"_groupsEnabled","description":"Internal map object of group statuses, mapped by group ID","access":"private","type":[[["Object"]]],"meta":{"line":111,"file":"guild.js","path":"src/extensions"}}],"methods":[{"name":"setCommandEnabled","description":"Sets whether a command is enabled in the guild","params":[{"name":"command","description":"Command to set status of","type":[[["CommandResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled","type":[[["boolean"]]]}],"meta":{"line":57,"file":"guild.js","path":"src/extensions"}},{"name":"isCommandEnabled","description":"Checks whether a command is enabled in the guild (does not take the command's group status into account)","params":[{"name":"command","description":"Command to check status of","type":[[["CommandResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":86,"file":"guild.js","path":"src/extensions"}},{"name":"setGroupEnabled","description":"Sets whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to set status of","type":[[["CommandGroupResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled","type":[[["boolean"]]]}],"meta":{"line":100,"file":"guild.js","path":"src/extensions"}},{"name":"isGroupEnabled","description":"Checks whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to check status of","type":[[["CommandGroupResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":129,"file":"guild.js","path":"src/extensions"}},{"name":"commandUsage","description":"Creates a command usage string using the guild's prefix","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":142,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":11,"file":"guild.js","path":"src/extensions"}},{"name":"CommandoMessage","description":"An extension of the base Discord.js Message class to add command-related functionality.","extends":[[["Message"]]],"props":[{"name":"isCommand","description":"Whether the message contains a command (even an unknown one)","type":[[["boolean"]]],"meta":{"line":20,"file":"message.js","path":"src/extensions"}},{"name":"command","description":"Command that the message triggers, if any","nullable":true,"type":[[["Command"]]],"meta":{"line":26,"file":"message.js","path":"src/extensions"}},{"name":"argString","description":"Argument string for the command","nullable":true,"type":[[["string"]]],"meta":{"line":32,"file":"message.js","path":"src/extensions"}},{"name":"patternMatches","description":"Pattern matches (if from a pattern trigger)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":38,"file":"message.js","path":"src/extensions"}},{"name":"responses","description":"Response messages sent, mapped by channel ID (set by the dispatcher after running the command)","nullable":true,"type":[[["Object"]]],"meta":{"line":44,"file":"message.js","path":"src/extensions"}},{"name":"responsePositions","description":"Index of the current response that will be edited, mapped by channel ID","nullable":true,"type":[[["Object"]]],"meta":{"line":50,"file":"message.js","path":"src/extensions"}}],"methods":[{"name":"initCommand","description":"Initialises the message for a command","access":"private","params":[{"name":"command","description":"Command the message triggers","optional":true,"type":[[["Command"]]]},{"name":"argString","description":"Argument string for the command","optional":true,"type":[[["string"]]]},{"name":"patternMatches","description":"Command pattern matches (if from a pattern trigger)","optional":true,"nullable":true,"type":[[["Array","<"],["string",">"]]]}],"returns":{"types":[[["Message"]]],"description":"This message"},"meta":{"line":61,"file":"message.js","path":"src/extensions"}},{"name":"usage","description":"Creates a usage string for the message's command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":77,"file":"message.js","path":"src/extensions"}},{"name":"anyUsage","description":"Creates a usage string for any command","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":93,"file":"message.js","path":"src/extensions"}},{"name":"parseArgs","description":"Parses the argString into usable arguments, based on the argsType and argsCount of the command","see":["{@link Command#run}"],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":106,"file":"message.js","path":"src/extensions"}},{"name":"run","description":"Runs the command","async":true,"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":123,"file":"message.js","path":"src/extensions"}},{"name":"respond","description":"Responds to the command message","access":"private","params":[{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Message"]],[["Array","<"],["Message",">"]]],"meta":{"line":272,"file":"message.js","path":"src/extensions"}},{"name":"editResponse","description":"Edits a response to the command message","access":"private","params":[{"name":"response","description":"The response message(s) to edit","type":[[["Message"]],[["Array","<"],["Message",">"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":318,"file":"message.js","path":"src/extensions"}},{"name":"editCurrentResponse","description":"Edits the current response","access":"private","params":[{"name":"id","description":"The ID of the channel the response is in (\"DM\" for direct messages)","type":[[["string"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":356,"file":"message.js","path":"src/extensions"}},{"name":"say","description":"Responds with a plain message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":369,"file":"message.js","path":"src/extensions"}},{"name":"reply","description":"Responds with a reply message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":383,"file":"message.js","path":"src/extensions"}},{"name":"direct","description":"Responds with a direct message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":397,"file":"message.js","path":"src/extensions"}},{"name":"code","description":"Responds with a code message","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":412,"file":"message.js","path":"src/extensions"}},{"name":"embed","description":"Responds with an embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":429,"file":"message.js","path":"src/extensions"}},{"name":"replyEmbed","description":"Responds with a mention + embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":442,"file":"message.js","path":"src/extensions"}},{"name":"finalize","description":"Finalizes the command message by setting the responses and deleting any remaining prior ones","access":"private","params":[{"name":"responses","description":"Responses to the message","nullable":true,"type":[[["Array","<("],["Message","|"],["Array","<"],["Message",">)>"]]]}],"meta":{"line":453,"file":"message.js","path":"src/extensions"}},{"name":"deleteRemainingResponses","description":"Deletes any prior responses that haven't been updated","access":"private","meta":{"line":479,"file":"message.js","path":"src/extensions"}},{"name":"parseArgs","description":"Parses an argument string into an array of arguments","scope":"static","params":[{"name":"argString","description":"The argument string to parse","type":[[["string"]]]},{"name":"argCount","description":"The number of arguments to extract from the string","optional":true,"type":[[["number"]]]},{"name":"allowSingleQuote","description":"Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["string",">"]]],"description":"The array of arguments"},"meta":{"line":501,"file":"message.js","path":"src/extensions"}}],"meta":{"line":13,"file":"message.js","path":"src/extensions"}},{"name":"SettingProvider","description":"Loads and stores settings associated with guilds","abstract":true,"methods":[{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","abstract":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","abstract":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","abstract":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}},{"name":"getGuildID","description":"Obtains the ID of the provided guild, or throws an error if it isn't valid","scope":"static","params":[{"name":"guild","description":"Guild to get the ID of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["string"]]],"description":"ID of the guild, or 'global'"},"meta":{"line":71,"file":"base.js","path":"src/providers"}}],"meta":{"line":9,"file":"base.js","path":"src/providers"}},{"name":"GuildSettingsHelper","description":"Helper class to use {@link SettingProvider} methods for a specific Guild","access":"private","construct":{"name":"GuildSettingsHelper","params":[{"name":"client","description":"Client to use the provider of","type":[[["CommandoClient"]]]},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["CommandoGuild"]]]}]},"props":[{"name":"client","description":"Client to use the provider of","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":9,"file":"helper.js","path":"src/providers"}},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["CommandoGuild"]]],"meta":{"line":21,"file":"helper.js","path":"src/providers"}}],"methods":[{"name":"get","description":"Gets a setting in the guild","see":["{@link SettingProvider#get}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":31,"file":"helper.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for the guild","see":["{@link SettingProvider#set}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":43,"file":"helper.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from the guild","see":["{@link SettingProvider#remove}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":54,"file":"helper.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in the guild","see":["{@link SettingProvider#clear}"],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"helper.js","path":"src/providers"}}],"meta":{"line":8,"file":"helper.js","path":"src/providers"}},{"name":"SyncSQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":[[["SettingProvider"]]],"construct":{"name":"SyncSQLiteProvider","params":[{"name":"conn","description":"Database Connection for the provider","type":[[["SyncSQLiteDatabase"]]]}]},"props":[{"name":"conn","description":"Database that will be used for storing/retrieving settings","type":[[["SyncSQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":25,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":38,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":45,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SyncSQLiteStatement"]]],"meta":{"line":52,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SyncSQLiteStatement"]]],"meta":{"line":59,"file":"sqlite-sync.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":167,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":189,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a command group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":206,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"meta":{"line":222,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":16,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"SQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":[[["SettingProvider"]]],"construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"Database for the provider","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"Database that will be used for storing/retrieving settings","type":[[["SQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":25,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":38,"file":"sqlite.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":45,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":52,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":59,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":177,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":199,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a command group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":216,"file":"sqlite.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"meta":{"line":232,"file":"sqlite.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":16,"file":"sqlite.js","path":"src/providers"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","abstract":true,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":36,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","abstract":true,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":49,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":61,"file":"base.js","path":"src/types"}}],"meta":{"line":7,"file":"base.js","path":"src/types"}},{"name":"ArgumentUnionType","description":"A type for command arguments that handles multiple other types","extends":[[["ArgumentType"]]],"props":[{"name":"types","description":"Types to handle, in order of priority","type":[[["Array","<"],["ArgumentType",">"]]],"meta":{"line":15,"file":"union.js","path":"src/types"}},{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":24,"file":"base.js","path":"src/types"}}],"methods":[{"name":"validate","description":"Validates a value string against the type","inherits":"ArgumentType#validate","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":36,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","inherits":"ArgumentType#parse","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":49,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","inherits":"ArgumentType#isEmpty","inherited":true,"params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":61,"file":"base.js","path":"src/types"}}],"meta":{"line":8,"file":"union.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"CommandoClientOptions","description":"Options for a CommandoClient","type":[[["ClientOptions"]]],"props":[{"name":"commandPrefix","description":"Default command prefix","optional":true,"default":"!","type":[[["string"]]]},{"name":"commandEditableDuration","description":"Time in seconds that command messages should be editable","optional":true,"default":30,"type":[[["number"]]]},{"name":"nonCommandEditable","description":"Whether messages without commands can be edited to a command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"owner","description":"ID of the bot owner's Discord user, or multiple IDs","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]],[["Set","<"],["string",">"]]]},{"name":"invite","description":"Invite URL to the bot's support server","optional":true,"type":[[["string"]]]}],"meta":{"line":11,"file":"client.js","path":"src"}},{"name":"Inhibition","type":[[["Object"]]],"props":[{"name":"reason","description":"Identifier for the reason the command is being blocked","type":[[["string"]]]},{"name":"response","description":"Response being sent to the user","nullable":true,"type":[[["Promise","<"],["Message",">"]]]}],"meta":{"line":52,"file":"dispatcher.js","path":"src"}},{"name":"Inhibitor","description":"A function that decides whether the usage of a command should be blocked","type":[[["function"]]],"params":[{"name":"msg","description":"Message triggering the command","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Inhibition"]]],"description":"`false` if the command should *not* be blocked.\nIf the command *should* be blocked, then one of the following:\n- A single string identifying the reason the command is blocked\n- An Inhibition object"},"meta":{"line":58,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroupResolvable","description":"A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID","type":[[["CommandGroup"]],[["string"]]],"meta":{"line":453,"file":"registry.js","path":"src"}},{"name":"CommandResolvable","description":"A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandoMessage","type":[[["Command"]],[["string"]]],"meta":{"line":505,"file":"registry.js","path":"src"}},{"name":"ArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"error","description":"Predefined error message to output for the argument when it isn't valid","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the argument (must be the ID of one of the registered argument types\nor multiple IDs in order of priority separated by `|` for a union type - see\n{@link CommandoRegistry#registerDefaultTypes} for the built-in types)","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the arg optional - cannot be `null`)","optional":true,"type":[[["ArgumentDefault"]]]},{"name":"oneOf","description":"An array of values that are allowed to be used","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument (see {@link ArgumentType#validate})","optional":true,"type":[[["function"]]]},{"name":"parse","description":"Parser function for the argument (see {@link ArgumentType#parse})","optional":true,"type":[[["function"]]]},{"name":"isEmpty","description":"Empty checker for the argument (see {@link ArgumentType#isEmpty})","optional":true,"type":[[["function"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":7,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentDefault","description":"Either a value or a function that returns a value. The function is passed the CommandoMessage and the Argument.","type":[["*"],[["function"]]],"meta":{"line":29,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentResult","description":"Result object from obtaining a single {@link Argument}'s value(s)","type":[[["Object"]]],"props":[{"name":"value","description":"Final value(s) for the argument","type":[["*"],[["Array","<"],["*",">"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":133,"file":"argument.js","path":"src/commands"}},{"name":"ThrottlingOptions","type":[[["Object"]]],"props":[{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]},{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]}],"meta":{"line":9,"file":"base.js","path":"src/commands"}},{"name":"CommandInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (must be lowercase)","type":[[["string"]]]},{"name":"aliases","description":"Alternative names for the command (all must be lowercase)","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The ID of the group the command belongs to (must be lowercase)","type":[[["string"]]]},{"name":"memberName","description":"The member name of the command in the group (must be lowercase)","type":[[["string"]]]},{"name":"description","description":"A short description of the command","type":[[["string"]]]},{"name":"format","description":"The command usage format string - will be automatically generated if not specified,\nand `args` is specified","optional":true,"type":[[["string"]]]},{"name":"details","description":"A detailed description of the command and its functionality","optional":true,"type":[[["string"]]]},{"name":"examples","description":"Usage examples of the command","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ownerOnly","description":"Whether or not the command is usable only by an owner","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"userPermissions","description":"Permissions required by the user to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"nsfw","description":"Whether the command is usable only in NSFW channels.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"argsPromptLimit","description":"Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\nin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array","<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"hidden","description":"Whether the command should be hidden from the help command","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"unknown","description":"Whether the command should be run when an unknown command is used - there\nmay only be one command registered with this property as `true`.","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":15,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollectorResult","description":"Result object from obtaining argument values from an {@link ArgumentCollector}","type":[[["Object"]]],"props":[{"name":"values","description":"Final values for the arguments, mapped by their keys","nullable":true,"type":[[["Object"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":46,"file":"collector.js","path":"src/commands"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":27,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":31,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":35,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":39,"file":"index.js","path":"src"}},{"name":"DMChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/DMChannel}"],"meta":{"line":43,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":47,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":51,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":55,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":59,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":63,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":115,"file":"index.js","path":"src"}},{"name":"MessageReaction","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageReaction}"],"meta":{"line":71,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":75,"file":"index.js","path":"src"}},{"name":"PermissionResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/PermissionResolvable}"],"meta":{"line":79,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":83,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":87,"file":"index.js","path":"src"}},{"name":"TextChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/TextChannel}"],"meta":{"line":91,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":95,"file":"index.js","path":"src"}},{"name":"UserResolvable","see":["{@link https://discord.js.org/#/docs/main/master/class/UserResolvable}"],"meta":{"line":99,"file":"index.js","path":"src"}},{"name":"Emoji","see":["{@link https://discord.js.org/#/docs/main/master/class/Emoji}"],"meta":{"line":103,"file":"index.js","path":"src"}},{"name":"ReactionEmoji","see":["{@link https://discord.js.org/#/docs/main/master/class/ReactionEmoji}"],"meta":{"line":107,"file":"index.js","path":"src"}},{"name":"Webhook","see":["{@link https://discord.js.org/#/docs/main/master/class/Webhook}"],"meta":{"line":111,"file":"index.js","path":"src"}},{"name":"ShardingManager","see":["{@link https://discord.js.org/#/docs/main/master/class/ShardingManager}"],"meta":{"line":119,"file":"index.js","path":"src"}},{"name":"RequireAllOptions","see":["{@link https://www.npmjs.com/package/require-all}"],"meta":{"line":123,"file":"index.js","path":"src"}},{"name":"SyncSQLiteDatabase","see":["{@link https://www.npmjs.com/package/better-sqlite3}"],"meta":{"line":8,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":8,"file":"sqlite.js","path":"src/providers"}}]},
  // RPC/master.json
  {"meta":{"generator":"0.8.0","format":19,"date":1545319592211},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord-rpc\"><img src=\"https://img.shields.io/npm/v/discord-rpc.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord-rpc\"><img src=\"https://img.shields.io/npm/dt/discord-rpc.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/discordjs/RPC\"><img src=\"https://img.shields.io/david/discordjs/RPC.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/devsnek\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord-rpc/\"><img src=\"https://nodei.co/npm/discord-rpc.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Discord.js RPC Extension\n\n### [Documentation](https://discord.js.org/#/docs/rpc/)\n\n### [Rich Presence Example](https://github.com/discordjs/RPC/blob/master/example)\n\n### __Browser__ Example\n\n```javascript\nconst clientId = '187406016902594560';\nconst scopes = ['rpc', 'rpc.api', 'messages.read'];\n\nconst client = new RPC.Client({ transport: 'websocket' });\n\nclient.on('ready', () => {\n  console.log('Logged in as', client.application.name);\n  console.log('Authed for user', client.user.username);\n\n  client.selectVoiceChannel('81384788862181376');\n});\n\n// Log in to RPC with client id\nclient.login({ clientId, scopes });\n```\n","path":"README.md"}}}},"classes":[{"name":"RPCClient","description":"The main hub for interacting with Discord RPC","extends":["BaseClient"],"construct":{"name":"RPCClient","params":[{"name":"options","description":"Options for the client\nYou must provide a transport","optional":true,"type":[[["RPCClientOptions"]]]}]},"props":[{"name":"application","description":"Application used in this client","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":41,"file":"client.js","path":"src"}},{"name":"user","description":"User used in this application","nullable":true,"type":[[["User"]]],"meta":{"line":47,"file":"client.js","path":"src"}},{"name":"transport","description":"Raw transport userd","access":"private","type":[[["RPCTransport"]]],"meta":{"line":70,"file":"client.js","path":"src"}},{"name":"_expecting","description":"Map of nonces being expected from the transport","access":"private","type":[[["Map"]]],"meta":{"line":78,"file":"client.js","path":"src"}},{"name":"_subscriptions","description":"Map of current subscriptions","access":"private","type":[[["Map"]]],"meta":{"line":85,"file":"client.js","path":"src"}}],"methods":[{"name":"connect","description":"Search and connect to RPC","meta":{"line":93,"file":"client.js","path":"src"}},{"name":"login","description":"Performs authentication flow. Automatically calls Client#connect if needed.","examples":["client.login({ clientId: '1234567', clientSecret: 'abcdef123' });"],"params":[{"name":"options","description":"Options for authentication.\nAt least one property must be provided to perform login.","type":[[["RPCLoginOptions"]]]}],"returns":[[["Promise","<"],["RPCClient",">"]]],"meta":{"line":128,"file":"client.js","path":"src"}},{"name":"request","description":"Request","access":"private","params":[{"name":"cmd","description":"Command","type":[[["string"]]]},{"name":"args","description":"Arguments","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"evt","description":"Event","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":149,"file":"client.js","path":"src"}},{"name":"_onRpcMessage","description":"Message handler","access":"private","params":[{"name":"message","description":"message","type":[[["Object"]]]}],"meta":{"line":162,"file":"client.js","path":"src"}},{"name":"authorize","description":"Authorize","access":"private","params":[{"name":"options","description":"options","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":194,"file":"client.js","path":"src"}},{"name":"authenticate","description":"Authenticate","access":"private","params":[{"name":"accessToken","description":"access token","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":230,"file":"client.js","path":"src"}},{"name":"getGuild","description":"Fetch a guild","params":[{"name":"id","description":"Guild ID","type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":248,"file":"client.js","path":"src"}},{"name":"getGuilds","description":"Fetch all guilds","params":[{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Guild",">>"]]],"meta":{"line":257,"file":"client.js","path":"src"}},{"name":"getChannel","description":"Get a channel","params":[{"name":"id","description":"Channel ID","type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":267,"file":"client.js","path":"src"}},{"name":"getChannels","description":"Get all channels","params":[{"name":"id","description":"Guild ID","optional":true,"type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Channel",">>"]]],"meta":{"line":277,"file":"client.js","path":"src"}},{"name":"setCertifiedDevices","description":"Tell discord which devices are certified","params":[{"name":"devices","description":"Certified devices to send to discord","type":[[["Array","<"],["CertifiedDevice",">"]]]}],"returns":[[["Promise"]]],"meta":{"line":307,"file":"client.js","path":"src"}},{"name":"setUserVoiceSettings","description":"Set the voice settings for a uer, by id","params":[{"name":"id","description":"ID of the user to set","type":[[["Snowflake"]]]},{"name":"settings","description":"Settings","type":[[["UserVoiceSettings"]]]}],"returns":[[["Promise"]]],"meta":{"line":338,"file":"client.js","path":"src"}},{"name":"selectVoiceChannel","description":"Move the user to a voice channel","params":[{"name":"id","description":"ID of the voice channel","type":[[["Snowflake"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"Timeout for the command","optional":true,"type":[[["number"]]]},{"name":"options.force","description":"Force this move. This should only be done if you\nhave explicit permission from the user.","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":356,"file":"client.js","path":"src"}},{"name":"selectTextChannel","description":"Move the user to a text channel","params":[{"name":"id","description":"ID of the voice channel","type":[[["Snowflake"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"Timeout for the command","optional":true,"type":[[["number"]]]},{"name":"options.force","description":"Force this move. This should only be done if you\nhave explicit permission from the user.","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":369,"file":"client.js","path":"src"}},{"name":"getVoiceSettings","description":"Get current voice settings","returns":[[["Promise"]]],"meta":{"line":377,"file":"client.js","path":"src"}},{"name":"setVoiceSettings","description":"Set current voice settings, overriding the current settings until this session disconnects.\nThis also locks the settings for any other rpc sessions which may be connected.","params":[{"name":"args","description":"Settings","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":413,"file":"client.js","path":"src"}},{"name":"captureShortcut","description":"Capture a shortcut using the client\nThe callback takes (key, stop) where `stop` is a function that will stop capturing.\nThis `stop` function must be called before disconnecting or else the user will have\nto restart their client.","params":[{"name":"callback","description":"Callback handling keys","type":[[["function"]]]}],"returns":[[["Promise","<"],["function","()>"]]],"meta":{"line":448,"file":"client.js","path":"src"}},{"name":"setActivity","description":"Sets the presence for the logged in user.","params":[{"name":"args","description":"The rich presence to pass.","type":[[["object"]]]},{"name":"pid","description":"The application's process ID. Defaults to the executing process' PID.","optional":true,"type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":467,"file":"client.js","path":"src"}},{"name":"clearActivity","description":"Clears the currently set presence, if any. This will hide the \"Playing X\" message\ndisplayed below the user's name.","params":[{"name":"pid","description":"The application's process ID. Defaults to the executing process' PID.","optional":true,"type":[[["number"]]]}],"returns":[[["Promise"]]],"meta":{"line":535,"file":"client.js","path":"src"}},{"name":"sendJoinInvite","description":"Invite a user to join the game the RPC user is currently playing","params":[{"name":"user","description":"The user to invite","type":[[["User"]]]}],"returns":[[["Promise"]]],"meta":{"line":546,"file":"client.js","path":"src"}},{"name":"sendJoinRequest","description":"Request to join the game the user is playing","params":[{"name":"user","description":"The user whose game you want to request to join","type":[[["User"]]]}],"returns":[[["Promise"]]],"meta":{"line":557,"file":"client.js","path":"src"}},{"name":"closeJoinRequest","description":"Reject a join request from a user","params":[{"name":"user","description":"The user whose request you wish to reject","type":[[["User"]]]}],"returns":[[["Promise"]]],"meta":{"line":568,"file":"client.js","path":"src"}},{"name":"subscribe","description":"Subscribe to an event","params":[{"name":"event","description":"Name of event e.g. `MESSAGE_CREATE`","type":[[["string"]]]},{"name":"args","description":"Args for event e.g. `{ channel_id: '1234' }`","optional":true,"type":[[["Object"]]]},{"name":"callback","description":"Callback when an event for the subscription is triggered","type":[[["function"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":633,"file":"client.js","path":"src"}},{"name":"destroy","description":"Destroy the client","meta":{"line":651,"file":"client.js","path":"src"}}],"meta":{"line":24,"file":"client.js","path":"src"}}],"interfaces":[],"typedefs":[],"externals":[]},
]
