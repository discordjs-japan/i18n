{
  "General": "General",
  "Welcome": "Welcome",
  "# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/Gawdl3y/discord.js-commando.svg)](https://david-dm.org/Gawdl3y/discord.js-commando)\n[![Build status](https://travis-ci.org/hydrabolt/discord.js.svg)](https://travis-ci.org/hydrabolt/discord.js)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/hydrabolt/discord.js).\nIt is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Type system with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t\t- User-defined custom types\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 7.0.0 or newer is required.**  \n`npm install discord.js-commando --save`\n\nWhen running a bot using Commando, make sure to run Node with the `--harmony` flag. Examples:\n- `node --harmony somebot.js`\n- `pm2 start somebot.js --node-args '--harmony'`\n\nNo version of Node older than 7.0.0 supports `async`/`await`, although you can compile it down to ES6 or ES5 with the\n[fast-async](https://www.npmjs.com/package/fast-async) Babel plugin. You must do this for your code and the framework's manually if you wish\nto use Commando on older Node versions.\n": "# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/Gawdl3y/discord.js-commando.svg)](https://david-dm.org/Gawdl3y/discord.js-commando)\n[![Build status](https://travis-ci.org/hydrabolt/discord.js.svg)](https://travis-ci.org/hydrabolt/discord.js)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/hydrabolt/discord.js).\nIt is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Type system with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t\t- User-defined custom types\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 7.0.0 or newer is required.**  \n`npm install discord.js-commando --save`\n\nWhen running a bot using Commando, make sure to run Node with the `--harmony` flag. Examples:\n- `node --harmony somebot.js`\n- `pm2 start somebot.js --node-args '--harmony'`\n\nNo version of Node older than 7.0.0 supports `async`/`await`, although you can compile it down to ES6 or ES5 with the\n[fast-async](https://www.npmjs.com/package/fast-async) Babel plugin. You must do this for your code and the framework's manually if you wish\nto use Commando on older Node versions.\n",
  "Discord.js Client with a command framework": "Discord.js Client with a command framework",
  "Options for the client": "Options for the client",
  "The client's command registry": "The client's command registry",
  "The client's command dispatcher": "The client's command dispatcher",
  "The client's setting provider": "The client's setting provider",
  "Shortcut to use setting provider methods for the global settings": "Shortcut to use setting provider methods for the global settings",
  "Global command prefix": "Global command prefix",
  "Sets the setting provider to use, and initialises it once the client is ready": "Sets the setting provider to use, and initialises it once the client is ready",
  "Provider to use": "Provider to use",
  "Emitted when an unknown command is triggered": "Emitted when an unknown command is triggered",
  "Command message that triggered the command": "Command message that triggered the command",
  "Emitted when a group is registered": "Emitted when a group is registered",
  "Group that was registered": "Group that was registered",
  "Registry that the group was registered to": "Registry that the group was registered to",
  "Emitted when a command is registered": "Emitted when a command is registered",
  "Command that was registered": "Command that was registered",
  "Registry that the command was registered to": "Registry that the command was registered to",
  "Emitted when an argument type is registered": "Emitted when an argument type is registered",
  "Argument type that was registered": "Argument type that was registered",
  "Registry that the type was registered to": "Registry that the type was registered to",
  "Emitted when a command is reregistered": "Emitted when a command is reregistered",
  "New command": "New command",
  "Old command": "Old command",
  "Emitted when a command is unregistered": "Emitted when a command is unregistered",
  "Command that was unregistered": "Command that was unregistered",
  "Emitted when a command is prevented from running": "Emitted when a command is prevented from running",
  "Command message that the command is running from": "Command message that the command is running from",
  "Reason that the command was blocked": "Reason that the command was blocked",
  "Emitted when running a command": "Emitted when running a command",
  "Command that is being run": "Command that is being run",
  "Promise for the command result": "Promise for the command result",
  "Command message that the command is running from (see {@link Command#run})": "Command message that the command is running from (see {@link Command#run})",
  "Arguments for the command (see {@link Command#run})": "Arguments for the command (see {@link Command#run})",
  "Whether the args are pattern matches (see {@link Command#run})": "Whether the args are pattern matches (see {@link Command#run})",
  "Emitted when a command produces an error while running": "Emitted when a command produces an error while running",
  "Command that produced an error": "Command that produced an error",
  "Emitted whenever a guild's command prefix is changed": "Emitted whenever a guild's command prefix is changed",
  "Guild that the prefix was changed in (null for global)": "Guild that the prefix was changed in (null for global)",
  "New command prefix (null for default)": "New command prefix (null for default)",
  "Emitted whenever a command is enabled/disabled in a guild": "Emitted whenever a command is enabled/disabled in a guild",
  "Guild that the command was enabled/disabled in (null for global)": "Guild that the command was enabled/disabled in (null for global)",
  "Command that was enabled/disabled": "Command that was enabled/disabled",
  "Whether the command is enabled": "Whether the command is enabled",
  "Emitted whenever a command group is enabled/disabled in a guild": "Emitted whenever a command group is enabled/disabled in a guild",
  "Guild that the group was enabled/disabled in (null for global)": "Guild that the group was enabled/disabled in (null for global)",
  "Group that was enabled/disabled": "Group that was enabled/disabled",
  "Whether the group is enabled": "Whether the group is enabled",
  "Handles parsing messages and running commands from them": "Handles parsing messages and running commands from them",
  "Client the dispatcher is for": "Client the dispatcher is for",
  "Registry the dispatcher will use": "Registry the dispatcher will use",
  "Client this dispatcher handles messages for": "Client this dispatcher handles messages for",
  "Registry this dispatcher uses": "Registry this dispatcher uses",
  "Functions that can block commands from running": "Functions that can block commands from running",
  "Adds an inhibitor": "Adds an inhibitor",
  "The inhibitor function to add": "The inhibitor function to add",
  "Whether the addition was successful": "Whether the addition was successful",
  "Removes an inhibitor": "Removes an inhibitor",
  "The inhibitor function to remove": "The inhibitor function to remove",
  "Whether the removal was successful": "Whether the removal was successful",
  "Handle a new message or a message update": "Handle a new message or a message update",
  "The message to handle": "The message to handle",
  "The old message before the update": "The old message before the update",
  "Check whether a message should be handled": "Check whether a message should be handled",
  "Inhibits a command message": "Inhibits a command message",
  "Command message to inhibit": "Command message to inhibit",
  "[reason, ?response]": "[reason, ?response]",
  "Caches a command message to be editable": "Caches a command message to be editable",
  "Triggering message": "Triggering message",
  "Triggering message's old version": "Triggering message's old version",
  "Command message to cache": "Command message to cache",
  "Responses to the message": "Responses to the message",
  "Parses a message to find details about command usage in it": "Parses a message to find details about command usage in it",
  "The message": "The message",
  "Matches a message against a guild command pattern": "Matches a message against a guild command pattern",
  "The pattern to match against": "The pattern to match against",
  "The index of the command name in the pattern matches": "The index of the command name in the pattern matches",
  "Creates a regular expression to match the command prefix and name in a message": "Creates a regular expression to match the command prefix and name in a message",
  "The Guild that the message is from": "The Guild that the message is from",
  "Handles registration and searching of commands and groups": "Handles registration and searching of commands and groups",
  "Client to use": "Client to use",
  "The client this registry is for": "The client this registry is for",
  "Registered commands": "Registered commands",
  "Registered command groups": "Registered command groups",
  "Registered argument types": "Registered argument types",
  "Registered objects for the eval command": "Registered objects for the eval command",
  "Fully resolved path to the bot's commands directory": "Fully resolved path to the bot's commands directory",
  "Registers a single group": "Registers a single group",
  "A CommandGroup instance, a constructor,\nan array of [ID, Name], or the group ID": "A CommandGroup instance, a constructor,\nan array of [ID, Name], or the group ID",
  "name - Name for the group (if the first argument is the group ID)": "name - Name for the group (if the first argument is the group ID)",
  "Registers multiple groups": "Registers multiple groups",
  "An array of CommandGroup instances, constructors,\nor arrays of [ID, Name]": "An array of CommandGroup instances, constructors,\nor arrays of [ID, Name]",
  "Registers a single command": "Registers a single command",
  "Either a Command instance, or a constructor for one": "Either a Command instance, or a constructor for one",
  "Registers multiple commands": "Registers multiple commands",
  "An array of Command instances or constructors": "An array of Command instances or constructors",
  "Registers all commands in a directory. The files must export a Command class constructor or instance.": "Registers all commands in a directory. The files must export a Command class constructor or instance.",
  "The path to the directory, or a require-all options object": "The path to the directory, or a require-all options object",
  "Registers a single argument type": "Registers a single argument type",
  "Either an ArgumentType instance, or a constructor for one": "Either an ArgumentType instance, or a constructor for one",
  "Registers multiple argument types": "Registers multiple argument types",
  "An array of ArgumentType instances or constructors": "An array of ArgumentType instances or constructors",
  "Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.": "Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.",
  "Registers the default argument types, groups, and commands": "Registers the default argument types, groups, and commands",
  "Registers the default groups": "Registers the default groups",
  "Registers the default commands to the registry": "Registers the default commands to the registry",
  "Object specifying what commands to register": "Object specifying what commands to register",
  "Whether or not to register the built-in help command": "Whether or not to register the built-in help command",
  "Whether or not to register the built-in prefix command": "Whether or not to register the built-in prefix command",
  "Whether or not to register the built-in eval command": "Whether or not to register the built-in eval command",
  "Whether or not to register the built-in ping command": "Whether or not to register the built-in ping command",
  "Whether or not to register the built-in command state commands\n(enable, disable, reload, list groups)": "Whether or not to register the built-in command state commands\n(enable, disable, reload, list groups)",
  "Registers the default argument types to the registry. These are:\n- string\n- integer\n- float\n- boolean\n- user\n- member\n- role\n- channel\n- message": "Registers the default argument types to the registry. These are:\n- string\n- integer\n- float\n- boolean\n- user\n- member\n- role\n- channel\n- message",
  "Reregisters a command (does not support changing name, group, or memberName)": "Reregisters a command (does not support changing name, group, or memberName)",
  "Unregisters a command": "Unregisters a command",
  "Command to unregister": "Command to unregister",
  "Registers a single object to be usable by the eval command": "Registers a single object to be usable by the eval command",
  "The key for the object": "The key for the object",
  "The object": "The object",
  "Registers multiple objects to be usable by the eval command": "Registers multiple objects to be usable by the eval command",
  "An object of keys: values": "An object of keys: values",
  "Finds all groups that match the search string": "Finds all groups that match the search string",
  "The string to search for": "The string to search for",
  "Whether the search should be exact": "Whether the search should be exact",
  "All groups that are found": "All groups that are found",
  "Resolves a CommandGroupResolvable to a CommandGroup object": "Resolves a CommandGroupResolvable to a CommandGroup object",
  "The group to resolve": "The group to resolve",
  "The resolved CommandGroup": "The resolved CommandGroup",
  "Finds all commands that match the search string": "Finds all commands that match the search string",
  "The message to check usability against": "The message to check usability against",
  "All commands that are found": "All commands that are found",
  "Resolves a CommandResolvable to a Command object": "Resolves a CommandResolvable to a Command object",
  "The command to resolve": "The command to resolve",
  "The resolved Command": "The resolved Command",
  "Resolves a command file path from a command's group ID and memberName": "Resolves a command file path from a command's group ID and memberName",
  "ID of the command's group": "ID of the command's group",
  "Member name of the command": "Member name of the command",
  "Fully-resolved path to the corresponding command file": "Fully-resolved path to the corresponding command file",
  "A fancy argument for a command": "A fancy argument for a command",
  "Command the argument is for": "Command the argument is for",
  "Information for the command argument": "Information for the command argument",
  "Key for the argument": "Key for the argument",
  "Label for the argument": "Label for the argument",
  "Question prompt for the argument": "Question prompt for the argument",
  "Type of the argument": "Type of the argument",
  "If type is 'integer' or 'float', this is the maximum value of the number.\nIf type is 'string', this is the maximum length of the string.": "If type is 'integer' or 'float', this is the maximum value of the number.\nIf type is 'string', this is the maximum length of the string.",
  "If type is 'integer' or 'float', this is the minimum value of the number.\nIf type is 'string', this is the minimum length of the string.": "If type is 'integer' or 'float', this is the minimum value of the number.\nIf type is 'string', this is the minimum length of the string.",
  "The default value for the argument": "The default value for the argument",
  "Whether the argument accepts an infinite number of values": "Whether the argument accepts an infinite number of values",
  "Validator function for validating a value for the argument": "Validator function for validating a value for the argument",
  "Parser function for parsing a value for the argument": "Parser function for parsing a value for the argument",
  "How long to wait for input (in seconds)": "How long to wait for input (in seconds)",
  "Prompts the user and obtains the value for the argument": "Prompts the user and obtains the value for the argument",
  "Message that triggered the command": "Message that triggered the command",
  "Pre-provided value for the argument": "Pre-provided value for the argument",
  "Prompts the user and obtains multiple values for the argument": "Prompts the user and obtains multiple values for the argument",
  "Pre-provided values for the argument": "Pre-provided values for the argument",
  "Checks if a value is valid for the argument": "Checks if a value is valid for the argument",
  "Value to check": "Value to check",
  "Parses a value string into a proper value for the argument": "Parses a value string into a proper value for the argument",
  "Value to parse": "Value to parse",
  "A command that can be run in a client": "A command that can be run in a client",
  "The client the command is for": "The client the command is for",
  "The command information": "The command information",
  "Client that this command is for": "Client that this command is for",
  "Name of this command": "Name of this command",
  "Aliases for this command": "Aliases for this command",
  "ID of the group the command belongs to": "ID of the group the command belongs to",
  "The group the command belongs to, assigned upon registration": "The group the command belongs to, assigned upon registration",
  "Name of the command within the group": "Name of the command within the group",
  "Short description of the command": "Short description of the command",
  "Usage format string of the command": "Usage format string of the command",
  "Long description of the command": "Long description of the command",
  "Example usage strings": "Example usage strings",
  "Whether the command can only be run in a guild channel": "Whether the command can only be run in a guild channel",
  "Whether the default command handling is enabled for the command": "Whether the default command handling is enabled for the command",
  "Options for throttling command usages": "Options for throttling command usages",
  "The arguments for the command": "The arguments for the command",
  "Maximum number of times to prompt for a single argument": "Maximum number of times to prompt for a single argument",
  "How the arguments are split when passed to the command's run method": "How the arguments are split when passed to the command's run method",
  "Maximum number of arguments that will be split": "Maximum number of arguments that will be split",
  "Whether single quotes are allowed to encapsulate an argument": "Whether single quotes are allowed to encapsulate an argument",
  "Regular expression triggers": "Regular expression triggers",
  "Whether the command is protected from being disabled": "Whether the command is protected from being disabled",
  "Checks a user's permission in a guild": "Checks a user's permission in a guild",
  "The triggering command message": "The triggering command message",
  "Runs the command": "Runs the command",
  "The message the command is being run for": "The message the command is being run for",
  "The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).": "The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).",
  "Whether or not the command is being run from a pattern match": "Whether or not the command is being run from a pattern match",
  "Enables or disables the command in a guild": "Enables or disables the command in a guild",
  "Guild to enable/disable the command in": "Guild to enable/disable the command in",
  "Whether the command should be enabled or disabled": "Whether the command should be enabled or disabled",
  "Checks if the command is enabled in a guild": "Checks if the command is enabled in a guild",
  "Guild to check in": "Guild to check in",
  "Checks if the command is usable for a message": "Checks if the command is usable for a message",
  "Creates a usage string for the command": "Creates a usage string for the command",
  "A string of arguments for the command": "A string of arguments for the command",
  "Prefix to use for the prefixed command format": "Prefix to use for the prefixed command format",
  "User to use for the mention command format": "User to use for the mention command format",
  "Reloads the command": "Reloads the command",
  "Unloads the command": "Unloads the command",
  "Creates a usage string for a command": "Creates a usage string for a command",
  "A command + arg string": "A command + arg string",
  "A group for commands. Whodathunkit?": "A group for commands. Whodathunkit?",
  "The client the group is for": "The client the group is for",
  "The ID for the group": "The ID for the group",
  "The name of the group": "The name of the group",
  "Whether the group should be protected from disabling": "Whether the group should be protected from disabling",
  "The commands that the group contains": "The commands that the group contains",
  "Client that this group is for": "Client that this group is for",
  "ID of this group": "ID of this group",
  "Name of this group": "Name of this group",
  "The commands in this group (added upon their registration)": "The commands in this group (added upon their registration)",
  "Whether or not this group is protected from being disabled": "Whether or not this group is protected from being disabled",
  "Enables or disables the group in a guild": "Enables or disables the group in a guild",
  "Guild to enable/disable the group in": "Guild to enable/disable the group in",
  "Whether the group should be enabled or disabled": "Whether the group should be enabled or disabled",
  "Checks if the group is enabled in a guild": "Checks if the group is enabled in a guild",
  "Whether or not the group is enabled": "Whether or not the group is enabled",
  "Reloads all of the group's commands": "Reloads all of the group's commands",
  "A container for a message that triggers a command, that command, and methods to respond": "A container for a message that triggers a command, that command, and methods to respond",
  "Message that triggers the command": "Message that triggers the command",
  "Command the message triggers": "Command the message triggers",
  "Argument string for the command": "Argument string for the command",
  "Command pattern matches (if from a pattern trigger)": "Command pattern matches (if from a pattern trigger)",
  "Client that the message was sent from": "Client that the message was sent from",
  "Command that the message triggers, if any": "Command that the message triggers, if any",
  "Pattern matches (if from a pattern trigger)": "Pattern matches (if from a pattern trigger)",
  "Response messages sent, mapped by channel ID (set by the dispatcher after running the command)": "Response messages sent, mapped by channel ID (set by the dispatcher after running the command)",
  "The index of the current response that will be edited, mapped by channel ID": "The index of the current response that will be edited, mapped by channel ID",
  "Number of times the user has been prompted while the arguments are being obtained": "Number of times the user has been prompted while the arguments are being obtained",
  "Shortcut to `this.message.id`": "Shortcut to `this.message.id`",
  "Shortcut to `this.message.content`": "Shortcut to `this.message.content`",
  "Shortcut to `this.message.author`": "Shortcut to `this.message.author`",
  "Shortcut to `this.message.channel`": "Shortcut to `this.message.channel`",
  "Shortcut to `this.message.guild`": "Shortcut to `this.message.guild`",
  "Shortcut to `this.message.member`": "Shortcut to `this.message.member`",
  "Shortcut to `this.message.pinned`": "Shortcut to `this.message.pinned`",
  "Shortcut to `this.message.tts`": "Shortcut to `this.message.tts`",
  "Shortcut to `this.message.nonce`": "Shortcut to `this.message.nonce`",
  "Shortcut to `this.message.system`": "Shortcut to `this.message.system`",
  "Shortcut to `this.message.embeds`": "Shortcut to `this.message.embeds`",
  "Shortcut to `this.message.attachments`": "Shortcut to `this.message.attachments`",
  "Shortcut to `this.message.reactions`": "Shortcut to `this.message.reactions`",
  "Shortcut to `this.message.createdTimestamp`": "Shortcut to `this.message.createdTimestamp`",
  "Shortcut to `this.message.createdAt`": "Shortcut to `this.message.createdAt`",
  "Shortcut to `this.message.editedTimestamp`": "Shortcut to `this.message.editedTimestamp`",
  "Shortcut to `this.message.editedAt`": "Shortcut to `this.message.editedAt`",
  "Shortcut to `this.message.mentions`": "Shortcut to `this.message.mentions`",
  "Shortcut to `this.message.webhookID`": "Shortcut to `this.message.webhookID`",
  "Shortcut to `this.message.cleanContent`": "Shortcut to `this.message.cleanContent`",
  "Shortcut to `this.message.edits`": "Shortcut to `this.message.edits`",
  "Shortcut to `this.message.editable`": "Shortcut to `this.message.editable`",
  "Shortcut to `this.message.deletable`": "Shortcut to `this.message.deletable`",
  "Shortcut to `this.message.pinnable`": "Shortcut to `this.message.pinnable`",
  "Silently cancels a running command": "Silently cancels a running command",
  "Cancels a running command with a format error": "Cancels a running command with a format error",
  "Creates a usage string for the message's command": "Creates a usage string for the message's command",
  "Prefix to use for the\nprefixed command format": "Prefix to use for the\nprefixed command format",
  "Creates a usage string for any command": "Creates a usage string for any command",
  "Parses the argString into usable arguments, based on the argsType and argsCount of the command": "Parses the argString into usable arguments, based on the argsType and argsCount of the command",
  "Obtains the values for the command's arguments": "Obtains the values for the command's arguments",
  "Throttles the command if necessary (the owner is excluded)": "Throttles the command if necessary (the owner is excluded)",
  "Responds to the command message": "Responds to the command message",
  "Options for the response": "Options for the response",
  "Edits a response to the command message": "Edits a response to the command message",
  "The response message(s) to edit": "The response message(s) to edit",
  "Edits the current response": "Edits the current response",
  "The ID of the channel the response is in (\"DM\" for direct messages)": "The ID of the channel the response is in (\"DM\" for direct messages)",
  "Responds with a plain message": "Responds with a plain message",
  "Content for the message": "Content for the message",
  "Options for the message": "Options for the message",
  "Responds with a reply message": "Responds with a reply message",
  "Responds with a direct message": "Responds with a direct message",
  "Responds with a code message": "Responds with a code message",
  "Language for the code block": "Language for the code block",
  "Responds with an embed": "Responds with an embed",
  "Embed to send": "Embed to send",
  "Responds with a mention + embed": "Responds with a mention + embed",
  "Finalizes the command message by setting the responses and deleting any remaining prior ones": "Finalizes the command message by setting the responses and deleting any remaining prior ones",
  "Deletes any prior responses that haven't been updated": "Deletes any prior responses that haven't been updated",
  "Shortcut to `this.message.isMentioned(data)`": "Shortcut to `this.message.isMentioned(data)`",
  "A guild channel, user, or a role, or the ID of any of these": "A guild channel, user, or a role, or the ID of any of these",
  "Shortcut to `this.message.isMemberMentioned(data)`": "Shortcut to `this.message.isMemberMentioned(data)`",
  "Member/user to check for a mention of": "Member/user to check for a mention of",
  "Shortcut to `this.message.edit(content)`": "Shortcut to `this.message.edit(content)`",
  "New content for the message": "New content for the message",
  "Shortcut to `this.message.editCode(content)`": "Shortcut to `this.message.editCode(content)`",
  "Shortcut to `this.message.react()`": "Shortcut to `this.message.react()`",
  "Emoji to react with": "Emoji to react with",
  "Shortcut to `this.message.clearReactions()`": "Shortcut to `this.message.clearReactions()`",
  "Shortcut to `this.message.pin()`": "Shortcut to `this.message.pin()`",
  "Shortcut to `this.message.unpin()`": "Shortcut to `this.message.unpin()`",
  "Shortcut to `this.message.delete()`": "Shortcut to `this.message.delete()`",
  "How long to wait to delete the message in milliseconds": "How long to wait to delete the message in milliseconds",
  "Shortcut to `this.message.fetchWebhook()`": "Shortcut to `this.message.fetchWebhook()`",
  "Parses an argument string into an array of arguments": "Parses an argument string into an array of arguments",
  "The argument string to parse": "The argument string to parse",
  "The number of arguments to extract from the string": "The number of arguments to extract from the string",
  "Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes": "Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes",
  "The array of arguments": "The array of arguments",
  "Has a descriptive message for a command not having proper format": "Has a descriptive message for a command not having proper format",
  "The command message the error is for": "The command message the error is for",
  "Has a message that can be considered user-friendly": "Has a message that can be considered user-friendly",
  "The error message": "The error message",
  "Contains additional methods and properties that are added to the discord.js Guild class": "Contains additional methods and properties that are added to the discord.js Guild class",
  "Command prefix in the guild": "Command prefix in the guild",
  "Shortcut to use setting provider methods for this guild": "Shortcut to use setting provider methods for this guild",
  "Sets whether a command is enabled in the guild": "Sets whether a command is enabled in the guild",
  "Command to set status of": "Command to set status of",
  "Whether the command should be enabled": "Whether the command should be enabled",
  "Checks whether a command is enabled in the guild (does not take the command's group status into account)": "Checks whether a command is enabled in the guild (does not take the command's group status into account)",
  "Command to check status of": "Command to check status of",
  "Sets whether a command group is enabled in the guild": "Sets whether a command group is enabled in the guild",
  "Whether the group should be enabled": "Whether the group should be enabled",
  "Checks whether a command group is enabled in the guild": "Checks whether a command group is enabled in the guild",
  "Group to check status of": "Group to check status of",
  "Creates a command usage string using the guild's prefix": "Creates a command usage string using the guild's prefix",
  "Applies the interface to a class prototype": "Applies the interface to a class prototype",
  "The constructor function to apply to the prototype of": "The constructor function to apply to the prototype of",
  "Loads and stores settings associated with guilds": "Loads and stores settings associated with guilds",
  "Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.": "Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.",
  "Client that will be using the provider": "Client that will be using the provider",
  "Destroys the provider, removing any event listeners.": "Destroys the provider, removing any event listeners.",
  "Obtains a setting for a guild": "Obtains a setting for a guild",
  "Guild the setting is associated with (or 'global')": "Guild the setting is associated with (or 'global')",
  "Name of the setting": "Name of the setting",
  "Value to default to if the setting isn't set on the guild": "Value to default to if the setting isn't set on the guild",
  "Sets a setting for a guild": "Sets a setting for a guild",
  "Guild to associate the setting with (or 'global')": "Guild to associate the setting with (or 'global')",
  "Value of the setting": "Value of the setting",
  "New value of the setting": "New value of the setting",
  "Removes a setting from a guild": "Removes a setting from a guild",
  "Old value of the setting": "Old value of the setting",
  "Removes all settings in a guild": "Removes all settings in a guild",
  "Guild to clear the settings of": "Guild to clear the settings of",
  "Obtains the ID of the provided guild, or throws an error if it isn't valid": "Obtains the ID of the provided guild, or throws an error if it isn't valid",
  "Guild to get the ID of": "Guild to get the ID of",
  "ID of the guild, or 'global'": "ID of the guild, or 'global'",
  "Helper class to use {@link SettingProvider} methods for a specific Guild": "Helper class to use {@link SettingProvider} methods for a specific Guild",
  "Client to use the provider of": "Client to use the provider of",
  "Guild the settings are for": "Guild the settings are for",
  "Gets a setting in the guild": "Gets a setting in the guild",
  "Value to default to if the setting isn't set": "Value to default to if the setting isn't set",
  "Sets a setting for the guild": "Sets a setting for the guild",
  "Removes a setting from the guild": "Removes a setting from the guild",
  "Removes all settings in the guild": "Removes all settings in the guild",
  "Uses an SQLite database to store settings with guilds": "Uses an SQLite database to store settings with guilds",
  "Database for the provider": "Database for the provider",
  "Database that will be used for storing/retrieving settings": "Database that will be used for storing/retrieving settings",
  "Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})": "Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})",
  "Settings cached in memory, mapped by guild ID (or 'global')": "Settings cached in memory, mapped by guild ID (or 'global')",
  "Listeners on the Client, mapped by the event name": "Listeners on the Client, mapped by the event name",
  "Prepared statement to insert or replace a settings row": "Prepared statement to insert or replace a settings row",
  "Prepared statement to delete an entire settings row": "Prepared statement to delete an entire settings row",
  "Loads all settings for a guild": "Loads all settings for a guild",
  "Guild ID to load the settings of (or 'global')": "Guild ID to load the settings of (or 'global')",
  "Settings to load": "Settings to load",
  "Sets up a command's status in a guild from the guild's settings": "Sets up a command's status in a guild from the guild's settings",
  "Guild to set the status in": "Guild to set the status in",
  "Command to set the status of": "Command to set the status of",
  "Settings of the guild": "Settings of the guild",
  "Sets up a group's status in a guild from the guild's settings": "Sets up a group's status in a guild from the guild's settings",
  "Group to set the status of": "Group to set the status of",
  "A type for command arguments": "A type for command arguments",
  "The client the argument type is for": "The client the argument type is for",
  "The argument type ID (this is what you specify in {@link CommandArgumentInfo#type})": "The argument type ID (this is what you specify in {@link CommandArgumentInfo#type})",
  "Client that this argument type is for": "Client that this argument type is for",
  "ID of this argument type (this is what you specify in {@link CommandArgumentInfo#type})": "ID of this argument type (this is what you specify in {@link CommandArgumentInfo#type})",
  "Validates a value against the type": "Validates a value against the type",
  "Value to validate": "Value to validate",
  "Message the value was obtained from": "Message the value was obtained from",
  "Argument the value obtained from": "Argument the value obtained from",
  "Whether the value is valid, or an error message": "Whether the value is valid, or an error message",
  "Parses the raw value into a usable value": "Parses the raw value into a usable value",
  "Usable value": "Usable value",
  "Options for a CommandoClient": "Options for a CommandoClient",
  "Whether the command dispatcher should be in selfbot mode": "Whether the command dispatcher should be in selfbot mode",
  "Default command prefix": "Default command prefix",
  "Time in seconds that command messages should be editable": "Time in seconds that command messages should be editable",
  "Whether messages without commands can be edited to a command": "Whether messages without commands can be edited to a command",
  "Whether the bot should respond to an unknown command": "Whether the bot should respond to an unknown command",
  "ID of the bot owner's Discord user": "ID of the bot owner's Discord user",
  "Invite URL to the bot's support server": "Invite URL to the bot's support server",
  "A function that can block the usage of a command - these functions are passed the command message that is\ntriggering the command. They should return `false` if the command should *not* be blocked. If the command *should*\nbe blocked, they should return one of the following:\n- A single string identifying the reason the command is blocked\n- An array of the above string as element 0, and a response promise or `null` as element 1": "A function that can block the usage of a command - these functions are passed the command message that is\ntriggering the command. They should return `false` if the command should *not* be blocked. If the command *should*\nbe blocked, they should return one of the following:\n- A single string identifying the reason the command is blocked\n- An array of the above string as element 0, and a response promise or `null` as element 1",
  "A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID": "A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID",
  "A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandMessage": "A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandMessage",
  "First prompt for the argument when it wasn't specified": "First prompt for the argument when it wasn't specified",
  "Type of the argument (must be the ID of one of the registered argument types -\nsee {@link CommandRegistry#registerDefaultTypes} for the built-in types)": "Type of the argument (must be the ID of one of the registered argument types -\nsee {@link CommandRegistry#registerDefaultTypes} for the built-in types)",
  "Default value for the argument (makes the argument optional - cannot be `null`)": "Default value for the argument (makes the argument optional - cannot be `null`)",
  "Whether the argument accepts infinite values": "Whether the argument accepts infinite values",
  "Validator function for the argument (see {@link ArgumentType#validate})": "Validator function for the argument (see {@link ArgumentType#validate})",
  "Parser function for the argument (see {@link ArgumentType#parse})": "Parser function for the argument (see {@link ArgumentType#parse})",
  "Maximum number of usages of the command allowed in the time frame.": "Maximum number of usages of the command allowed in the time frame.",
  "Amount of time to count the usages of the command within (in seconds).": "Amount of time to count the usages of the command within (in seconds).",
  "The name of the command (must be lowercase)": "The name of the command (must be lowercase)",
  "Alternative names for the command (all must be lowercase)": "Alternative names for the command (all must be lowercase)",
  "Whether automatic aliases should be added": "Whether automatic aliases should be added",
  "The ID of the group the command belongs to (must be lowercase)": "The ID of the group the command belongs to (must be lowercase)",
  "The member name of the command in the group (must be lowercase)": "The member name of the command in the group (must be lowercase)",
  "A short description of the command": "A short description of the command",
  "The command usage format string - will be automatically generated if not specified,\nand `args` is specified": "The command usage format string - will be automatically generated if not specified,\nand `args` is specified",
  "A detailed description of the command and its functionality": "A detailed description of the command and its functionality",
  "Usage examples of the command": "Usage examples of the command",
  "Whether or not the command should only function in a guild channel": "Whether or not the command should only function in a guild channel",
  "Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.": "Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.",
  "Options for throttling usages of the command.": "Options for throttling usages of the command.",
  "Arguments for the command.": "Arguments for the command.",
  "Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.": "Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.",
  "One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.": "One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.",
  "The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.": "The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.",
  "Whether or not single quotes should be allowed to box-in arguments\nin the command string.": "Whether or not single quotes should be allowed to box-in arguments\nin the command string.",
  "Patterns to use for triggering the command": "Patterns to use for triggering the command",
  "Whether the command should be protected from disabling": "Whether the command should be protected from disabling"
}